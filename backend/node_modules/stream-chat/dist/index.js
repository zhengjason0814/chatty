'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var base64Js = require('base64-js');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _createClass = require('@babel/runtime/helpers/createClass');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _extends = require('@babel/runtime/helpers/extends');
var _typeof = require('@babel/runtime/helpers/typeof');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var axios = require('axios');
var https = require('https');
var FormData = require('form-data');
var WebSocket = require('isomorphic-ws');
var jwt = require('jsonwebtoken');
var crypto$1 = require('crypto');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
var _wrapNativeSuper = require('@babel/runtime/helpers/wrapNativeSuper');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _objectWithoutProperties__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutProperties);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);
var https__default = /*#__PURE__*/_interopDefaultLegacy(https);
var FormData__default = /*#__PURE__*/_interopDefaultLegacy(FormData);
var WebSocket__default = /*#__PURE__*/_interopDefaultLegacy(WebSocket);
var jwt__default = /*#__PURE__*/_interopDefaultLegacy(jwt);
var crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto$1);
var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);
var _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);

function isString$1(arrayOrString) {
  return typeof arrayOrString === 'string';
}

function isMapStringCallback(arrayOrString, callback) {
  return !!callback && isString$1(arrayOrString);
} // source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72


function map(arrayOrString, callback) {
  var res = [];

  if (isString$1(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {
    for (var k = 0, len = arrayOrString.length; k < len; k++) {
      if (arrayOrString.charAt(k)) {
        var kValue = arrayOrString.charAt(k);
        var mappedValue = callback(kValue, k, arrayOrString);
        res[k] = mappedValue;
      }
    }
  } else if (!isString$1(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {
    for (var _k = 0, _len = arrayOrString.length; _k < _len; _k++) {
      if (_k in arrayOrString) {
        var _kValue = arrayOrString[_k];

        var _mappedValue = callback(_kValue, _k, arrayOrString);

        res[_k] = _mappedValue;
      }
    }
  }

  return res;
}

var encodeBase64 = function encodeBase64(data) {
  return base64Js.fromByteArray(new Uint8Array(map(data, function (char) {
    return char.charCodeAt(0);
  })));
}; // base-64 decoder throws exception if encoded string is not padded by '=' to make string length
// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility
// https://github.com/beatgammit/base64-js/blob/master/index.js#L26

var decodeBase64 = function decodeBase64(s) {
  var e = {},
      w = String.fromCharCode,
      L = s.length;
  var i,
      b = 0,
      c,
      x,
      l = 0,
      a,
      r = '';
  var A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (i = 0; i < 64; i++) {
    e[A.charAt(i)] = i;
  }

  for (x = 0; x < L; x++) {
    c = e[s.charAt(x)];
    b = (b << 6) + c;
    l += 6;

    while (l >= 8) {
      ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));
    }
  }

  return r;
};

var Campaign = /*#__PURE__*/function () {
  function Campaign(client, id, data) {
    _classCallCheck__default['default'](this, Campaign);

    _defineProperty__default['default'](this, "id", void 0);

    _defineProperty__default['default'](this, "data", void 0);

    _defineProperty__default['default'](this, "client", void 0);

    this.client = client;
    this.id = id;
    this.data = data;
  }

  _createClass__default['default'](Campaign, [{
    key: "create",
    value: function () {
      var _create = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this$data, _this$data2, _this$data3, _this$data4, _this$data5, _this$data6, _this$data7, _this$data8, _this$data9, _this$data10, _this$data11, _this$data12;

        var body, result;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                body = {
                  id: this.id,
                  message_template: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.message_template,
                  segment_ids: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.segment_ids,
                  sender_id: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.sender_id,
                  sender_mode: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.sender_mode,
                  channel_template: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.channel_template,
                  create_channels: (_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.create_channels,
                  show_channels: (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.show_channels,
                  description: (_this$data8 = this.data) === null || _this$data8 === void 0 ? void 0 : _this$data8.description,
                  name: (_this$data9 = this.data) === null || _this$data9 === void 0 ? void 0 : _this$data9.name,
                  skip_push: (_this$data10 = this.data) === null || _this$data10 === void 0 ? void 0 : _this$data10.skip_push,
                  skip_webhook: (_this$data11 = this.data) === null || _this$data11 === void 0 ? void 0 : _this$data11.skip_webhook,
                  user_ids: (_this$data12 = this.data) === null || _this$data12 === void 0 ? void 0 : _this$data12.user_ids
                };
                _context.next = 3;
                return this.client.createCampaign(body);

              case 3:
                result = _context.sent;
                this.id = result.campaign.id;
                this.data = result.campaign;
                return _context.abrupt("return", result);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function create() {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "verifyCampaignId",
    value: function verifyCampaignId() {
      if (!this.id) {
        throw new Error('Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)');
      }
    }
  }, {
    key: "start",
    value: function () {
      var _start = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.verifyCampaignId();
                _context2.next = 3;
                return this.client.startCampaign(this.id, options);

              case 3:
                return _context2.abrupt("return", _context2.sent);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function start(_x) {
        return _start.apply(this, arguments);
      }

      return start;
    }()
  }, {
    key: "update",
    value: function () {
      var _update = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(data) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.verifyCampaignId();
                return _context3.abrupt("return", this.client.updateCampaign(this.id, data));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function update(_x2) {
        return _update.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.verifyCampaignId();
                _context4.next = 3;
                return this.client.deleteCampaign(this.id);

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "stop",
    value: function () {
      var _stop = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5() {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.verifyCampaignId();
                return _context5.abrupt("return", this.client.stopCampaign(this.id));

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function stop() {
        return _stop.apply(this, arguments);
      }

      return stop;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.verifyCampaignId();
                return _context6.abrupt("return", this.client.getCampaign(this.id, options));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function get(_x3) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }]);

  return Campaign;
}();

function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$e(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper$5(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (_e) { function e(_x2) { return _e.apply(this, arguments); } e.toString = function () { return _e.toString(); }; return e; }(function (e) { throw e; }), f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function (_e2) { function e(_x3) { return _e2.apply(this, arguments); } e.toString = function () { return _e2.toString(); }; return e; }(function (e) { didErr = true; err = e; }), f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }

function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * logChatPromiseExecution - utility function for logging the execution of a promise..
 *  use this when you want to run the promise and handle errors by logging a warning
 *
 * @param {Promise<T>} promise The promise you want to run and log
 * @param {string} name    A descriptive name of what the promise does for log output
 *
 */
function logChatPromiseExecution(promise, name) {
  promise.then().catch(function (error) {
    console.warn("failed to do ".concat(name, ", ran into error: "), error);
  });
}
var sleep = function sleep(m) {
  return new Promise(function (r) {
    return setTimeout(r, m);
  });
};
function isFunction(value) {
  return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);
}
var chatCodes = {
  TOKEN_EXPIRED: 40,
  WS_CLOSED_SUCCESS: 1000
};

function isReadableStream(obj) {
  return obj !== null && _typeof__default['default'](obj) === 'object' && (obj.readable || typeof obj._read === 'function');
}

function isBuffer(obj) {
  return obj != null && obj.constructor != null && // @ts-expect-error
  typeof obj.constructor.isBuffer === 'function' && // @ts-expect-error
  obj.constructor.isBuffer(obj);
}

function isFileWebAPI(uri) {
  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;
}

function isOwnUser(user) {
  return (user === null || user === void 0 ? void 0 : user.total_unread_count) !== undefined;
}

function isBlobWebAPI(uri) {
  return typeof window !== 'undefined' && 'Blob' in window && uri instanceof Blob;
}

function isOwnUserBaseProperty(property) {
  var ownUserBaseProperties = {
    channel_mutes: true,
    devices: true,
    mutes: true,
    total_unread_count: true,
    unread_channels: true,
    unread_count: true,
    unread_threads: true,
    invisible: true,
    privacy_settings: true,
    roles: true,
    push_preferences: true
  };
  return ownUserBaseProperties[property];
}
function addFileToFormData(uri, name, contentType) {
  var data = new FormData__default['default']();

  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {
    if (name) data.append('file', uri, name);else data.append('file', uri);
  } else {
    data.append('file', {
      uri: uri,
      name: name || uri.split('/').reverse()[0],
      contentType: contentType || undefined,
      type: contentType || undefined
    });
  }

  return data;
}
function normalizeQuerySort(sort) {
  var sortFields = [];
  var sortArr = Array.isArray(sort) ? sort : [sort];

  var _iterator = _createForOfIteratorHelper$5(sortArr),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _item = _step.value;
      var entries = Object.entries(_item);

      if (entries.length > 1) {
        console.warn("client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed");
      }

      for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {
        var _entries$_i = _slicedToArray__default['default'](_entries[_i], 2),
            field = _entries$_i[0],
            direction = _entries$_i[1];

        sortFields.push({
          field: field,
          direction: direction
        });
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return sortFields;
}
/**
 * retryInterval - A retry interval which increases acc to number of failures
 *
 * @return {number} Duration to wait in milliseconds
 */

function retryInterval(numberOfFailures) {
  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)
  var max = Math.min(500 + numberOfFailures * 2000, 25000);
  var min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);
  return Math.floor(Math.random() * (max - min) + min);
}
function randomId() {
  return generateUUIDv4();
}

function hex(bytes) {
  var s = '';

  for (var i = 0; i < bytes.length; i++) {
    s += bytes[i].toString(16).padStart(2, '0');
  }

  return s;
} // https://tools.ietf.org/html/rfc4122


function generateUUIDv4() {
  var bytes = getRandomBytes(16);
  bytes[6] = bytes[6] & 0x0f | 0x40; // version

  bytes[8] = bytes[8] & 0xbf | 0x80; // variant

  return hex(bytes.subarray(0, 4)) + '-' + hex(bytes.subarray(4, 6)) + '-' + hex(bytes.subarray(6, 8)) + '-' + hex(bytes.subarray(8, 10)) + '-' + hex(bytes.subarray(10, 16));
}

function getRandomValuesWithMathRandom(bytes) {
  var max = Math.pow(2, 8 * bytes.byteLength / bytes.length);

  for (var i = 0; i < bytes.length; i++) {
    bytes[i] = Math.random() * max;
  }
}

var getRandomValues = function () {
  var _crypto;

  if (typeof crypto !== 'undefined' && typeof ((_crypto = crypto) === null || _crypto === void 0 ? void 0 : _crypto.getRandomValues) !== 'undefined') {
    return crypto.getRandomValues.bind(crypto);
  } else if (typeof msCrypto !== 'undefined') {
    return msCrypto.getRandomValues.bind(msCrypto);
  } else {
    return getRandomValuesWithMathRandom;
  }
}();

function getRandomBytes(length) {
  var bytes = new Uint8Array(length);
  getRandomValues(bytes);
  return bytes;
}

function convertErrorToJson(err) {
  var jsonObj = {};
  if (!err) return jsonObj;

  try {
    Object.getOwnPropertyNames(err).forEach(function (key) {
      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);
    });
  } catch (_) {
    return {
      error: 'failed to serialize the error'
    };
  }

  return jsonObj;
}
/**
 * isOnline safely return the navigator.online value for browser env
 * if navigator is not in global object, it always return true
 */

function isOnline() {
  var nav = typeof navigator !== 'undefined' ? navigator : typeof window !== 'undefined' && window.navigator ? window.navigator : undefined;

  if (!nav) {
    console.warn('isOnline failed to access window.navigator and assume browser is online');
    return true;
  } // RN navigator has undefined for onLine


  if (typeof nav.onLine !== 'boolean') {
    return true;
  }

  return nav.onLine;
}
/**
 * listenForConnectionChanges - Adds an event listener fired on browser going online or offline
 */

function addConnectionEventListeners(cb) {
  if (typeof window !== 'undefined' && window.addEventListener) {
    window.addEventListener('offline', cb);
    window.addEventListener('online', cb);
  }
}
function removeConnectionEventListeners(cb) {
  if (typeof window !== 'undefined' && window.removeEventListener) {
    window.removeEventListener('offline', cb);
    window.removeEventListener('online', cb);
  }
}
var axiosParamsSerializer = function axiosParamsSerializer(params) {
  var newParams = [];

  for (var k in params) {
    // Stream backend doesn't treat "undefined" value same as value not being present.
    // So, we need to skip the undefined values.
    if (params[k] === undefined) continue;

    if (Array.isArray(params[k]) || _typeof__default['default'](params[k]) === 'object') {
      newParams.push("".concat(k, "=").concat(encodeURIComponent(JSON.stringify(params[k]))));
    } else {
      newParams.push("".concat(k, "=").concat(encodeURIComponent(params[k])));
    }
  }

  return newParams.join('&');
};
/**
 * Takes the message object, parses the dates, sets `__html`
 * and sets the status to `received` if missing; returns a new message object.
 *
 * @param {MessageResponse<StreamChatGenerics>} message `MessageResponse` object
 */

function formatMessage(message) {
  return _objectSpread$e(_objectSpread$e({}, message), {}, {
    /**
     * @deprecated please use `html`
     */
    __html: message.html,
    // parse the dates
    pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,
    created_at: message.created_at ? new Date(message.created_at) : new Date(),
    updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),
    deleted_at: message.deleted_at ? new Date(message.deleted_at) : null,
    status: message.status || 'received',
    reaction_groups: maybeGetReactionGroupsFallback(message.reaction_groups, message.reaction_counts, message.reaction_scores)
  });
}
var findIndexInSortedArray = function findIndexInSortedArray(_ref) {
  var needle = _ref.needle,
      sortedArray = _ref.sortedArray,
      selectKey = _ref.selectKey,
      _ref$selectValueToCom = _ref.selectValueToCompare,
      selectValueToCompare = _ref$selectValueToCom === void 0 ? function (e) {
    return e;
  } : _ref$selectValueToCom,
      _ref$sortDirection = _ref.sortDirection,
      sortDirection = _ref$sortDirection === void 0 ? 'ascending' : _ref$sortDirection;
  if (!sortedArray.length) return 0;
  var left = 0;
  var right = sortedArray.length - 1;
  var middle = 0;

  var recalculateMiddle = function recalculateMiddle() {
    middle = Math.round((left + right) / 2);
  };

  var comparableNeedle = selectValueToCompare(needle);

  while (left <= right) {
    recalculateMiddle();
    var comparableMiddle = selectValueToCompare(sortedArray[middle]);

    if (sortDirection === 'ascending' && comparableNeedle < comparableMiddle || sortDirection === 'descending' && comparableNeedle >= comparableMiddle) {
      right = middle - 1;
    } else {
      left = middle + 1;
    }
  } // In case there are several array elements with the same comparable value, search around the insertion
  // point to possibly find an element with the same key. If found, prefer it.
  // This, for example, prevents duplication of messages with the same creation date.


  if (selectKey) {
    var needleKey = selectKey(needle);
    var step = sortDirection === 'ascending' ? -1 : +1;

    for (var i = left + step; 0 <= i && i < sortedArray.length && selectValueToCompare(sortedArray[i]) === comparableNeedle; i += step) {
      if (selectKey(sortedArray[i]) === needleKey) {
        return i;
      }
    }
  }

  return left;
};
function addToMessageList(messages, newMessage) {
  var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'created_at';
  var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var addMessageToList = addIfDoesNotExist || timestampChanged;

  var newMessages = _toConsumableArray__default['default'](messages); // if created_at has changed, message should be filtered and re-inserted in correct order
  // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp


  if (timestampChanged) {
    newMessages = newMessages.filter(function (message) {
      return !(message.id && newMessage.id === message.id);
    });
  } // for empty list just concat and return unless it's an update or deletion


  if (newMessages.length === 0 && addMessageToList) {
    return newMessages.concat(newMessage);
  } else if (newMessages.length === 0) {
    return newMessages;
  } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


  var messageTime = newMessage[sortBy].getTime(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  var messageIsNewest = newMessages.at(-1)[sortBy].getTime() < messageTime; // if message is newer than last item in the list concat and return unless it's an update or deletion

  if (messageIsNewest && addMessageToList) {
    return newMessages.concat(newMessage);
  } else if (messageIsNewest) {
    return newMessages;
  } // find the closest index to push the new message


  var insertionIndex = findIndexInSortedArray({
    needle: newMessage,
    sortedArray: newMessages,
    sortDirection: 'ascending',
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    selectValueToCompare: function selectValueToCompare(m) {
      return m[sortBy].getTime();
    },
    selectKey: function selectKey(m) {
      return m.id;
    }
  }); // message already exists and not filtered with timestampChanged, update and return

  if (!timestampChanged && newMessage.id && newMessages[insertionIndex] && newMessage.id === newMessages[insertionIndex].id) {
    newMessages[insertionIndex] = newMessage;
    return newMessages;
  } // do not add updated or deleted messages to the list if they already exist or come with a timestamp change


  if (addMessageToList) {
    newMessages.splice(insertionIndex, 0, newMessage);
  }

  return newMessages;
}

function maybeGetReactionGroupsFallback(groups, counts, scores) {
  if (groups) {
    return groups;
  }

  if (counts && scores) {
    var fallback = {};

    for (var _i2 = 0, _Object$keys = Object.keys(counts); _i2 < _Object$keys.length; _i2++) {
      var type = _Object$keys[_i2];
      fallback[type] = {
        count: counts[type],
        sum_scores: scores[type]
      };
    }

    return fallback;
  }

  return null;
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


// works exactly the same as lodash.debounce
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var debounce = function debounce(fn) {
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref2$leading = _ref2.leading,
      leading = _ref2$leading === void 0 ? false : _ref2$leading,
      _ref2$trailing = _ref2.trailing,
      trailing = _ref2$trailing === void 0 ? true : _ref2$trailing;

  var runningTimeout = null;
  var argsForTrailingExecution = null;
  var lastResult;

  var debouncedFn = function debouncedFn() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (runningTimeout) {
      clearTimeout(runningTimeout);
    } else if (leading) {
      lastResult = fn.apply(void 0, args);
    }

    if (trailing) argsForTrailingExecution = args;

    var timeoutHandler = function timeoutHandler() {
      if (argsForTrailingExecution) {
        lastResult = fn.apply(void 0, _toConsumableArray__default['default'](argsForTrailingExecution));
        argsForTrailingExecution = null;
      }

      runningTimeout = null;
    };

    runningTimeout = setTimeout(timeoutHandler, timeout);
    return lastResult;
  };

  debouncedFn.cancel = function () {
    if (runningTimeout) clearTimeout(runningTimeout);
  };

  debouncedFn.flush = function () {
    if (runningTimeout) {
      clearTimeout(runningTimeout);
      runningTimeout = null;

      if (argsForTrailingExecution) {
        lastResult = fn.apply(void 0, _toConsumableArray__default['default'](argsForTrailingExecution));
      }
    }

    return lastResult;
  };

  return debouncedFn;
}; // works exactly the same as lodash.throttle

var throttle = function throttle(fn) {
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;

  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref3$leading = _ref3.leading,
      leading = _ref3$leading === void 0 ? true : _ref3$leading,
      _ref3$trailing = _ref3.trailing,
      trailing = _ref3$trailing === void 0 ? false : _ref3$trailing;

  var runningTimeout = null;
  var storedArgs = null;
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (runningTimeout) {
      if (trailing) storedArgs = args;
      return;
    }

    if (leading) fn.apply(void 0, args);

    var timeoutHandler = function timeoutHandler() {
      if (storedArgs) {
        fn.apply(void 0, _toConsumableArray__default['default'](storedArgs));
        storedArgs = null;
        runningTimeout = setTimeout(timeoutHandler, timeout);
        return;
      }

      runningTimeout = null;
    };

    runningTimeout = setTimeout(timeoutHandler, timeout);
  };
};

var get = function get(obj, path) {
  return path.split('.').reduce(function (acc, key) {
    if (acc && _typeof__default['default'](acc) === 'object' && key in acc) {
      return acc[key];
    }

    return undefined;
  }, obj);
}; // works exactly the same as lodash.uniqBy


var uniqBy = function uniqBy(array, iteratee) {
  if (!Array.isArray(array)) return [];
  var seen = new Set();
  return array.filter(function (item) {
    var key = typeof iteratee === 'function' ? iteratee(item) : get(item, iteratee);
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });
};
function binarySearchByDateEqualOrNearestGreater(array, targetDate) {
  var left = 0;
  var right = array.length - 1;

  while (left <= right) {
    var mid = Math.floor((left + right) / 2);
    var midCreatedAt = array[mid].created_at;

    if (!midCreatedAt) {
      left += 1;
      continue;
    }

    var midDate = new Date(midCreatedAt);

    if (midDate.getTime() === targetDate.getTime()) {
      return mid;
    } else if (midDate.getTime() < targetDate.getTime()) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }

  return left;
}

var messagePaginationCreatedAtAround = function messagePaginationCreatedAtAround(_ref4) {
  var parentSet = _ref4.parentSet,
      requestedPageSize = _ref4.requestedPageSize,
      returnedPage = _ref4.returnedPage,
      messagePaginationOptions = _ref4.messagePaginationOptions;

  var newPagination = _objectSpread$e({}, parentSet.pagination);

  if (!(messagePaginationOptions !== null && messagePaginationOptions !== void 0 && messagePaginationOptions.created_at_around)) return newPagination;
  var hasPrev;
  var hasNext;
  var updateHasPrev;
  var updateHasNext;
  var createdAtAroundDate = new Date(messagePaginationOptions.created_at_around);
  var _ref5 = [returnedPage[0], returnedPage.slice(-1)[0]],
      firstPageMsg = _ref5[0],
      lastPageMsg = _ref5[1]; // expect ASC order (from oldest to newest)

  var wholePageHasNewerMessages = !!(firstPageMsg !== null && firstPageMsg !== void 0 && firstPageMsg.created_at) && new Date(firstPageMsg.created_at) > createdAtAroundDate;
  var wholePageHasOlderMessages = !!(lastPageMsg !== null && lastPageMsg !== void 0 && lastPageMsg.created_at) && new Date(lastPageMsg.created_at) < createdAtAroundDate;
  var requestedPageSizeNotMet = requestedPageSize > parentSet.messages.length && requestedPageSize > returnedPage.length;
  var noMoreMessages = (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) && requestedPageSize > returnedPage.length;

  if (wholePageHasNewerMessages) {
    hasPrev = false;
    updateHasPrev = true;

    if (requestedPageSizeNotMet) {
      hasNext = false;
      updateHasNext = true;
    }
  } else if (wholePageHasOlderMessages) {
    hasNext = false;
    updateHasNext = true;

    if (requestedPageSizeNotMet) {
      hasPrev = false;
      updateHasPrev = true;
    }
  } else if (noMoreMessages) {
    hasNext = hasPrev = false;
    updateHasPrev = updateHasNext = true;
  } else {
    var _parentSet$messages$, _parentSet$messages$s;

    var firstPageMsgIsFirstInSet = (firstPageMsg === null || firstPageMsg === void 0 ? void 0 : firstPageMsg.id) && firstPageMsg.id === ((_parentSet$messages$ = parentSet.messages[0]) === null || _parentSet$messages$ === void 0 ? void 0 : _parentSet$messages$.id),
        lastPageMsgIsLastInSet = (lastPageMsg === null || lastPageMsg === void 0 ? void 0 : lastPageMsg.id) && lastPageMsg.id === ((_parentSet$messages$s = parentSet.messages.slice(-1)[0]) === null || _parentSet$messages$s === void 0 ? void 0 : _parentSet$messages$s.id);
    updateHasPrev = firstPageMsgIsFirstInSet;
    updateHasNext = lastPageMsgIsLastInSet;
    var midPointByCount = Math.floor(returnedPage.length / 2);
    var midPointByCreationDate = binarySearchByDateEqualOrNearestGreater(returnedPage, createdAtAroundDate);

    if (midPointByCreationDate !== -1) {
      hasPrev = midPointByCount <= midPointByCreationDate;
      hasNext = midPointByCount >= midPointByCreationDate;
    }
  }

  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;
  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;
  return newPagination;
};

var messagePaginationIdAround = function messagePaginationIdAround(_ref6) {
  var _parentSet$messages$2, _parentSet$messages$s2;

  var parentSet = _ref6.parentSet,
      requestedPageSize = _ref6.requestedPageSize,
      returnedPage = _ref6.returnedPage,
      messagePaginationOptions = _ref6.messagePaginationOptions;

  var newPagination = _objectSpread$e({}, parentSet.pagination);

  var _ref7 = messagePaginationOptions || {},
      id_around = _ref7.id_around;

  if (!id_around) return newPagination;
  var hasPrev;
  var hasNext;
  var _ref8 = [returnedPage[0], returnedPage.slice(-1)[0]],
      firstPageMsg = _ref8[0],
      lastPageMsg = _ref8[1];
  var firstPageMsgIsFirstInSet = (firstPageMsg === null || firstPageMsg === void 0 ? void 0 : firstPageMsg.id) === ((_parentSet$messages$2 = parentSet.messages[0]) === null || _parentSet$messages$2 === void 0 ? void 0 : _parentSet$messages$2.id),
      lastPageMsgIsLastInSet = (lastPageMsg === null || lastPageMsg === void 0 ? void 0 : lastPageMsg.id) === ((_parentSet$messages$s2 = parentSet.messages.slice(-1)[0]) === null || _parentSet$messages$s2 === void 0 ? void 0 : _parentSet$messages$s2.id);
  var updateHasPrev = firstPageMsgIsFirstInSet;
  var updateHasNext = lastPageMsgIsLastInSet;
  var midPoint = Math.floor(returnedPage.length / 2);
  var noMoreMessages = (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) && requestedPageSize > returnedPage.length;

  if (noMoreMessages) {
    hasNext = hasPrev = false;
    updateHasPrev = updateHasNext = true;
  } else if (!returnedPage[midPoint]) {
    return newPagination;
  } else if (returnedPage[midPoint].id === id_around) {
    hasPrev = hasNext = true;
  } else {
    var targetMsg;
    var halves = [returnedPage.slice(0, midPoint), returnedPage.slice(midPoint)];
    hasPrev = hasNext = true;

    for (var i = 0; i < halves.length; i++) {
      targetMsg = halves[i].find(function (message) {
        return message.id === id_around;
      });

      if (targetMsg && i === 0) {
        hasPrev = false;
      }

      if (targetMsg && i === 1) {
        hasNext = false;
      }
    }
  }

  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;
  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;
  return newPagination;
};

var messagePaginationLinear = function messagePaginationLinear(_ref9) {
  var _parentSet$messages$3, _parentSet$messages$s3;

  var parentSet = _ref9.parentSet,
      requestedPageSize = _ref9.requestedPageSize,
      returnedPage = _ref9.returnedPage,
      messagePaginationOptions = _ref9.messagePaginationOptions;

  var newPagination = _objectSpread$e({}, parentSet.pagination);

  var hasPrev;
  var hasNext;
  var _ref10 = [returnedPage[0], returnedPage.slice(-1)[0]],
      firstPageMsg = _ref10[0],
      lastPageMsg = _ref10[1];
  var firstPageMsgIsFirstInSet = (firstPageMsg === null || firstPageMsg === void 0 ? void 0 : firstPageMsg.id) && firstPageMsg.id === ((_parentSet$messages$3 = parentSet.messages[0]) === null || _parentSet$messages$3 === void 0 ? void 0 : _parentSet$messages$3.id),
      lastPageMsgIsLastInSet = (lastPageMsg === null || lastPageMsg === void 0 ? void 0 : lastPageMsg.id) && lastPageMsg.id === ((_parentSet$messages$s3 = parentSet.messages.slice(-1)[0]) === null || _parentSet$messages$s3 === void 0 ? void 0 : _parentSet$messages$s3.id);
  var queriedNextMessages = messagePaginationOptions && (messagePaginationOptions.created_at_after_or_equal || messagePaginationOptions.created_at_after || messagePaginationOptions.id_gt || messagePaginationOptions.id_gte);
  var queriedPrevMessages = typeof messagePaginationOptions === 'undefined' ? true : messagePaginationOptions.created_at_before_or_equal || messagePaginationOptions.created_at_before || messagePaginationOptions.id_lt || messagePaginationOptions.id_lte || messagePaginationOptions.offset;
  var containsUnrecognizedOptionsOnly = !queriedNextMessages && !queriedPrevMessages && !(messagePaginationOptions !== null && messagePaginationOptions !== void 0 && messagePaginationOptions.id_around) && !(messagePaginationOptions !== null && messagePaginationOptions !== void 0 && messagePaginationOptions.created_at_around);
  var hasMore = returnedPage.length >= requestedPageSize;

  if (typeof queriedPrevMessages !== 'undefined' || containsUnrecognizedOptionsOnly) {
    hasPrev = hasMore;
  }

  if (typeof queriedNextMessages !== 'undefined') {
    hasNext = hasMore;
  }

  var returnedPageIsEmpty = returnedPage.length === 0;
  if ((firstPageMsgIsFirstInSet || returnedPageIsEmpty) && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;
  if ((lastPageMsgIsLastInSet || returnedPageIsEmpty) && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;
  return newPagination;
};

var messageSetPagination = function messageSetPagination(params) {
  var _params$messagePagina, _params$messagePagina2;

  if (params.parentSet.messages.length < params.returnedPage.length) {
    var _params$logger;

    (_params$logger = params.logger) === null || _params$logger === void 0 ? void 0 : _params$logger.call(params, 'error', 'Corrupted message set state: parent set size < returned page size');
    return params.parentSet.pagination;
  }

  if ((_params$messagePagina = params.messagePaginationOptions) !== null && _params$messagePagina !== void 0 && _params$messagePagina.created_at_around) {
    return messagePaginationCreatedAtAround(params);
  } else if ((_params$messagePagina2 = params.messagePaginationOptions) !== null && _params$messagePagina2 !== void 0 && _params$messagePagina2.id_around) {
    return messagePaginationIdAround(params);
  } else {
    return messagePaginationLinear(params);
  }
};
/**
 * A utility object used to prevent duplicate invocation of channel.watch() to be triggered when
 * 'notification.message_new' and 'notification.added_to_channel' events arrive at the same time.
 */

var WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};

/**
 * Calls channel.watch() if it was not already recently called. Waits for watch promise to resolve even if it was invoked previously.
 * If the channel is not passed as a property, it will get it either by its channel.cid or by its members list and do the same.
 * @param client
 * @param members
 * @param options
 * @param type
 * @param id
 * @param channel
 */
var getAndWatchChannel = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(_ref11) {
    var channel, client, id, members, options, type, channelToWatch, originalCid, queryPromise;
    return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            channel = _ref11.channel, client = _ref11.client, id = _ref11.id, members = _ref11.members, options = _ref11.options, type = _ref11.type;

            if (!(!channel && !type)) {
              _context.next = 3;
              break;
            }

            throw new Error('Channel or channel type have to be provided to query a channel.');

          case 3:
            // unfortunately typescript is not able to infer that if (!channel && !type) === false, then channel or type has to be truthy
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            channelToWatch = channel || client.channel(type, id, {
              members: members
            }); // need to keep as with call to channel.watch the id can be changed from undefined to an actual ID generated server-side

            originalCid = channelToWatch.id ? channelToWatch.cid : members && members.length ? generateChannelTempCid(channelToWatch.type, members) : undefined;

            if (originalCid) {
              _context.next = 7;
              break;
            }

            throw new Error('Channel ID or channel members array have to be provided to query a channel.');

          case 7:
            queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];

            if (!queryPromise) {
              _context.next = 13;
              break;
            }

            _context.next = 11;
            return queryPromise;

          case 11:
            _context.next = 20;
            break;

          case 13:
            _context.prev = 13;
            WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = channelToWatch.watch(options);
            _context.next = 17;
            return WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];

          case 17:
            _context.prev = 17;
            delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
            return _context.finish(17);

          case 20:
            return _context.abrupt("return", channelToWatch);

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[13,, 17, 20]]);
  }));

  return function getAndWatchChannel(_x) {
    return _ref12.apply(this, arguments);
  };
}();
/**
 * Generates a temporary channel.cid for channels created without ID, as they need to be referenced
 * by an identifier until the back-end generates the final ID. The cid is generated by its member IDs
 * which are sorted and can be recreated the same every time given the same arguments.
 * @param channelType
 * @param members
 */

var generateChannelTempCid = function generateChannelTempCid(channelType, members) {
  if (!members) return;

  var membersStr = _toConsumableArray__default['default'](members).sort().join(',');

  if (!membersStr) return;
  return "".concat(channelType, ":!members-").concat(membersStr);
};
/**
 * Checks if a channel is pinned or not. Will return true only if channel.state.membership.pinned_at exists.
 * @param channel
 */

var isChannelPinned = function isChannelPinned(channel) {
  if (!channel) return false;
  var member = channel.state.membership;
  return !!(member !== null && member !== void 0 && member.pinned_at);
};
/**
 * Checks if a channel is archived or not. Will return true only if channel.state.membership.archived_at exists.
 * @param channel
 */

var isChannelArchived = function isChannelArchived(channel) {
  if (!channel) return false;
  var member = channel.state.membership;
  return !!(member !== null && member !== void 0 && member.archived_at);
};
/**
 * A utility that tells us whether we should consider archived channels or not based
 * on filters. Will return true only if filters.archived exists and is a boolean value.
 * @param filters
 */

var shouldConsiderArchivedChannels = function shouldConsiderArchivedChannels(filters) {
  if (!filters) return false;
  return typeof filters.archived === 'boolean';
};
/**
 * Extracts the value of the sort parameter at a given index, for a targeted key. Can
 * handle both array and object versions of sort. Will return null if the index/key
 * combination does not exist.
 * @param atIndex - the index at which we'll examine the sort value, if it's an array one
 * @param sort - the sort value - both array and object notations are accepted
 * @param targetKey - the target key which needs to exist for the sort at a certain index
 */

var extractSortValue = function extractSortValue(_ref13) {
  var _option$targetKey, _option;

  var atIndex = _ref13.atIndex,
      sort = _ref13.sort,
      targetKey = _ref13.targetKey;
  if (!sort) return null;
  var option = null;

  if (Array.isArray(sort)) {
    var _sort$atIndex;

    option = (_sort$atIndex = sort[atIndex]) !== null && _sort$atIndex !== void 0 ? _sort$atIndex : null;
  } else {
    var index = 0;

    for (var _key3 in sort) {
      if (index !== atIndex) {
        index++;
        continue;
      }

      if (_key3 !== targetKey) {
        return null;
      }

      option = sort;
      break;
    }
  }

  return (_option$targetKey = (_option = option) === null || _option === void 0 ? void 0 : _option[targetKey]) !== null && _option$targetKey !== void 0 ? _option$targetKey : null;
};
/**
 * Returns true only if `{ pinned_at: -1 }` or `{ pinned_at: 1 }` option is first within the `sort` array.
 */

var shouldConsiderPinnedChannels = function shouldConsiderPinnedChannels(sort) {
  var value = findPinnedAtSortOrder({
    sort: sort
  });
  if (typeof value !== 'number') return false;
  return Math.abs(value) === 1;
};
/**
 * Checks whether the sort value of type object contains a pinned_at value or if
 * an array sort value type has the first value be an object containing pinned_at.
 * @param sort
 */

var findPinnedAtSortOrder = function findPinnedAtSortOrder(_ref14) {
  var sort = _ref14.sort;
  return extractSortValue({
    atIndex: 0,
    sort: sort,
    targetKey: 'pinned_at'
  });
};
/**
 * Finds the index of the last consecutively pinned channel, starting from the start of the
 * array. Will not consider any pinned channels after the contiguous subsequence at the
 * start of the array.
 * @param channels
 */

var findLastPinnedChannelIndex = function findLastPinnedChannelIndex(_ref15) {
  var channels = _ref15.channels;
  var lastPinnedChannelIndex = null;

  var _iterator2 = _createForOfIteratorHelper$5(channels),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var channel = _step2.value;
      if (!isChannelPinned(channel)) break;

      if (typeof lastPinnedChannelIndex === 'number') {
        lastPinnedChannelIndex++;
      } else {
        lastPinnedChannelIndex = 0;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return lastPinnedChannelIndex;
};
/**
 * A utility used to move a channel towards the beginning of a list of channels (promote it to a higher position). It
 * considers pinned channels in the process if needed and makes sure to only update the list reference if the list
 * should actually change. It will try to move the channel as high as it can within the list.
 * @param channels - the list of channels we want to modify
 * @param channelToMove - the channel we want to promote
 * @param channelToMoveIndexWithinChannels - optionally, the index of the channel we want to move if we know it (will skip a manual check)
 * @param sort - the sort value used to check for pinned channels
 */

var promoteChannel = function promoteChannel(_ref16) {
  var channels = _ref16.channels,
      channelToMove = _ref16.channelToMove,
      channelToMoveIndexWithinChannels = _ref16.channelToMoveIndexWithinChannels,
      sort = _ref16.sort;
  // get index of channel to move up
  var targetChannelIndex = channelToMoveIndexWithinChannels !== null && channelToMoveIndexWithinChannels !== void 0 ? channelToMoveIndexWithinChannels : channels.findIndex(function (channel) {
    return channel.cid === channelToMove.cid;
  });
  var targetChannelExistsWithinList = targetChannelIndex >= 0;
  var targetChannelAlreadyAtTheTop = targetChannelIndex === 0; // pinned channels should not move within the list based on recent activity, channels which
  // receive messages and are not pinned should move upwards but only under the last pinned channel
  // in the list

  var considerPinnedChannels = shouldConsiderPinnedChannels(sort);
  var isTargetChannelPinned = isChannelPinned(channelToMove);

  if (targetChannelAlreadyAtTheTop || considerPinnedChannels && isTargetChannelPinned) {
    return channels;
  }

  var newChannels = _toConsumableArray__default['default'](channels); // target channel index is known, remove it from the list


  if (targetChannelExistsWithinList) {
    newChannels.splice(targetChannelIndex, 1);
  } // as position of pinned channels has to stay unchanged, we need to
  // find last pinned channel in the list to move the target channel after


  var lastPinnedChannelIndex = null;

  if (considerPinnedChannels) {
    lastPinnedChannelIndex = findLastPinnedChannelIndex({
      channels: newChannels
    });
  } // re-insert it at the new place (to specific index if pinned channels are considered)


  newChannels.splice(typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0, 0, channelToMove);
  return newChannels;
};

var DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE = 25;
var DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE = 100;
var DEFAULT_MESSAGE_SET_PAGINATION = {
  hasNext: false,
  hasPrev: false
};

function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$d(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * ChannelState - A container class for the channel state.
 */
var ChannelState = /*#__PURE__*/function () {
  /**
   * Flag which indicates if channel state contain latest/recent messages or no.
   * This flag should be managed by UI sdks using a setter - setIsUpToDate.
   * When false, any new message (received by websocket event - message.new) will not
   * be pushed on to message list.
   */

  /**
   * Disjoint lists of messages
   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages
   * The state manages these lists and merges them when lists overlap
   * The messages array contains the currently active set
   */
  function ChannelState(channel) {
    var _this = this,
        _channel$state;

    _classCallCheck__default['default'](this, ChannelState);

    _defineProperty__default['default'](this, "_channel", void 0);

    _defineProperty__default['default'](this, "watcher_count", void 0);

    _defineProperty__default['default'](this, "typing", void 0);

    _defineProperty__default['default'](this, "read", void 0);

    _defineProperty__default['default'](this, "pinnedMessages", void 0);

    _defineProperty__default['default'](this, "pending_messages", void 0);

    _defineProperty__default['default'](this, "threads", void 0);

    _defineProperty__default['default'](this, "mutedUsers", void 0);

    _defineProperty__default['default'](this, "watchers", void 0);

    _defineProperty__default['default'](this, "members", void 0);

    _defineProperty__default['default'](this, "unreadCount", void 0);

    _defineProperty__default['default'](this, "membership", void 0);

    _defineProperty__default['default'](this, "last_message_at", void 0);

    _defineProperty__default['default'](this, "isUpToDate", void 0);

    _defineProperty__default['default'](this, "messageSets", []);

    _defineProperty__default['default'](this, "formatMessage", function (message) {
      return formatMessage(message);
    });

    _defineProperty__default['default'](this, "setIsUpToDate", function (isUpToDate) {
      _this.isUpToDate = isUpToDate;
    });

    _defineProperty__default['default'](this, "removeMessageFromArray", function (msgArray, msg) {
      var result = msgArray.filter(function (message) {
        return !(!!message.id && !!msg.id && message.id === msg.id);
      });
      return {
        removed: result.length < msgArray.length,
        result: result
      };
    });

    _defineProperty__default['default'](this, "updateUserMessages", function (user) {
      var _updateUserMessages = function _updateUserMessages(messages, user) {
        for (var i = 0; i < messages.length; i++) {
          var _m$user;

          var m = messages[i];

          if (((_m$user = m.user) === null || _m$user === void 0 ? void 0 : _m$user.id) === user.id) {
            messages[i] = _objectSpread$d(_objectSpread$d({}, m), {}, {
              user: user
            });
          }
        }
      };

      _this.messageSets.forEach(function (set) {
        return _updateUserMessages(set.messages, user);
      });

      for (var parentId in _this.threads) {
        _updateUserMessages(_this.threads[parentId], user);
      }

      _updateUserMessages(_this.pinnedMessages, user);
    });

    _defineProperty__default['default'](this, "deleteUserMessages", function (user) {
      var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var _deleteUserMessages = function _deleteUserMessages(messages, user) {
        var hardDelete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        for (var i = 0; i < messages.length; i++) {
          var _m$user2;

          var m = messages[i];

          if (((_m$user2 = m.user) === null || _m$user2 === void 0 ? void 0 : _m$user2.id) !== user.id) {
            continue;
          }

          if (hardDelete) {
            /**
             * In case of hard delete, we need to strip down all text, html,
             * attachments and all the custom properties on message
             */
            messages[i] = {
              cid: m.cid,
              created_at: m.created_at,
              deleted_at: user.deleted_at,
              id: m.id,
              latest_reactions: [],
              mentioned_users: [],
              own_reactions: [],
              parent_id: m.parent_id,
              reply_count: m.reply_count,
              status: m.status,
              thread_participants: m.thread_participants,
              type: 'deleted',
              updated_at: m.updated_at,
              user: m.user
            };
          } else {
            messages[i] = _objectSpread$d(_objectSpread$d({}, m), {}, {
              type: 'deleted',
              deleted_at: user.deleted_at ? new Date(user.deleted_at) : null
            });
          }
        }
      };

      _this.messageSets.forEach(function (set) {
        return _deleteUserMessages(set.messages, user, hardDelete);
      });

      for (var parentId in _this.threads) {
        _deleteUserMessages(_this.threads[parentId], user, hardDelete);
      }

      _deleteUserMessages(_this.pinnedMessages, user, hardDelete);
    });

    this._channel = channel;
    this.watcher_count = 0;
    this.typing = {};
    this.read = {};
    this.initMessages();
    this.pinnedMessages = [];
    this.pending_messages = [];
    this.threads = {}; // a list of users to hide messages from

    this.mutedUsers = [];
    this.watchers = {};
    this.members = {};
    this.membership = {};
    this.unreadCount = 0;
    /**
     * Flag which indicates if channel state contain latest/recent messages or no.
     * This flag should be managed by UI sdks using a setter - setIsUpToDate.
     * When false, any new message (received by websocket event - message.new) will not
     * be pushed on to message list.
     */

    this.isUpToDate = true;
    this.last_message_at = (channel === null || channel === void 0 ? void 0 : (_channel$state = channel.state) === null || _channel$state === void 0 ? void 0 : _channel$state.last_message_at) != null ? new Date(channel.state.last_message_at) : null;
  }

  _createClass__default['default'](ChannelState, [{
    key: "messages",
    get: function get() {
      var _this$messageSets$fin;

      return ((_this$messageSets$fin = this.messageSets.find(function (s) {
        return s.isCurrent;
      })) === null || _this$messageSets$fin === void 0 ? void 0 : _this$messageSets$fin.messages) || [];
    },
    set: function set(messages) {
      var index = this.messageSets.findIndex(function (s) {
        return s.isCurrent;
      });
      this.messageSets[index].messages = messages;
    }
    /**
     * The list of latest messages
     * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)
     */

  }, {
    key: "latestMessages",
    get: function get() {
      var _this$messageSets$fin2;

      return ((_this$messageSets$fin2 = this.messageSets.find(function (s) {
        return s.isLatest;
      })) === null || _this$messageSets$fin2 === void 0 ? void 0 : _this$messageSets$fin2.messages) || [];
    },
    set: function set(messages) {
      var index = this.messageSets.findIndex(function (s) {
        return s.isLatest;
      });
      this.messageSets[index].messages = messages;
    }
  }, {
    key: "messagePagination",
    get: function get() {
      var _this$messageSets$fin3;

      return ((_this$messageSets$fin3 = this.messageSets.find(function (s) {
        return s.isCurrent;
      })) === null || _this$messageSets$fin3 === void 0 ? void 0 : _this$messageSets$fin3.pagination) || DEFAULT_MESSAGE_SET_PAGINATION;
    }
    /**
     * addMessageSorted - Add a message to the state
     *
     * @param {MessageResponse<StreamChatGenerics>} newMessage A new message
     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.
     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
     * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)
     */

  }, {
    key: "addMessageSorted",
    value: function addMessageSorted(newMessage) {
      var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var addIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'latest';
      return this.addMessagesSorted([newMessage], timestampChanged, false, addIfDoesNotExist, messageSetToAddToIfDoesNotExist);
    }
    /**
     * Takes the message object, parses the dates, sets `__html`
     * and sets the status to `received` if missing; returns a new message object.
     *
     * @param {MessageResponse<StreamChatGenerics>} message `MessageResponse` object
     */

  }, {
    key: "addMessagesSorted",
    value:
    /**
     * addMessagesSorted - Add the list of messages to state and resorts the messages
     *
     * @param {Array<MessageResponse<StreamChatGenerics>>} newMessages A list of messages
     * @param {boolean} timestampChanged Whether updating messages with changed created_at value.
     * @param {boolean} initializing Whether channel is being initialized.
     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
     * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)
     *
     */
    function addMessagesSorted(newMessages) {
      var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var initializing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var addIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'current';

      var _this$findTargetMessa = this.findTargetMessageSet(newMessages, addIfDoesNotExist, messageSetToAddToIfDoesNotExist),
          messagesToAdd = _this$findTargetMessa.messagesToAdd,
          targetMessageSetIndex = _this$findTargetMessa.targetMessageSetIndex;

      for (var i = 0; i < messagesToAdd.length; i += 1) {
        var isFromShadowBannedUser = messagesToAdd[i].shadowed;

        if (isFromShadowBannedUser) {
          continue;
        } // If message is already formatted we can skip the tasks below
        // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets
        // This will be also true for message previews used by some SDKs


        var isMessageFormatted = messagesToAdd[i].created_at instanceof Date;
        var message = void 0;

        if (isMessageFormatted) {
          message = messagesToAdd[i];
        } else {
          var _this$_channel;

          message = this.formatMessage(messagesToAdd[i]);

          if (message.user && (_this$_channel = this._channel) !== null && _this$_channel !== void 0 && _this$_channel.cid) {
            /**
             * Store the reference to user for this channel, so that when we have to
             * handle updates to user, we can use the reference map, to determine which
             * channels need to be updated with updated user object.
             */
            this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);
          }

          if (initializing && message.id && this.threads[message.id]) {
            // If we are initializing the state of channel (e.g., in case of connection recovery),
            // then in that case we remove thread related to this message from threads object.
            // This way we can ensure that we don't have any stale data in thread object
            // and consumer can refetch the replies.
            delete this.threads[message.id];
          }

          if (!this.last_message_at) {
            this.last_message_at = new Date(message.created_at.getTime());
          }

          if (message.created_at.getTime() > this.last_message_at.getTime()) {
            this.last_message_at = new Date(message.created_at.getTime());
          }
        } // update or append the messages...


        var parentID = message.parent_id; // add to the given message set

        if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {
          this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(this.messageSets[targetMessageSetIndex].messages, message, timestampChanged, 'created_at', addIfDoesNotExist);
        }
        /**
         * Add message to thread if applicable and the message
         * was added when querying for replies, or the thread already exits.
         * This is to prevent the thread state from getting out of sync if
         * a thread message is shown in channel but older than the newest thread
         * message. This situation can result in a thread state where a random
         * message is "oldest" message, and newer messages are therefore not loaded.
         * This can also occur if an old thread message is updated.
         */


        if (parentID && !initializing) {
          var thread = this.threads[parentID] || [];
          this.threads[parentID] = this._addToMessageList(thread, message, timestampChanged, 'created_at', addIfDoesNotExist);
        }
      }

      return {
        messageSet: this.messageSets[targetMessageSetIndex]
      };
    }
    /**
     * addPinnedMessages - adds messages in pinnedMessages property
     *
     * @param {Array<MessageResponse<StreamChatGenerics>>} pinnedMessages A list of pinned messages
     *
     */

  }, {
    key: "addPinnedMessages",
    value: function addPinnedMessages(pinnedMessages) {
      for (var i = 0; i < pinnedMessages.length; i += 1) {
        this.addPinnedMessage(pinnedMessages[i]);
      }
    }
    /**
     * addPinnedMessage - adds message in pinnedMessages
     *
     * @param {MessageResponse<StreamChatGenerics>} pinnedMessage message to update
     *
     */

  }, {
    key: "addPinnedMessage",
    value: function addPinnedMessage(pinnedMessage) {
      this.pinnedMessages = this._addToMessageList(this.pinnedMessages, this.formatMessage(pinnedMessage), false, 'pinned_at');
    }
    /**
     * removePinnedMessage - removes pinned message from pinnedMessages
     *
     * @param {MessageResponse<StreamChatGenerics>} message message to remove
     *
     */

  }, {
    key: "removePinnedMessage",
    value: function removePinnedMessage(message) {
      var _this$removeMessageFr = this.removeMessageFromArray(this.pinnedMessages, message),
          result = _this$removeMessageFr.result;

      this.pinnedMessages = result;
    }
  }, {
    key: "addReaction",
    value: function addReaction(reaction, message, enforce_unique) {
      var _this2 = this;

      if (!message) return;
      var messageWithReaction = message;

      this._updateMessage(message, function (msg) {
        messageWithReaction.own_reactions = _this2._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);
        return _this2.formatMessage(messageWithReaction);
      });

      return messageWithReaction;
    }
  }, {
    key: "_addOwnReactionToMessage",
    value: function _addOwnReactionToMessage(ownReactions, reaction, enforce_unique) {
      if (enforce_unique) {
        ownReactions = [];
      } else {
        ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);
      }

      ownReactions = ownReactions || [];

      if (this._channel.getClient().userID === reaction.user_id) {
        ownReactions.push(reaction);
      }

      return ownReactions;
    }
  }, {
    key: "_removeOwnReactionFromMessage",
    value: function _removeOwnReactionFromMessage(ownReactions, reaction) {
      if (ownReactions) {
        return ownReactions.filter(function (item) {
          return item.user_id !== reaction.user_id || item.type !== reaction.type;
        });
      }

      return ownReactions;
    }
  }, {
    key: "removeReaction",
    value: function removeReaction(reaction, message) {
      var _this3 = this;

      if (!message) return;
      var messageWithReaction = message;

      this._updateMessage(message, function (msg) {
        messageWithReaction.own_reactions = _this3._removeOwnReactionFromMessage(msg.own_reactions, reaction);
        return _this3.formatMessage(messageWithReaction);
      });

      return messageWithReaction;
    }
  }, {
    key: "_updateQuotedMessageReferences",
    value: function _updateQuotedMessageReferences(_ref) {
      var _this4 = this;

      var message = _ref.message,
          remove = _ref.remove;

      var parseMessage = function parseMessage(m) {
        var _m$pinned_at, _m$updated_at;

        return _objectSpread$d(_objectSpread$d({}, m), {}, {
          created_at: m.created_at.toISOString(),
          pinned_at: (_m$pinned_at = m.pinned_at) === null || _m$pinned_at === void 0 ? void 0 : _m$pinned_at.toISOString(),
          updated_at: (_m$updated_at = m.updated_at) === null || _m$updated_at === void 0 ? void 0 : _m$updated_at.toISOString()
        });
      };

      var update = function update(messages) {
        var updatedMessages = messages.reduce(function (acc, msg) {
          if (msg.quoted_message_id === message.id) {
            acc.push(_objectSpread$d(_objectSpread$d({}, parseMessage(msg)), {}, {
              quoted_message: remove ? _objectSpread$d(_objectSpread$d({}, message), {}, {
                attachments: []
              }) : message
            }));
          }

          return acc;
        }, []);

        _this4.addMessagesSorted(updatedMessages, true);
      };

      if (!message.parent_id) {
        this.messageSets.forEach(function (set) {
          return update(set.messages);
        });
      } else if (message.parent_id && this.threads[message.parent_id]) {
        // prevent going through all the threads even though it is possible to quote a message from another thread
        update(this.threads[message.parent_id]);
      }
    }
  }, {
    key: "removeQuotedMessageReferences",
    value: function removeQuotedMessageReferences(message) {
      this._updateQuotedMessageReferences({
        message: message,
        remove: true
      });
    }
    /**
     * Updates all instances of given message in channel state
     * @param message
     * @param updateFunc
     */

  }, {
    key: "_updateMessage",
    value: function _updateMessage(message, updateFunc) {
      var parent_id = message.parent_id,
          show_in_channel = message.show_in_channel,
          pinned = message.pinned;

      if (parent_id && this.threads[parent_id]) {
        var thread = this.threads[parent_id];
        var msgIndex = thread.findIndex(function (msg) {
          return msg.id === message.id;
        });

        if (msgIndex !== -1) {
          thread[msgIndex] = updateFunc(thread[msgIndex]);
          this.threads[parent_id] = thread;
        }
      }

      if (!show_in_channel && !parent_id || show_in_channel) {
        var messageSetIndex = this.findMessageSetIndex(message);

        if (messageSetIndex !== -1) {
          var _msgIndex = this.messageSets[messageSetIndex].messages.findIndex(function (msg) {
            return msg.id === message.id;
          });

          if (_msgIndex !== -1) {
            this.messageSets[messageSetIndex].messages[_msgIndex] = updateFunc(this.messageSets[messageSetIndex].messages[_msgIndex]);
          }
        }
      }

      if (pinned) {
        var _msgIndex2 = this.pinnedMessages.findIndex(function (msg) {
          return msg.id === message.id;
        });

        if (_msgIndex2 !== -1) {
          this.pinnedMessages[_msgIndex2] = updateFunc(this.pinnedMessages[_msgIndex2]);
        }
      }
    }
    /**
     * Setter for isUpToDate.
     *
     * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.
     *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.
     *                    When false, any new message (received by websocket event - message.new) will not
     *                    be pushed on to message list.
     */

  }, {
    key: "_addToMessageList",
    value:
    /**
     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found
     *
     * @param {Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>} messages A list of messages
     * @param message
     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.
     * @param {string} sortBy field name to use to sort the messages by
     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.
     */
    function _addToMessageList(messages, message) {
      var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'created_at';
      var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
      return addToMessageList(messages, message, timestampChanged, sortBy, addIfDoesNotExist);
    }
    /**
     * removeMessage - Description
     *
     * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.
     *
     * @return {boolean} Returns if the message was removed
     */

  }, {
    key: "removeMessage",
    value: function removeMessage(messageToRemove) {
      var isRemoved = false;

      if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {
        var _this$removeMessageFr2 = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove),
            removed = _this$removeMessageFr2.removed,
            threadMessages = _this$removeMessageFr2.result;

        this.threads[messageToRemove.parent_id] = threadMessages;
        isRemoved = removed;
      } else {
        var _messageToRemove$mess;

        var messageSetIndex = (_messageToRemove$mess = messageToRemove.messageSetIndex) !== null && _messageToRemove$mess !== void 0 ? _messageToRemove$mess : this.findMessageSetIndex(messageToRemove);

        if (messageSetIndex !== -1) {
          var _this$removeMessageFr3 = this.removeMessageFromArray(this.messageSets[messageSetIndex].messages, messageToRemove),
              _removed = _this$removeMessageFr3.removed,
              messages = _this$removeMessageFr3.result;

          this.messageSets[messageSetIndex].messages = messages;
          isRemoved = _removed;
        }
      }

      return isRemoved;
    }
  }, {
    key: "filterErrorMessages",
    value:
    /**
     * filterErrorMessages - Removes error messages from the channel state.
     *
     */
    function filterErrorMessages() {
      var filteredMessages = this.latestMessages.filter(function (message) {
        return message.type !== 'error';
      });
      this.latestMessages = filteredMessages;
    }
    /**
     * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds
     */

  }, {
    key: "clean",
    value: function clean() {
      var now = new Date(); // prevent old users from showing up as typing

      for (var _i = 0, _Object$entries = Object.entries(this.typing); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray__default['default'](_Object$entries[_i], 2),
            userID = _Object$entries$_i[0],
            lastEvent = _Object$entries$_i[1];

        var receivedAt = typeof lastEvent.received_at === 'string' ? new Date(lastEvent.received_at) : lastEvent.received_at || new Date();

        if (now.getTime() - receivedAt.getTime() > 7000) {
          delete this.typing[userID];

          this._channel.getClient().dispatchEvent({
            cid: this._channel.cid,
            type: 'typing.stop',
            user: {
              id: userID
            }
          });
        }
      }
    }
  }, {
    key: "clearMessages",
    value: function clearMessages() {
      this.initMessages();
      this.pinnedMessages = [];
    }
  }, {
    key: "initMessages",
    value: function initMessages() {
      this.messageSets = [{
        messages: [],
        isLatest: true,
        isCurrent: true,
        pagination: DEFAULT_MESSAGE_SET_PAGINATION
      }];
    }
    /**
     * loadMessageIntoState - Loads a given message (and messages around it) into the state
     *
     * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages
     * @param {string} parentMessageId The id of the parent message, if we want load a thread reply
     * @param {number} limit The page size if the message has to be queried from the server
     */

  }, {
    key: "loadMessageIntoState",
    value: function () {
      var _loadMessageIntoState = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(messageId, parentMessageId) {
        var _this$threads$parentM;

        var limit,
            messageSetIndex,
            switchedToMessageSet,
            loadedMessageThread,
            messageIdToFind,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                limit = _args.length > 2 && _args[2] !== undefined ? _args[2] : 25;
                switchedToMessageSet = false;
                loadedMessageThread = false;
                messageIdToFind = parentMessageId || messageId;

                if (!(messageId === 'latest')) {
                  _context.next = 10;
                  break;
                }

                if (!(this.messages === this.latestMessages)) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return");

              case 7:
                messageSetIndex = this.messageSets.findIndex(function (s) {
                  return s.isLatest;
                });
                _context.next = 11;
                break;

              case 10:
                messageSetIndex = this.findMessageSetIndex({
                  id: messageIdToFind
                });

              case 11:
                if (messageSetIndex !== -1) {
                  this.switchToMessageSet(messageSetIndex);
                  switchedToMessageSet = true;
                }

                loadedMessageThread = !parentMessageId || !!((_this$threads$parentM = this.threads[parentMessageId]) !== null && _this$threads$parentM !== void 0 && _this$threads$parentM.find(function (m) {
                  return m.id === messageId;
                }));

                if (!(switchedToMessageSet && loadedMessageThread)) {
                  _context.next = 15;
                  break;
                }

                return _context.abrupt("return");

              case 15:
                if (switchedToMessageSet) {
                  _context.next = 18;
                  break;
                }

                _context.next = 18;
                return this._channel.query({
                  messages: {
                    id_around: messageIdToFind,
                    limit: limit
                  }
                }, 'new');

              case 18:
                if (!(!loadedMessageThread && parentMessageId)) {
                  _context.next = 21;
                  break;
                }

                _context.next = 21;
                return this._channel.getReplies(parentMessageId, {
                  id_around: messageId,
                  limit: limit
                });

              case 21:
                messageSetIndex = this.findMessageSetIndex({
                  id: messageIdToFind
                });

                if (messageSetIndex !== -1) {
                  this.switchToMessageSet(messageSetIndex);
                }

              case 23:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadMessageIntoState(_x, _x2) {
        return _loadMessageIntoState.apply(this, arguments);
      }

      return loadMessageIntoState;
    }()
    /**
     * findMessage - Finds a message inside the state
     *
     * @param {string} messageId The id of the message
     * @param {string} parentMessageId The id of the parent message, if we want load a thread reply
     *
     * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>} Returns the message, or undefined if the message wasn't found
     */

  }, {
    key: "findMessage",
    value: function findMessage(messageId, parentMessageId) {
      if (parentMessageId) {
        var messages = this.threads[parentMessageId];

        if (!messages) {
          return undefined;
        }

        return messages.find(function (m) {
          return m.id === messageId;
        });
      }

      var messageSetIndex = this.findMessageSetIndex({
        id: messageId
      });

      if (messageSetIndex === -1) {
        return undefined;
      }

      return this.messageSets[messageSetIndex].messages.find(function (m) {
        return m.id === messageId;
      });
    }
  }, {
    key: "switchToMessageSet",
    value: function switchToMessageSet(index) {
      var currentMessages = this.messageSets.find(function (s) {
        return s.isCurrent;
      });

      if (!currentMessages) {
        return;
      }

      currentMessages.isCurrent = false;
      this.messageSets[index].isCurrent = true;
    }
  }, {
    key: "areMessageSetsOverlap",
    value: function areMessageSetsOverlap(messages1, messages2) {
      return messages1.some(function (m1) {
        return messages2.find(function (m2) {
          return m1.id === m2.id;
        });
      });
    }
  }, {
    key: "findMessageSetIndex",
    value: function findMessageSetIndex(message) {
      return this.messageSets.findIndex(function (set) {
        return !!set.messages.find(function (m) {
          return m.id === message.id;
        });
      });
    }
  }, {
    key: "findTargetMessageSet",
    value: function findTargetMessageSet(newMessages) {
      var _this5 = this;

      var addIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var messageSetToAddToIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'current';
      var messagesToAdd = newMessages;
      var targetMessageSetIndex;

      if (addIfDoesNotExist) {
        var overlappingMessageSetIndices = this.messageSets.map(function (_, i) {
          return i;
        }).filter(function (i) {
          return _this5.areMessageSetsOverlap(_this5.messageSets[i].messages, newMessages);
        });

        switch (messageSetToAddToIfDoesNotExist) {
          case 'new':
            if (overlappingMessageSetIndices.length > 0) {
              targetMessageSetIndex = overlappingMessageSetIndices[0]; // No new message set is created if newMessages only contains thread replies
            } else if (newMessages.some(function (m) {
              return !m.parent_id;
            })) {
              this.messageSets.push({
                messages: [],
                isCurrent: false,
                isLatest: false,
                pagination: DEFAULT_MESSAGE_SET_PAGINATION
              });
              targetMessageSetIndex = this.messageSets.length - 1;
            }

            break;

          case 'current':
            targetMessageSetIndex = this.messageSets.findIndex(function (s) {
              return s.isCurrent;
            });
            break;

          case 'latest':
            targetMessageSetIndex = this.messageSets.findIndex(function (s) {
              return s.isLatest;
            });
            break;

          default:
            targetMessageSetIndex = -1;
        } // when merging the target set will be the first one from the overlapping message sets


        var mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];

        var mergeSourceMessageSetIndices = _toConsumableArray__default['default'](overlappingMessageSetIndices);

        if (mergeTargetMessageSetIndex !== undefined && mergeTargetMessageSetIndex !== targetMessageSetIndex) {
          mergeSourceMessageSetIndices.push(targetMessageSetIndex);
        } // merge message sets


        if (mergeSourceMessageSetIndices.length > 0) {
          var target = this.messageSets[mergeTargetMessageSetIndex];
          var sources = this.messageSets.filter(function (_, i) {
            return mergeSourceMessageSetIndices.indexOf(i) !== -1;
          });
          sources.forEach(function (messageSet) {
            target.isLatest = target.isLatest || messageSet.isLatest;
            target.isCurrent = target.isCurrent || messageSet.isCurrent;
            target.pagination.hasPrev = messageSet.messages[0].created_at < target.messages[0].created_at ? messageSet.pagination.hasPrev : target.pagination.hasPrev;
            target.pagination.hasNext = target.messages.slice(-1)[0].created_at < messageSet.messages.slice(-1)[0].created_at ? messageSet.pagination.hasNext : target.pagination.hasNext;
            messagesToAdd = [].concat(_toConsumableArray__default['default'](messagesToAdd), _toConsumableArray__default['default'](messageSet.messages));
          });
          sources.forEach(function (s) {
            return _this5.messageSets.splice(_this5.messageSets.indexOf(s), 1);
          });
          var overlappingMessageSetIndex = this.messageSets.findIndex(function (s) {
            return _this5.areMessageSetsOverlap(s.messages, newMessages);
          });
          targetMessageSetIndex = overlappingMessageSetIndex;
        }
      } else {
        // assumes that all new messages belong to the same set
        targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);
      }

      return {
        targetMessageSetIndex: targetMessageSetIndex,
        messagesToAdd: messagesToAdd
      };
    }
  }]);

  return ChannelState;
}();

function _createForOfIteratorHelper$4(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Channel - The Channel class manages it's own state.
 */

var Channel = /*#__PURE__*/function () {
  /**  */

  /**
   * This boolean is a vague indication of weather the channel exists on chat backend.
   *
   * If the value is true, then that means the channel has been initialized by either calling
   * channel.create() or channel.query() or channel.watch().
   *
   * If the value is false, then channel may or may not exist on the backend. The only way to ensure
   * is by calling channel.create() or channel.query() or channel.watch().
   */

  /**
   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.
   * Static state indicates that channel exists on backend, but is not being watched yet.
   */

  /**
   * constructor - Create a channel
   *
   * @param {StreamChat<StreamChatGenerics>} client the chat client
   * @param {string} type  the type of channel
   * @param {string} [id]  the id of the chat
   * @param {ChannelData<StreamChatGenerics>} data any additional custom params
   *
   * @return {Channel<StreamChatGenerics>} Returns a new uninitialized channel
   */
  function Channel(client, type, id, data) {
    var _this = this;

    _classCallCheck__default['default'](this, Channel);

    _defineProperty__default['default'](this, "_client", void 0);

    _defineProperty__default['default'](this, "type", void 0);

    _defineProperty__default['default'](this, "id", void 0);

    _defineProperty__default['default'](this, "data", void 0);

    _defineProperty__default['default'](this, "_data", void 0);

    _defineProperty__default['default'](this, "cid", void 0);

    _defineProperty__default['default'](this, "listeners", void 0);

    _defineProperty__default['default'](this, "state", void 0);

    _defineProperty__default['default'](this, "initialized", void 0);

    _defineProperty__default['default'](this, "offlineMode", void 0);

    _defineProperty__default['default'](this, "lastKeyStroke", void 0);

    _defineProperty__default['default'](this, "lastTypingEvent", void 0);

    _defineProperty__default['default'](this, "isTyping", void 0);

    _defineProperty__default['default'](this, "disconnected", void 0);

    _defineProperty__default['default'](this, "push_preferences", void 0);

    _defineProperty__default['default'](this, "create", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(options) {
        var defaultOptions;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                defaultOptions = _objectSpread$c(_objectSpread$c({}, options), {}, {
                  watch: false,
                  state: false,
                  presence: false
                });
                _context.next = 3;
                return _this.query(defaultOptions, 'latest');

              case 3:
                return _context.abrupt("return", _context.sent);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "_callChannelListeners", function (event) {
      var channel = _this; // gather and call the listeners

      var listeners = [];

      if (channel.listeners.all) {
        listeners.push.apply(listeners, _toConsumableArray__default['default'](channel.listeners.all));
      }

      if (channel.listeners[event.type]) {
        listeners.push.apply(listeners, _toConsumableArray__default['default'](channel.listeners[event.type]));
      } // call the event and send it to the listeners


      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {
        var listener = _listeners[_i];

        if (typeof listener !== 'string') {
          listener(event);
        }
      }
    });

    _defineProperty__default['default'](this, "_channelURL", function () {
      if (!_this.id) {
        throw new Error('channel id is not defined');
      }

      return "".concat(_this.getClient().baseURL, "/channels/").concat(encodeURIComponent(_this.type), "/").concat(encodeURIComponent(_this.id));
    });

    var validTypeRe = /^[\w_-]+$/;
    var validIDRe = /^[\w!_-]+$/;

    if (!validTypeRe.test(type)) {
      throw new Error("Invalid chat type ".concat(type, ", letters, numbers and \"_-\" are allowed"));
    }

    if (typeof id === 'string' && !validIDRe.test(id)) {
      throw new Error("Invalid chat id ".concat(id, ", letters, numbers and \"!-_\" are allowed"));
    }

    this._client = client;
    this.type = type;
    this.id = id; // used by the frontend, gets updated:

    this.data = data; // this._data is used for the requests...

    this._data = _objectSpread$c({}, data);
    this.cid = "".concat(type, ":").concat(id);
    this.listeners = {}; // perhaps the state variable should be private

    this.state = new ChannelState(this);
    this.initialized = false;
    this.offlineMode = false;
    this.lastTypingEvent = null;
    this.isTyping = false;
    this.disconnected = false;
  }
  /**
   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error
   *
   * @return {StreamChat<StreamChatGenerics>}
   */


  _createClass__default['default'](Channel, [{
    key: "getClient",
    value: function getClient() {
      if (this.disconnected === true) {
        throw Error("You can't use a channel after client.disconnect() was called");
      }

      return this._client;
    }
    /**
     * getConfig - Get the config for this channel id (cid)
     *
     * @return {Record<string, unknown>}
     */

  }, {
    key: "getConfig",
    value: function getConfig() {
      var client = this.getClient();
      return client.configs[this.cid];
    }
    /**
     * sendMessage - Send a message to this channel
     *
     * @param {Message<StreamChatGenerics>} message The Message object
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     * @param {boolean} [options.skip_push] Skip sending push notifications
     * @param {boolean} [options.is_pending_message] DEPRECATED, please use `pending` instead.
     * @param {boolean} [options.pending] Make this message pending
     * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message
     * @param {boolean} [options.force_moderation] Apply force moderation for server-side requests
     *
     * @return {Promise<SendMessageAPIResponse<StreamChatGenerics>>} The Server Response
     */

  }, {
    key: "sendMessage",
    value: function () {
      var _sendMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(message, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getClient().post(this._channelURL() + '/message', _objectSpread$c({
                  message: message
                }, options));

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function sendMessage(_x2, _x3) {
        return _sendMessage.apply(this, arguments);
      }

      return sendMessage;
    }()
  }, {
    key: "sendFile",
    value: function sendFile(uri, name, contentType, user) {
      return this.getClient().sendFile("".concat(this._channelURL(), "/file"), uri, name, contentType, user);
    }
  }, {
    key: "sendImage",
    value: function sendImage(uri, name, contentType, user) {
      return this.getClient().sendFile("".concat(this._channelURL(), "/image"), uri, name, contentType, user);
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(url) {
      return this.getClient().delete("".concat(this._channelURL(), "/file"), {
        url: url
      });
    }
  }, {
    key: "deleteImage",
    value: function deleteImage(url) {
      return this.getClient().delete("".concat(this._channelURL(), "/image"), {
        url: url
      });
    }
    /**
     * sendEvent - Send an event on this channel
     *
     * @param {Event<StreamChatGenerics>} event for example {type: 'message.read'}
     *
     * @return {Promise<EventAPIResponse<StreamChatGenerics>>} The Server Response
     */

  }, {
    key: "sendEvent",
    value: function () {
      var _sendEvent = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(event) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this._checkInitialized();

                _context3.next = 3;
                return this.getClient().post(this._channelURL() + '/event', {
                  event: event
                });

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function sendEvent(_x4) {
        return _sendEvent.apply(this, arguments);
      }

      return sendEvent;
    }()
    /**
     * search - Query messages
     *
     * @param {MessageFilters<StreamChatGenerics> | string}  query search query or object MongoDB style filters
     * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<StreamChatGenerics>}} options Option object, {user_id: 'tommaso'}
     *
     * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response
     */

  }, {
    key: "search",
    value: function () {
      var _search = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(query) {
        var options,
            payload,
            _args4 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};

                if (!(options.offset && options.next)) {
                  _context4.next = 3;
                  break;
                }

                throw Error("Cannot specify offset with next");

              case 3:
                // Return a list of channels
                payload = _objectSpread$c(_objectSpread$c({
                  filter_conditions: {
                    cid: this.cid
                  }
                }, options), {}, {
                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined
                });

                if (!(typeof query === 'string')) {
                  _context4.next = 8;
                  break;
                }

                payload.query = query;
                _context4.next = 13;
                break;

              case 8:
                if (!(_typeof__default['default'](query) === 'object')) {
                  _context4.next = 12;
                  break;
                }

                payload.message_filter_conditions = query;
                _context4.next = 13;
                break;

              case 12:
                throw Error("Invalid type ".concat(_typeof__default['default'](query), " for query parameter"));

              case 13:
                _context4.next = 15;
                return this.getClient().wsPromise;

              case 15:
                _context4.next = 17;
                return this.getClient().get(this.getClient().baseURL + '/search', {
                  payload: payload
                });

              case 17:
                return _context4.abrupt("return", _context4.sent);

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function search(_x5) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
    /**
     * queryMembers - Query Members
     *
     * @param {MemberFilters<StreamChatGenerics>}  filterConditions object MongoDB style filters
     * @param {MemberSort<StreamChatGenerics>} [sort] Sort options, for instance [{created_at: -1}].
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]
     * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}
     *
     * @return {Promise<ChannelMemberAPIResponse<StreamChatGenerics>>} Query Members response
     */

  }, {
    key: "queryMembers",
    value: function () {
      var _queryMembers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(filterConditions) {
        var _this$data;

        var sort,
            options,
            id,
            type,
            members,
            _args5 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                sort = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];
                options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};
                type = this.type;

                if (this.id) {
                  id = this.id;
                } else if ((_this$data = this.data) !== null && _this$data !== void 0 && _this$data.members && Array.isArray(this.data.members)) {
                  members = this.data.members;
                } // Return a list of members


                _context5.next = 6;
                return this.getClient().get(this.getClient().baseURL + '/members', {
                  payload: _objectSpread$c({
                    type: type,
                    id: id,
                    members: members,
                    sort: normalizeQuerySort(sort),
                    filter_conditions: filterConditions
                  }, options)
                });

              case 6:
                return _context5.abrupt("return", _context5.sent);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function queryMembers(_x6) {
        return _queryMembers.apply(this, arguments);
      }

      return queryMembers;
    }()
    /**
     * updateMemberPartial - Partial update a member
     *
     * @param {PartialUpdateMember<StreamChatGenerics>}  updates
     * @param {{ user_id?: string }} [options] Option object, {user_id: 'jane'} to optionally specify the user id
      * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} Updated member
     */

  }, {
    key: "updateMemberPartial",
    value: function () {
      var _updateMemberPartial = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(updates, options) {
        var url;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                url = new URL("".concat(this._channelURL(), "/member"));

                if (options !== null && options !== void 0 && options.userId) {
                  url.searchParams.append('user_id', options.userId);
                }

                _context6.next = 4;
                return this.getClient().patch(url.toString(), updates);

              case 4:
                return _context6.abrupt("return", _context6.sent);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function updateMemberPartial(_x7, _x8) {
        return _updateMemberPartial.apply(this, arguments);
      }

      return updateMemberPartial;
    }()
    /**
     * @deprecated Use `updateMemberPartial` instead
     * partialUpdateMember - Partial update a member
     *
     * @param {string} user_id member user id
     * @param {PartialUpdateMember<StreamChatGenerics>}  updates
     *
     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} Updated member
     */

  }, {
    key: "partialUpdateMember",
    value: function () {
      var _partialUpdateMember = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(user_id, updates) {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (user_id) {
                  _context7.next = 2;
                  break;
                }

                throw Error('Please specify the user id');

              case 2:
                _context7.next = 4;
                return this.getClient().patch(this._channelURL() + "/member/".concat(encodeURIComponent(user_id)), updates);

              case 4:
                return _context7.abrupt("return", _context7.sent);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function partialUpdateMember(_x9, _x10) {
        return _partialUpdateMember.apply(this, arguments);
      }

      return partialUpdateMember;
    }()
    /**
     * sendReaction - Send a reaction about a message
     *
     * @param {string} messageID the message id
     * @param {Reaction<StreamChatGenerics>} reaction the reaction object for instance {type: 'love'}
     * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications
     *
     * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response
     */

  }, {
    key: "sendReaction",
    value: function () {
      var _sendReaction = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(messageID, reaction, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (messageID) {
                  _context8.next = 2;
                  break;
                }

                throw Error("Message id is missing");

              case 2:
                if (!(!reaction || Object.keys(reaction).length === 0)) {
                  _context8.next = 4;
                  break;
                }

                throw Error("Reaction object is missing");

              case 4:
                _context8.next = 6;
                return this.getClient().post(this.getClient().baseURL + "/messages/".concat(encodeURIComponent(messageID), "/reaction"), _objectSpread$c({
                  reaction: reaction
                }, options));

              case 6:
                return _context8.abrupt("return", _context8.sent);

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function sendReaction(_x11, _x12, _x13) {
        return _sendReaction.apply(this, arguments);
      }

      return sendReaction;
    }()
    /**
     * deleteReaction - Delete a reaction by user and type
     *
     * @param {string} messageID the id of the message from which te remove the reaction
     * @param {string} reactionType the type of reaction that should be removed
     * @param {string} [user_id] the id of the user (used only for server side request) default null
     *
     * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response
     */

  }, {
    key: "deleteReaction",
    value: function deleteReaction(messageID, reactionType, user_id) {
      this._checkInitialized();

      if (!reactionType || !messageID) {
        throw Error('Deleting a reaction requires specifying both the message and reaction type');
      }

      var url = this.getClient().baseURL + "/messages/".concat(encodeURIComponent(messageID), "/reaction/").concat(encodeURIComponent(reactionType)); //provided when server side request

      if (user_id) {
        return this.getClient().delete(url, {
          user_id: user_id
        });
      }

      return this.getClient().delete(url, {});
    }
    /**
     * update - Edit the channel's custom properties
     *
     * @param {ChannelData<StreamChatGenerics>} channelData The object to update the custom properties of this channel with
     * @param {Message<StreamChatGenerics>} [updateMessage] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "update",
    value: function () {
      var _update2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {
        var channelData,
            updateMessage,
            options,
            reserved,
            _args9 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                channelData = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
                updateMessage = _args9.length > 1 ? _args9[1] : undefined;
                options = _args9.length > 2 ? _args9[2] : undefined;
                // Strip out reserved names that will result in API errors.
                reserved = ['config', 'cid', 'created_by', 'id', 'member_count', 'type', 'created_at', 'updated_at', 'last_message_at', 'own_capabilities'];
                reserved.forEach(function (key) {
                  delete channelData[key];
                });
                _context9.next = 7;
                return this._update(_objectSpread$c({
                  message: updateMessage,
                  data: channelData
                }, options));

              case 7:
                return _context9.abrupt("return", _context9.sent);

              case 8:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function update() {
        return _update2.apply(this, arguments);
      }

      return update;
    }()
    /**
     * updatePartial - partial update channel properties
     *
     * @param {PartialUpdateChannel<StreamChatGenerics>} partial update request
     *
     * @return {Promise<PartialUpdateChannelAPIResponse<StreamChatGenerics>>}
     */

  }, {
    key: "updatePartial",
    value: function () {
      var _updatePartial = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(update) {
        var _this$data2, _this$data3;

        var data, areCapabilitiesChanged;
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.getClient().patch(this._channelURL(), update);

              case 2:
                data = _context10.sent;
                areCapabilitiesChanged = _toConsumableArray__default['default'](data.channel.own_capabilities || []).sort().join() !== _toConsumableArray__default['default'](Array.isArray((_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.own_capabilities) ? (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.own_capabilities : []).sort().join();
                this.data = data.channel; // If the capabiltities are changed, we trigger the `capabilities.changed` event.

                if (areCapabilitiesChanged) {
                  this.getClient().dispatchEvent({
                    type: 'capabilities.changed',
                    cid: this.cid,
                    own_capabilities: data.channel.own_capabilities
                  });
                }

                return _context10.abrupt("return", data);

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function updatePartial(_x14) {
        return _updatePartial.apply(this, arguments);
      }

      return updatePartial;
    }()
    /**
     * enableSlowMode - enable slow mode
     *
     * @param {number} coolDownInterval the cooldown interval in seconds
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "enableSlowMode",
    value: function () {
      var _enableSlowMode = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11(coolDownInterval) {
        var data;
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.getClient().post(this._channelURL(), {
                  cooldown: coolDownInterval
                });

              case 2:
                data = _context11.sent;
                this.data = data.channel;
                return _context11.abrupt("return", data);

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function enableSlowMode(_x15) {
        return _enableSlowMode.apply(this, arguments);
      }

      return enableSlowMode;
    }()
    /**
     * disableSlowMode - disable slow mode
     *
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "disableSlowMode",
    value: function () {
      var _disableSlowMode = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12() {
        var data;
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.getClient().post(this._channelURL(), {
                  cooldown: 0
                });

              case 2:
                data = _context12.sent;
                this.data = data.channel;
                return _context12.abrupt("return", data);

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function disableSlowMode() {
        return _disableSlowMode.apply(this, arguments);
      }

      return disableSlowMode;
    }()
    /**
     * delete - Delete the channel. Messages are permanently removed.
     *
     * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not
     *
     * @return {Promise<DeleteChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13() {
        var options,
            _args13 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
                _context13.next = 3;
                return this.getClient().delete(this._channelURL(), _objectSpread$c({}, options));

              case 3:
                return _context13.abrupt("return", _context13.sent);

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * truncate - Removes all messages from the channel
     * @param {TruncateOptions<StreamChatGenerics>} [options] Defines truncation options
     * @return {Promise<TruncateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "truncate",
    value: function () {
      var _truncate = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14() {
        var options,
            _args14 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
                _context14.next = 3;
                return this.getClient().post(this._channelURL() + '/truncate', options);

              case 3:
                return _context14.abrupt("return", _context14.sent);

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function truncate() {
        return _truncate.apply(this, arguments);
      }

      return truncate;
    }()
    /**
     * acceptInvite - accept invitation to the channel
     *
     * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with
     *
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "acceptInvite",
    value: function () {
      var _acceptInvite = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15() {
        var options,
            _args15 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                options = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};
                _context15.next = 3;
                return this._update(_objectSpread$c({
                  accept_invite: true
                }, options));

              case 3:
                return _context15.abrupt("return", _context15.sent);

              case 4:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function acceptInvite() {
        return _acceptInvite.apply(this, arguments);
      }

      return acceptInvite;
    }()
    /**
     * rejectInvite - reject invitation to the channel
     *
     * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with
     *
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "rejectInvite",
    value: function () {
      var _rejectInvite = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16() {
        var options,
            _args16 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                options = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};
                _context16.next = 3;
                return this._update(_objectSpread$c({
                  reject_invite: true
                }, options));

              case 3:
                return _context16.abrupt("return", _context16.sent);

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function rejectInvite() {
        return _rejectInvite.apply(this, arguments);
      }

      return rejectInvite;
    }()
    /**
     * addMembers - add members to the channel
     *
     * @param {string[] | Array<NewMemberPayload<StreamChatGenerics>>} members An array of members to add to the channel
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "addMembers",
    value: function () {
      var _addMembers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee17(members, message) {
        var options,
            _args17 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};
                _context17.next = 3;
                return this._update(_objectSpread$c({
                  add_members: members,
                  message: message
                }, options));

              case 3:
                return _context17.abrupt("return", _context17.sent);

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function addMembers(_x16, _x17) {
        return _addMembers.apply(this, arguments);
      }

      return addMembers;
    }()
    /**
     * addModerators - add moderators to the channel
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "addModerators",
    value: function () {
      var _addModerators = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee18(members, message) {
        var options,
            _args18 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};
                _context18.next = 3;
                return this._update(_objectSpread$c({
                  add_moderators: members,
                  message: message
                }, options));

              case 3:
                return _context18.abrupt("return", _context18.sent);

              case 4:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function addModerators(_x18, _x19) {
        return _addModerators.apply(this, arguments);
      }

      return addModerators;
    }()
    /**
     * assignRoles - sets member roles in a channel
     *
     * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "assignRoles",
    value: function () {
      var _assignRoles = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee19(roles, message) {
        var options,
            _args19 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                options = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};
                _context19.next = 3;
                return this._update(_objectSpread$c({
                  assign_roles: roles,
                  message: message
                }, options));

              case 3:
                return _context19.abrupt("return", _context19.sent);

              case 4:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function assignRoles(_x20, _x21) {
        return _assignRoles.apply(this, arguments);
      }

      return assignRoles;
    }()
    /**
     * inviteMembers - invite members to the channel
     *
     * @param {string[] | Array<NewMemberPayload<StreamChatGenerics>>} members An array of members to invite to the channel
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "inviteMembers",
    value: function () {
      var _inviteMembers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee20(members, message) {
        var options,
            _args20 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};
                _context20.next = 3;
                return this._update(_objectSpread$c({
                  invites: members,
                  message: message
                }, options));

              case 3:
                return _context20.abrupt("return", _context20.sent);

              case 4:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function inviteMembers(_x22, _x23) {
        return _inviteMembers.apply(this, arguments);
      }

      return inviteMembers;
    }()
    /**
     * removeMembers - remove members from channel
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "removeMembers",
    value: function () {
      var _removeMembers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee21(members, message) {
        var options,
            _args21 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                options = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};
                _context21.next = 3;
                return this._update(_objectSpread$c({
                  remove_members: members,
                  message: message
                }, options));

              case 3:
                return _context21.abrupt("return", _context21.sent);

              case 4:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function removeMembers(_x24, _x25) {
        return _removeMembers.apply(this, arguments);
      }

      return removeMembers;
    }()
    /**
     * demoteModerators - remove moderator role from channel members
     *
     * @param {string[]} members An array of member identifiers
     * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification
     * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "demoteModerators",
    value: function () {
      var _demoteModerators = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee22(members, message) {
        var options,
            _args22 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                options = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : {};
                _context22.next = 3;
                return this._update(_objectSpread$c({
                  demote_moderators: members,
                  message: message
                }, options));

              case 3:
                return _context22.abrupt("return", _context22.sent);

              case 4:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function demoteModerators(_x26, _x27) {
        return _demoteModerators.apply(this, arguments);
      }

      return demoteModerators;
    }()
    /**
     * _update - executes channel update request
     * @param payload Object Update Channel payload
     * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response
     * TODO: introduce new type instead of Object in the next major update
     */

  }, {
    key: "_update",
    value: function () {
      var _update3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee23(payload) {
        var data;
        return _regeneratorRuntime__default['default'].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.getClient().post(this._channelURL(), payload);

              case 2:
                data = _context23.sent;
                this.data = data.channel;
                return _context23.abrupt("return", data);

              case 5:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function _update(_x28) {
        return _update3.apply(this, arguments);
      }

      return _update;
    }()
    /**
     * mute - mutes the current channel
     * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id
     * @return {Promise<MuteChannelAPIResponse<StreamChatGenerics>>} The server response
     *
     * example with expiration:
     * await channel.mute({expiration: moment.duration(2, 'weeks')});
     *
     * example server side:
     * await channel.mute({user_id: userId});
     *
     */

  }, {
    key: "mute",
    value: function () {
      var _mute = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee24() {
        var opts,
            _args24 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                opts = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};
                _context24.next = 3;
                return this.getClient().post(this.getClient().baseURL + '/moderation/mute/channel', _objectSpread$c({
                  channel_cid: this.cid
                }, opts));

              case 3:
                return _context24.abrupt("return", _context24.sent);

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function mute() {
        return _mute.apply(this, arguments);
      }

      return mute;
    }()
    /**
     * unmute - mutes the current channel
     * @param {{ user_id?: string}} opts user_id
     * @return {Promise<APIResponse>} The server response
     *
     * example server side:
     * await channel.unmute({user_id: userId});
     */

  }, {
    key: "unmute",
    value: function () {
      var _unmute = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee25() {
        var opts,
            _args25 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                opts = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};
                _context25.next = 3;
                return this.getClient().post(this.getClient().baseURL + '/moderation/unmute/channel', _objectSpread$c({
                  channel_cid: this.cid
                }, opts));

              case 3:
                return _context25.abrupt("return", _context25.sent);

              case 4:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function unmute() {
        return _unmute.apply(this, arguments);
      }

      return unmute;
    }()
    /**
     * archive - archives the current channel
     * @param {{ user_id?: string }} opts user_id if called server side
     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response
     *
     * example:
     * await channel.archives();
     *
     * example server side:
     * await channel.archive({user_id: userId});
     *
     */

  }, {
    key: "archive",
    value: function () {
      var _archive = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee26() {
        var opts,
            cli,
            uid,
            resp,
            _args26 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                opts = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};
                cli = this.getClient();
                uid = opts.user_id || cli.userID;

                if (uid) {
                  _context26.next = 5;
                  break;
                }

                throw Error('A user_id is required for archiving a channel');

              case 5:
                _context26.next = 7;
                return this.partialUpdateMember(uid, {
                  set: {
                    archived: true
                  }
                });

              case 7:
                resp = _context26.sent;
                return _context26.abrupt("return", resp.channel_member);

              case 9:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function archive() {
        return _archive.apply(this, arguments);
      }

      return archive;
    }()
    /**
     * unarchive - unarchives the current channel
     * @param {{ user_id?: string }} opts user_id if called server side
     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response
     *
     * example:
     * await channel.unarchive();
     *
     * example server side:
     * await channel.unarchive({user_id: userId});
     *
     */

  }, {
    key: "unarchive",
    value: function () {
      var _unarchive = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee27() {
        var opts,
            cli,
            uid,
            resp,
            _args27 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                opts = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};
                cli = this.getClient();
                uid = opts.user_id || cli.userID;

                if (uid) {
                  _context27.next = 5;
                  break;
                }

                throw Error('A user_id is required for unarchiving a channel');

              case 5:
                _context27.next = 7;
                return this.partialUpdateMember(uid, {
                  set: {
                    archived: false
                  }
                });

              case 7:
                resp = _context27.sent;
                return _context27.abrupt("return", resp.channel_member);

              case 9:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function unarchive() {
        return _unarchive.apply(this, arguments);
      }

      return unarchive;
    }()
    /**
     * pin - pins the current channel
     * @param {{ user_id?: string }} opts user_id if called server side
     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response
     *
     * example:
     * await channel.pin();
     *
     * example server side:
     * await channel.pin({user_id: userId});
     *
     */

  }, {
    key: "pin",
    value: function () {
      var _pin = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee28() {
        var opts,
            cli,
            uid,
            resp,
            _args28 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                opts = _args28.length > 0 && _args28[0] !== undefined ? _args28[0] : {};
                cli = this.getClient();
                uid = opts.user_id || cli.userID;

                if (uid) {
                  _context28.next = 5;
                  break;
                }

                throw new Error('A user_id is required for pinning a channel');

              case 5:
                _context28.next = 7;
                return this.partialUpdateMember(uid, {
                  set: {
                    pinned: true
                  }
                });

              case 7:
                resp = _context28.sent;
                return _context28.abrupt("return", resp.channel_member);

              case 9:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function pin() {
        return _pin.apply(this, arguments);
      }

      return pin;
    }()
    /**
     * unpin - unpins the current channel
     * @param {{ user_id?: string }} opts user_id if called server side
     * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response
     *
     * example:
     * await channel.unpin();
     *
     * example server side:
     * await channel.unpin({user_id: userId});
     *
     */

  }, {
    key: "unpin",
    value: function () {
      var _unpin = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee29() {
        var opts,
            cli,
            uid,
            resp,
            _args29 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                opts = _args29.length > 0 && _args29[0] !== undefined ? _args29[0] : {};
                cli = this.getClient();
                uid = opts.user_id || cli.userID;

                if (uid) {
                  _context29.next = 5;
                  break;
                }

                throw new Error('A user_id is required for unpinning a channel');

              case 5:
                _context29.next = 7;
                return this.partialUpdateMember(uid, {
                  set: {
                    pinned: false
                  }
                });

              case 7:
                resp = _context29.sent;
                return _context29.abrupt("return", resp.channel_member);

              case 9:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function unpin() {
        return _unpin.apply(this, arguments);
      }

      return unpin;
    }()
    /**
     * muteStatus - returns the mute status for the current channel
     * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}
     */

  }, {
    key: "muteStatus",
    value: function muteStatus() {
      this._checkInitialized();

      return this.getClient()._muteStatus(this.cid);
    }
  }, {
    key: "sendAction",
    value: function sendAction(messageID, formData) {
      this._checkInitialized();

      if (!messageID) {
        throw Error("Message id is missing");
      }

      return this.getClient().post(this.getClient().baseURL + "/messages/".concat(encodeURIComponent(messageID), "/action"), {
        message_id: messageID,
        form_data: formData,
        id: this.id,
        type: this.type
      });
    }
    /**
     * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.
     * Call this on every keystroke
     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}
     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread
     */

  }, {
    key: "keystroke",
    value: function () {
      var _keystroke = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee30(parent_id, options) {
        var now, diff;
        return _regeneratorRuntime__default['default'].wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                if (this._isTypingIndicatorsEnabled()) {
                  _context30.next = 2;
                  break;
                }

                return _context30.abrupt("return");

              case 2:
                now = new Date();
                diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();
                this.lastKeyStroke = now;
                this.isTyping = true; // send a typing.start every 2 seconds

                if (!(diff === null || diff > 2000)) {
                  _context30.next = 10;
                  break;
                }

                this.lastTypingEvent = new Date();
                _context30.next = 10;
                return this.sendEvent(_objectSpread$c({
                  type: 'typing.start',
                  parent_id: parent_id
                }, options || {}));

              case 10:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));

      function keystroke(_x29, _x30) {
        return _keystroke.apply(this, arguments);
      }

      return keystroke;
    }()
    /**
     * Sends an event to update the AI state for a specific message.
     * Typically used by the server connected to the AI service to notify clients of state changes.
     *
     * @param messageId - The ID of the message associated with the AI state.
     * @param state - The new state of the AI process (e.g., thinking, generating).
     * @param options - Optional parameters, such as `ai_message`, to include additional details in the event.
     */

  }, {
    key: "updateAIState",
    value: function () {
      var _updateAIState = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee31(messageId, state) {
        var options,
            _args31 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                options = _args31.length > 2 && _args31[2] !== undefined ? _args31[2] : {};
                _context31.next = 3;
                return this.sendEvent(_objectSpread$c(_objectSpread$c({}, options), {}, {
                  type: 'ai_indicator.update',
                  message_id: messageId,
                  ai_state: state
                }));

              case 3:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function updateAIState(_x31, _x32) {
        return _updateAIState.apply(this, arguments);
      }

      return updateAIState;
    }()
    /**
     * Sends an event to notify watchers to clear the typing/thinking UI when the AI response starts streaming.
     * Typically used by the server connected to the AI service to inform clients that the AI response has started.
     */

  }, {
    key: "clearAIIndicator",
    value: function () {
      var _clearAIIndicator = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee32() {
        return _regeneratorRuntime__default['default'].wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                _context32.next = 2;
                return this.sendEvent({
                  type: 'ai_indicator.clear'
                });

              case 2:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      function clearAIIndicator() {
        return _clearAIIndicator.apply(this, arguments);
      }

      return clearAIIndicator;
    }()
    /**
     * Sends an event to stop AI response generation, leaving the message in its current state.
     * Triggered by the user to halt the AI response process.
     */

  }, {
    key: "stopAIResponse",
    value: function () {
      var _stopAIResponse = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee33() {
        return _regeneratorRuntime__default['default'].wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                _context33.next = 2;
                return this.sendEvent({
                  type: 'ai_indicator.stop'
                });

              case 2:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function stopAIResponse() {
        return _stopAIResponse.apply(this, arguments);
      }

      return stopAIResponse;
    }()
    /**
     * stopTyping - Sets last typing to null and sends the typing.stop event
     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}
     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread
     */

  }, {
    key: "stopTyping",
    value: function () {
      var _stopTyping = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee34(parent_id, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                if (this._isTypingIndicatorsEnabled()) {
                  _context34.next = 2;
                  break;
                }

                return _context34.abrupt("return");

              case 2:
                this.lastTypingEvent = null;
                this.isTyping = false;
                _context34.next = 6;
                return this.sendEvent(_objectSpread$c({
                  type: 'typing.stop',
                  parent_id: parent_id
                }, options || {}));

              case 6:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function stopTyping(_x33, _x34) {
        return _stopTyping.apply(this, arguments);
      }

      return stopTyping;
    }()
  }, {
    key: "_isTypingIndicatorsEnabled",
    value: function _isTypingIndicatorsEnabled() {
      var _this$getConfig, _this$getClient$user$, _this$getClient$user, _this$getClient$user$2, _this$getClient$user$3;

      if (!((_this$getConfig = this.getConfig()) !== null && _this$getConfig !== void 0 && _this$getConfig.typing_events)) {
        return false;
      }

      return (_this$getClient$user$ = (_this$getClient$user = this.getClient().user) === null || _this$getClient$user === void 0 ? void 0 : (_this$getClient$user$2 = _this$getClient$user.privacy_settings) === null || _this$getClient$user$2 === void 0 ? void 0 : (_this$getClient$user$3 = _this$getClient$user$2.typing_indicators) === null || _this$getClient$user$3 === void 0 ? void 0 : _this$getClient$user$3.enabled) !== null && _this$getClient$user$ !== void 0 ? _this$getClient$user$ : true;
    }
    /**
     * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted
     *
     * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']> | undefined} Description
     */

  }, {
    key: "lastMessage",
    value: function lastMessage() {
      // get last 5 messages, sort, return the latest
      // get a slice of the last 5
      var min = this.state.latestMessages.length - 5;

      if (min < 0) {
        min = 0;
      }

      var max = this.state.latestMessages.length + 1;
      var messageSlice = this.state.latestMessages.slice(min, max); // sort by pk desc

      messageSlice.sort(function (a, b) {
        return b.created_at.getTime() - a.created_at.getTime();
      });
      return messageSlice[0];
    }
    /**
     * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled
     *
     * @param {MarkReadOptions<StreamChatGenerics>} data
     * @return {Promise<EventAPIResponse<StreamChatGenerics> | null>} Description
     */

  }, {
    key: "markRead",
    value: function () {
      var _markRead = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee35() {
        var _this$getConfig2;

        var data,
            _args35 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                data = _args35.length > 0 && _args35[0] !== undefined ? _args35[0] : {};

                this._checkInitialized();

                if (!(!((_this$getConfig2 = this.getConfig()) !== null && _this$getConfig2 !== void 0 && _this$getConfig2.read_events) && !this.getClient()._isUsingServerAuth())) {
                  _context35.next = 4;
                  break;
                }

                return _context35.abrupt("return", Promise.resolve(null));

              case 4:
                _context35.next = 6;
                return this.getClient().post(this._channelURL() + '/read', _objectSpread$c({}, data));

              case 6:
                return _context35.abrupt("return", _context35.sent);

              case 7:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      function markRead() {
        return _markRead.apply(this, arguments);
      }

      return markRead;
    }()
    /**
     * markUnread - Mark the channel as unread from messageID, only works if the `read_events` setting is enabled
     *
     * @param {MarkUnreadOptions<StreamChatGenerics>} data
     * @return {APIResponse} An API response
     */

  }, {
    key: "markUnread",
    value: function () {
      var _markUnread = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee36(data) {
        var _this$getConfig3;

        return _regeneratorRuntime__default['default'].wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                this._checkInitialized();

                if (!(!((_this$getConfig3 = this.getConfig()) !== null && _this$getConfig3 !== void 0 && _this$getConfig3.read_events) && !this.getClient()._isUsingServerAuth())) {
                  _context36.next = 3;
                  break;
                }

                return _context36.abrupt("return", Promise.resolve(null));

              case 3:
                _context36.next = 5;
                return this.getClient().post(this._channelURL() + '/unread', _objectSpread$c({}, data));

              case 5:
                return _context36.abrupt("return", _context36.sent);

              case 6:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function markUnread(_x35) {
        return _markUnread.apply(this, arguments);
      }

      return markUnread;
    }()
    /**
     * clean - Cleans the channel state and fires stop typing if needed
     */

  }, {
    key: "clean",
    value: function clean() {
      if (this.lastKeyStroke) {
        var now = new Date();
        var diff = now.getTime() - this.lastKeyStroke.getTime();

        if (diff > 1000 && this.isTyping) {
          logChatPromiseExecution(this.stopTyping(), 'stop typing event');
        }
      }

      this.state.clean();
    }
    /**
     * watch - Loads the initial channel state and watches for changes
     *
     * @param {ChannelQueryOptions<StreamChatGenerics>} options additional options for the query endpoint
     *
     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The server response
     */

  }, {
    key: "watch",
    value: function () {
      var _watch = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee37(options) {
        var defaultOptions, combined, state;
        return _regeneratorRuntime__default['default'].wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                defaultOptions = {
                  state: true,
                  watch: true,
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context37.next = 3;
                return this.getClient().wsPromise;

              case 3:
                if (!this.getClient()._hasConnectionID()) {
                  defaultOptions.watch = false;
                }

                combined = _objectSpread$c(_objectSpread$c({}, defaultOptions), options);
                _context37.next = 7;
                return this.query(combined, 'latest');

              case 7:
                state = _context37.sent;
                this.initialized = true;
                this.data = state.channel;

                this._client.logger('info', "channel:watch() - started watching channel ".concat(this.cid), {
                  tags: ['channel'],
                  channel: this
                });

                return _context37.abrupt("return", state);

              case 12:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function watch(_x36) {
        return _watch.apply(this, arguments);
      }

      return watch;
    }()
    /**
     * stopWatching - Stops watching the channel
     *
     * @return {Promise<APIResponse>} The server response
     */

  }, {
    key: "stopWatching",
    value: function () {
      var _stopWatching = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee38() {
        var response;
        return _regeneratorRuntime__default['default'].wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return this.getClient().post(this._channelURL() + '/stop-watching', {});

              case 2:
                response = _context38.sent;

                this._client.logger('info', "channel:watch() - stopped watching channel ".concat(this.cid), {
                  tags: ['channel'],
                  channel: this
                });

                return _context38.abrupt("return", response);

              case 5:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function stopWatching() {
        return _stopWatching.apply(this, arguments);
      }

      return stopWatching;
    }()
    /**
     * getReplies - List the message replies for a parent message.
     *
     * The recommended way of working with threads is to use the Thread class.
     *
     * @param {string} parent_id The message parent id, ie the top of the thread
     * @param {MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}
     *
     * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages
     */

  }, {
    key: "getReplies",
    value: function () {
      var _getReplies = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee39(parent_id, options, sort) {
        var normalizedSort, data;
        return _regeneratorRuntime__default['default'].wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                normalizedSort = sort ? normalizeQuerySort(sort) : undefined;
                _context39.next = 3;
                return this.getClient().get(this.getClient().baseURL + "/messages/".concat(encodeURIComponent(parent_id), "/replies"), _objectSpread$c({
                  sort: normalizedSort
                }, options));

              case 3:
                data = _context39.sent;

                // add any messages to our thread state
                if (data.messages) {
                  this.state.addMessagesSorted(data.messages);
                }

                return _context39.abrupt("return", data);

              case 6:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));

      function getReplies(_x37, _x38, _x39) {
        return _getReplies.apply(this, arguments);
      }

      return getReplies;
    }()
    /**
     * getPinnedMessages - List list pinned messages of the channel
     *
     * @param {PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}
     * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages
     *
     * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages
     */

  }, {
    key: "getPinnedMessages",
    value: function () {
      var _getPinnedMessages = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee40(options) {
        var sort,
            _args40 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                sort = _args40.length > 1 && _args40[1] !== undefined ? _args40[1] : [];
                _context40.next = 3;
                return this.getClient().get(this._channelURL() + '/pinned_messages', {
                  payload: _objectSpread$c(_objectSpread$c({}, options), {}, {
                    sort: normalizeQuerySort(sort)
                  })
                });

              case 3:
                return _context40.abrupt("return", _context40.sent);

              case 4:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));

      function getPinnedMessages(_x40) {
        return _getPinnedMessages.apply(this, arguments);
      }

      return getPinnedMessages;
    }()
    /**
     * getReactions - List the reactions, supports pagination
     *
     * @param {string} message_id The message id
     * @param {{ limit?: number; offset?: number }} options The pagination options
     *
     * @return {Promise<GetReactionsAPIResponse<StreamChatGenerics>>} Server response
     */

  }, {
    key: "getReactions",
    value: function getReactions(message_id, options) {
      return this.getClient().get(this.getClient().baseURL + "/messages/".concat(encodeURIComponent(message_id), "/reactions"), _objectSpread$c({}, options));
    }
    /**
     * getMessagesById - Retrieves a list of messages by ID
     *
     * @param {string[]} messageIds The ids of the messages to retrieve from this channel
     *
     * @return {Promise<GetMultipleMessagesAPIResponse<StreamChatGenerics>>} Server response
     */

  }, {
    key: "getMessagesById",
    value: function getMessagesById(messageIds) {
      return this.getClient().get(this._channelURL() + '/messages', {
        ids: messageIds.join(',')
      });
    }
    /**
     * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null
     * @return {Date | null | undefined}
     */

  }, {
    key: "lastRead",
    value: function lastRead() {
      var _this$getClient = this.getClient(),
          userID = _this$getClient.userID;

      if (userID) {
        return this.state.read[userID] ? this.state.read[userID].last_read : null;
      }
    }
  }, {
    key: "_countMessageAsUnread",
    value: function _countMessageAsUnread(message) {
      var _message$user, _message$user2, _this$data4, _this$data5;

      if (message.shadowed) return false;
      if (message.silent) return false;
      if (message.parent_id && !message.show_in_channel) return false;
      if (((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === this.getClient().userID) return false;
      if ((_message$user2 = message.user) !== null && _message$user2 !== void 0 && _message$user2.id && this.getClient().userMuteStatus(message.user.id)) return false; // Return false if channel doesn't allow read events.

      if (Array.isArray((_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.own_capabilities) && !((_this$data5 = this.data) !== null && _this$data5 !== void 0 && _this$data5.own_capabilities.includes('read-events'))) return false; // FIXME: see #1265, adjust and count new messages even when the channel is muted

      if (this.muteStatus().muted) return false;
      return true;
    }
    /**
     * countUnread - Count of unread messages
     *
     * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state
     *
     * @return {number} Unread count
     */

  }, {
    key: "countUnread",
    value: function countUnread(lastRead) {
      if (!lastRead) return this.state.unreadCount;
      var count = 0;

      for (var i = 0; i < this.state.latestMessages.length; i += 1) {
        var message = this.state.latestMessages[i];

        if (message.created_at > lastRead && this._countMessageAsUnread(message)) {
          count++;
        }
      }

      return count;
    }
    /**
     * countUnreadMentions - Count the number of unread messages mentioning the current user
     *
     * @return {number} Unread mentions count
     */

  }, {
    key: "countUnreadMentions",
    value: function countUnreadMentions() {
      var lastRead = this.lastRead();
      var userID = this.getClient().userID;
      var count = 0;

      for (var i = 0; i < this.state.latestMessages.length; i += 1) {
        var _message$mentioned_us;

        var message = this.state.latestMessages[i];

        if (this._countMessageAsUnread(message) && (!lastRead || message.created_at > lastRead) && (_message$mentioned_us = message.mentioned_users) !== null && _message$mentioned_us !== void 0 && _message$mentioned_us.some(function (user) {
          return user.id === userID;
        })) {
          count++;
        }
      }

      return count;
    }
    /**
     * create - Creates a new channel
     *
     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The Server Response
     *
     */

  }, {
    key: "query",
    value:
    /**
     * query - Query the API, get messages, members or other channel fields
     *
     * @param {ChannelQueryOptions<StreamChatGenerics>} options The query options
     * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings
     *
     * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} Returns a query response
     */
    function () {
      var _query = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee41(options) {
        var _options$messages$lim, _options$messages, _this$data6, _this$data7;

        var messageSetToAddToIfDoesNotExist,
            queryURL,
            state,
            tempChannelCid,
            _this$_initializeStat,
            messageSet,
            areCapabilitiesChanged,
            _args41 = arguments;

        return _regeneratorRuntime__default['default'].wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                messageSetToAddToIfDoesNotExist = _args41.length > 1 && _args41[1] !== undefined ? _args41[1] : 'current';
                _context41.next = 3;
                return this.getClient().wsPromise;

              case 3:
                queryURL = "".concat(this.getClient().baseURL, "/channels/").concat(encodeURIComponent(this.type));

                if (this.id) {
                  queryURL += "/".concat(encodeURIComponent(this.id));
                }

                _context41.next = 7;
                return this.getClient().post(queryURL + '/query', _objectSpread$c({
                  data: this._data,
                  state: true
                }, options));

              case 7:
                state = _context41.sent;

                // update the channel id if it was missing
                if (!this.id) {
                  this.id = state.channel.id;
                  this.cid = state.channel.cid; // set the channel as active...

                  tempChannelCid = generateChannelTempCid(this.type, state.members.map(function (member) {
                    var _member$user;

                    return member.user_id || ((_member$user = member.user) === null || _member$user === void 0 ? void 0 : _member$user.id) || '';
                  }));

                  if (tempChannelCid && tempChannelCid in this.getClient().activeChannels) {
                    // This gets set in `client.channel()` function, when channel is created
                    // using members, not id.
                    delete this.getClient().activeChannels[tempChannelCid];
                  }

                  if (!(this.cid in this.getClient().activeChannels) && this.getClient()._cacheEnabled()) {
                    this.getClient().activeChannels[this.cid] = this;
                  }
                }

                this.getClient()._addChannelConfig(state.channel); // add any messages to our channel state


                _this$_initializeStat = this._initializeState(state, messageSetToAddToIfDoesNotExist), messageSet = _this$_initializeStat.messageSet;
                messageSet.pagination = _objectSpread$c(_objectSpread$c({}, messageSet.pagination), messageSetPagination({
                  parentSet: messageSet,
                  messagePaginationOptions: options === null || options === void 0 ? void 0 : options.messages,
                  requestedPageSize: (_options$messages$lim = options === null || options === void 0 ? void 0 : (_options$messages = options.messages) === null || _options$messages === void 0 ? void 0 : _options$messages.limit) !== null && _options$messages$lim !== void 0 ? _options$messages$lim : DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE,
                  returnedPage: state.messages,
                  logger: this.getClient().logger
                }));
                this.getClient().polls.hydratePollCache(state.messages, true);
                areCapabilitiesChanged = _toConsumableArray__default['default'](state.channel.own_capabilities || []).sort().join() !== _toConsumableArray__default['default'](Array.isArray((_this$data6 = this.data) === null || _this$data6 === void 0 ? void 0 : _this$data6.own_capabilities) ? (_this$data7 = this.data) === null || _this$data7 === void 0 ? void 0 : _this$data7.own_capabilities : []).sort().join();
                this.data = state.channel;
                this.offlineMode = false;

                if (areCapabilitiesChanged) {
                  this.getClient().dispatchEvent({
                    type: 'capabilities.changed',
                    cid: this.cid,
                    own_capabilities: state.channel.own_capabilities
                  });
                }

                this.getClient().dispatchEvent({
                  type: 'channels.queried',
                  queriedChannels: {
                    channels: [state],
                    isLatestMessageSet: messageSet.isLatest
                  }
                });
                return _context41.abrupt("return", state);

              case 19:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));

      function query(_x41) {
        return _query.apply(this, arguments);
      }

      return query;
    }()
    /**
     * banUser - Bans a user from a channel
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<StreamChatGenerics>} options
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "banUser",
    value: function () {
      var _banUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee42(targetUserID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                this._checkInitialized();

                _context42.next = 3;
                return this.getClient().banUser(targetUserID, _objectSpread$c(_objectSpread$c({}, options), {}, {
                  type: this.type,
                  id: this.id
                }));

              case 3:
                return _context42.abrupt("return", _context42.sent);

              case 4:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));

      function banUser(_x42, _x43) {
        return _banUser.apply(this, arguments);
      }

      return banUser;
    }()
    /**
     * hides the channel from queryChannels for the user until a message is added
     * If clearHistory is set to true - all messages will be removed for the user
     *
     * @param {string | null} userId
     * @param {boolean} clearHistory
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "hide",
    value: function () {
      var _hide = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee43() {
        var userId,
            clearHistory,
            _args43 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                userId = _args43.length > 0 && _args43[0] !== undefined ? _args43[0] : null;
                clearHistory = _args43.length > 1 && _args43[1] !== undefined ? _args43[1] : false;

                this._checkInitialized();

                _context43.next = 5;
                return this.getClient().post("".concat(this._channelURL(), "/hide"), {
                  user_id: userId,
                  clear_history: clearHistory
                });

              case 5:
                return _context43.abrupt("return", _context43.sent);

              case 6:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));

      function hide() {
        return _hide.apply(this, arguments);
      }

      return hide;
    }()
    /**
     * removes the hidden status for a channel
     *
     * @param {string | null} userId
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "show",
    value: function () {
      var _show = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee44() {
        var userId,
            _args44 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                userId = _args44.length > 0 && _args44[0] !== undefined ? _args44[0] : null;

                this._checkInitialized();

                _context44.next = 4;
                return this.getClient().post("".concat(this._channelURL(), "/show"), {
                  user_id: userId
                });

              case 4:
                return _context44.abrupt("return", _context44.sent);

              case 5:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));

      function show() {
        return _show.apply(this, arguments);
      }

      return show;
    }()
    /**
     * unbanUser - Removes the bans for a user on a channel
     *
     * @param {string} targetUserID
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unbanUser",
    value: function () {
      var _unbanUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee45(targetUserID) {
        return _regeneratorRuntime__default['default'].wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                this._checkInitialized();

                _context45.next = 3;
                return this.getClient().unbanUser(targetUserID, {
                  type: this.type,
                  id: this.id
                });

              case 3:
                return _context45.abrupt("return", _context45.sent);

              case 4:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      function unbanUser(_x44) {
        return _unbanUser.apply(this, arguments);
      }

      return unbanUser;
    }()
    /**
     * shadowBan - Shadow bans a user from a channel
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<StreamChatGenerics>} options
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "shadowBan",
    value: function () {
      var _shadowBan = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee46(targetUserID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                this._checkInitialized();

                _context46.next = 3;
                return this.getClient().shadowBan(targetUserID, _objectSpread$c(_objectSpread$c({}, options), {}, {
                  type: this.type,
                  id: this.id
                }));

              case 3:
                return _context46.abrupt("return", _context46.sent);

              case 4:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, this);
      }));

      function shadowBan(_x45, _x46) {
        return _shadowBan.apply(this, arguments);
      }

      return shadowBan;
    }()
    /**
     * removeShadowBan - Removes the shadow ban for a user on a channel
     *
     * @param {string} targetUserID
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "removeShadowBan",
    value: function () {
      var _removeShadowBan = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee47(targetUserID) {
        return _regeneratorRuntime__default['default'].wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                this._checkInitialized();

                _context47.next = 3;
                return this.getClient().removeShadowBan(targetUserID, {
                  type: this.type,
                  id: this.id
                });

              case 3:
                return _context47.abrupt("return", _context47.sent);

              case 4:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47, this);
      }));

      function removeShadowBan(_x47) {
        return _removeShadowBan.apply(this, arguments);
      }

      return removeShadowBan;
    }()
    /**
     * createCall - creates a call for the current channel
     *
     * @param {CreateCallOptions} options
     * @returns {Promise<CreateCallResponse>}
     */

  }, {
    key: "createCall",
    value: function () {
      var _createCall = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee48(options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                _context48.next = 2;
                return this.getClient().post(this._channelURL() + '/call', options);

              case 2:
                return _context48.abrupt("return", _context48.sent);

              case 3:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));

      function createCall(_x48) {
        return _createCall.apply(this, arguments);
      }

      return createCall;
    }()
    /**
     * Cast or cancel one or more votes on a poll
     * @param pollId string The poll id
     * @param votes PollVoteData[] The votes that will be casted (or canceled in case of an empty array)
     * @returns {APIResponse & PollVoteResponse} The poll votes
     */

  }, {
    key: "vote",
    value: function () {
      var _vote2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee49(messageId, pollId, _vote) {
        return _regeneratorRuntime__default['default'].wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                _context49.next = 2;
                return this.getClient().castPollVote(messageId, pollId, _vote);

              case 2:
                return _context49.abrupt("return", _context49.sent);

              case 3:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49, this);
      }));

      function vote(_x49, _x50, _x51) {
        return _vote2.apply(this, arguments);
      }

      return vote;
    }()
  }, {
    key: "removeVote",
    value: function () {
      var _removeVote = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee50(messageId, pollId, voteId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                _context50.next = 2;
                return this.getClient().removePollVote(messageId, pollId, voteId);

              case 2:
                return _context50.abrupt("return", _context50.sent);

              case 3:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50, this);
      }));

      function removeVote(_x52, _x53, _x54) {
        return _removeVote.apply(this, arguments);
      }

      return removeVote;
    }()
    /**
     * createDraft - Creates or updates a draft message in a channel
     *
     * @param {string} channelType The channel type
     * @param {string} channelID The channel ID
     * @param {DraftMessagePayload<StreamChatGenerics>} message The draft message to create or update
     *
     * @return {Promise<CreateDraftResponse<StreamChatGenerics>>} Response containing the created draft
     */

  }, {
    key: "createDraft",
    value: function () {
      var _createDraft = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee51(message) {
        return _regeneratorRuntime__default['default'].wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                _context51.next = 2;
                return this.getClient().post(this._channelURL() + '/draft', {
                  message: message
                });

              case 2:
                return _context51.abrupt("return", _context51.sent);

              case 3:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51, this);
      }));

      function createDraft(_x55) {
        return _createDraft.apply(this, arguments);
      }

      return createDraft;
    }()
    /**
     * deleteDraft - Deletes a draft message from a channel
     *
     * @param {Object} options
     * @param {string} options.parent_id Optional parent message ID for drafts in threads
     *
     * @return {Promise<APIResponse>} API response
     */

  }, {
    key: "deleteDraft",
    value: function () {
      var _deleteDraft = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee52() {
        var _ref2,
            parent_id,
            _args52 = arguments;

        return _regeneratorRuntime__default['default'].wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                _ref2 = _args52.length > 0 && _args52[0] !== undefined ? _args52[0] : {}, parent_id = _ref2.parent_id;
                _context52.next = 3;
                return this.getClient().delete(this._channelURL() + '/draft', {
                  parent_id: parent_id
                });

              case 3:
                return _context52.abrupt("return", _context52.sent);

              case 4:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52, this);
      }));

      function deleteDraft() {
        return _deleteDraft.apply(this, arguments);
      }

      return deleteDraft;
    }()
    /**
     * getDraft - Retrieves a draft message from a channel
     *
     * @param {Object} options
     * @param {string} options.parent_id Optional parent message ID for drafts in threads
     *
     * @return {Promise<GetDraftResponse<StreamChatGenerics>>} Response containing the draft
     */

  }, {
    key: "getDraft",
    value: function () {
      var _getDraft = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee53() {
        var _ref3,
            parent_id,
            _args53 = arguments;

        return _regeneratorRuntime__default['default'].wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                _ref3 = _args53.length > 0 && _args53[0] !== undefined ? _args53[0] : {}, parent_id = _ref3.parent_id;
                _context53.next = 3;
                return this.getClient().get(this._channelURL() + '/draft', {
                  parent_id: parent_id
                });

              case 3:
                return _context53.abrupt("return", _context53.sent);

              case 4:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53, this);
      }));

      function getDraft() {
        return _getDraft.apply(this, arguments);
      }

      return getDraft;
    }()
    /**
     * on - Listen to events on this channel.
     *
     * channel.on('message.new', event => {console.log("my new message", event, channel.state.messages)})
     * or
     * channel.on(event => {console.log(event.type)})
     *
     * @param {EventHandler<StreamChatGenerics> | EventTypes} callbackOrString  The event type to listen for (optional)
     * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call
     */

  }, {
    key: "on",
    value: function on(callbackOrString, callbackOrNothing) {
      var _this2 = this;

      var key = callbackOrNothing ? callbackOrString : 'all';
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this._client.logger('info', "Attaching listener for ".concat(key, " event on channel ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      this.listeners[key].push(callback);
      return {
        unsubscribe: function unsubscribe() {
          _this2._client.logger('info', "Removing listener for ".concat(key, " event from channel ").concat(_this2.cid), {
            tags: ['event', 'channel'],
            channel: _this2
          });

          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {
            return el !== callback;
          });
        }
      };
    }
    /**
     * off - Remove the event handler
     *
     */

  }, {
    key: "off",
    value: function off(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : 'all';
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this._client.logger('info', "Removing listener for ".concat(key, " event from channel ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      this.listeners[key] = this.listeners[key].filter(function (value) {
        return value !== callback;
      });
    } // eslint-disable-next-line sonarjs/cognitive-complexity

  }, {
    key: "_handleChannelEvent",
    value: function _handleChannelEvent(event) {
      var _event$user, _event$user2, _event$user3, _event$user5, _event$user6, _event$channel, _event$user9, _event$user11, _channelState$members, _event$user12, _channelState$members2;

      var channel = this;

      this._client.logger('info', "channel:_handleChannelEvent - Received event of type { ".concat(event.type, " } on ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      var channelState = channel.state;

      switch (event.type) {
        case 'typing.start':
          if ((_event$user = event.user) !== null && _event$user !== void 0 && _event$user.id) {
            channelState.typing[event.user.id] = event;
          }

          break;

        case 'typing.stop':
          if ((_event$user2 = event.user) !== null && _event$user2 !== void 0 && _event$user2.id) {
            delete channelState.typing[event.user.id];
          }

          break;

        case 'message.read':
          if ((_event$user3 = event.user) !== null && _event$user3 !== void 0 && _event$user3.id && event.created_at) {
            var _event$user4, _this$getClient$user2;

            channelState.read[event.user.id] = {
              last_read: new Date(event.created_at),
              last_read_message_id: event.last_read_message_id,
              user: event.user,
              unread_messages: 0
            };

            if (((_event$user4 = event.user) === null || _event$user4 === void 0 ? void 0 : _event$user4.id) === ((_this$getClient$user2 = this.getClient().user) === null || _this$getClient$user2 === void 0 ? void 0 : _this$getClient$user2.id)) {
              channelState.unreadCount = 0;
            }
          }

          break;

        case 'user.watching.start':
        case 'user.updated':
          if ((_event$user5 = event.user) !== null && _event$user5 !== void 0 && _event$user5.id) {
            channelState.watchers[event.user.id] = event.user;
          }

          break;

        case 'user.watching.stop':
          if ((_event$user6 = event.user) !== null && _event$user6 !== void 0 && _event$user6.id) {
            delete channelState.watchers[event.user.id];
          }

          break;

        case 'message.deleted':
          if (event.message) {
            this._extendEventWithOwnReactions(event);

            if (event.hard_delete) channelState.removeMessage(event.message);else channelState.addMessageSorted(event.message, false, false);
            channelState.removeQuotedMessageReferences(event.message);

            if (event.message.pinned) {
              channelState.removePinnedMessage(event.message);
            }
          }

          break;

        case 'message.new':
          if (event.message) {
            var _event$user7, _this$getClient$user3, _event$user8;

            /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */
            var ownMessage = ((_event$user7 = event.user) === null || _event$user7 === void 0 ? void 0 : _event$user7.id) === ((_this$getClient$user3 = this.getClient().user) === null || _this$getClient$user3 === void 0 ? void 0 : _this$getClient$user3.id);
            var isThreadMessage = event.message.parent_id && !event.message.show_in_channel;

            if (this.state.isUpToDate || isThreadMessage) {
              channelState.addMessageSorted(event.message, ownMessage);
            }

            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            } // do not increase the unread count - the back-end does not increase the count neither in the following cases:
            // 1. the message is mine
            // 2. the message is a thread reply from any user


            var preventUnreadCountUpdate = ownMessage || isThreadMessage;
            if (preventUnreadCountUpdate) break;

            if ((_event$user8 = event.user) !== null && _event$user8 !== void 0 && _event$user8.id) {
              for (var userId in channelState.read) {
                if (userId === event.user.id) {
                  channelState.read[event.user.id] = {
                    last_read: new Date(event.created_at),
                    user: event.user,
                    unread_messages: 0
                  };
                } else {
                  channelState.read[userId].unread_messages += 1;
                }
              }
            }

            if (this._countMessageAsUnread(event.message)) {
              channelState.unreadCount = channelState.unreadCount + 1;
            }
          }

          break;

        case 'message.updated':
        case 'message.undeleted':
          if (event.message) {
            this._extendEventWithOwnReactions(event);

            channelState.addMessageSorted(event.message, false, false);

            channelState._updateQuotedMessageReferences({
              message: event.message
            });

            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            } else {
              channelState.removePinnedMessage(event.message);
            }
          }

          break;

        case 'channel.truncated':
          if ((_event$channel = event.channel) !== null && _event$channel !== void 0 && _event$channel.truncated_at) {
            var truncatedAt = +new Date(event.channel.truncated_at);
            channelState.messageSets.forEach(function (messageSet, messageSetIndex) {
              messageSet.messages.forEach(function (_ref4) {
                var createdAt = _ref4.created_at,
                    id = _ref4.id;
                if (truncatedAt > +createdAt) channelState.removeMessage({
                  id: id,
                  messageSetIndex: messageSetIndex
                });
              });
            });
            channelState.pinnedMessages.forEach(function (_ref5) {
              var id = _ref5.id,
                  createdAt = _ref5.created_at;
              if (truncatedAt > +createdAt) channelState.removePinnedMessage({
                id: id
              });
            });
          } else {
            channelState.clearMessages();
          }

          channelState.unreadCount = 0; // system messages don't increment unread counts

          if (event.message) {
            channelState.addMessageSorted(event.message);

            if (event.message.pinned) {
              channelState.addPinnedMessage(event.message);
            }
          }

          break;

        case 'member.added':
        case 'member.updated':
          {
            var _memberCopy$user;

            var memberCopy = _objectSpread$c({}, event.member);

            if (memberCopy.pinned_at === null) {
              delete memberCopy.pinned_at;
            }

            if (memberCopy.archived_at === null) {
              delete memberCopy.archived_at;
            }

            if (memberCopy !== null && memberCopy !== void 0 && memberCopy.user) {
              channelState.members = _objectSpread$c(_objectSpread$c({}, channelState.members), {}, _defineProperty__default['default']({}, memberCopy.user.id, memberCopy));
            }

            var currentUserId = this.getClient().userID;

            if (typeof currentUserId === 'string' && typeof (memberCopy === null || memberCopy === void 0 ? void 0 : (_memberCopy$user = memberCopy.user) === null || _memberCopy$user === void 0 ? void 0 : _memberCopy$user.id) === 'string' && memberCopy.user.id === currentUserId) {
              channelState.membership = memberCopy;
            }

            break;
          }

        case 'member.removed':
          if ((_event$user9 = event.user) !== null && _event$user9 !== void 0 && _event$user9.id) {
            var newMembers = _objectSpread$c({}, channelState.members);

            delete newMembers[event.user.id];
            channelState.members = newMembers; // TODO?: unset membership
          }

          break;

        case 'notification.mark_unread':
          {
            var _event$user10, _this$getClient$user4, _event$unread_message;

            var _ownMessage = ((_event$user10 = event.user) === null || _event$user10 === void 0 ? void 0 : _event$user10.id) === ((_this$getClient$user4 = this.getClient().user) === null || _this$getClient$user4 === void 0 ? void 0 : _this$getClient$user4.id);

            if (!(_ownMessage && event.user)) break;
            var unreadCount = (_event$unread_message = event.unread_messages) !== null && _event$unread_message !== void 0 ? _event$unread_message : 0;
            channelState.read[event.user.id] = {
              first_unread_message_id: event.first_unread_message_id,
              last_read: new Date(event.last_read_at),
              last_read_message_id: event.last_read_message_id,
              user: event.user,
              unread_messages: unreadCount
            };
            channelState.unreadCount = unreadCount;
            break;
          }

        case 'channel.updated':
          if (event.channel) {
            var _event$channel2, _channel$data, _event$channel$hidden, _event$channel3, _channel$data2, _event$channel$own_ca, _event$channel4, _channel$data3;

            var isFrozenChanged = ((_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.frozen) !== undefined && event.channel.frozen !== ((_channel$data = channel.data) === null || _channel$data === void 0 ? void 0 : _channel$data.frozen);

            if (isFrozenChanged) {
              this.query({
                state: false,
                messages: {
                  limit: 0
                },
                watchers: {
                  limit: 0
                }
              });
            }

            channel.data = _objectSpread$c(_objectSpread$c({}, event.channel), {}, {
              hidden: (_event$channel$hidden = (_event$channel3 = event.channel) === null || _event$channel3 === void 0 ? void 0 : _event$channel3.hidden) !== null && _event$channel$hidden !== void 0 ? _event$channel$hidden : (_channel$data2 = channel.data) === null || _channel$data2 === void 0 ? void 0 : _channel$data2.hidden,
              own_capabilities: (_event$channel$own_ca = (_event$channel4 = event.channel) === null || _event$channel4 === void 0 ? void 0 : _event$channel4.own_capabilities) !== null && _event$channel$own_ca !== void 0 ? _event$channel$own_ca : (_channel$data3 = channel.data) === null || _channel$data3 === void 0 ? void 0 : _channel$data3.own_capabilities
            });
          }

          break;

        case 'reaction.new':
          if (event.message && event.reaction) {
            event.message = channelState.addReaction(event.reaction, event.message);
          }

          break;

        case 'reaction.deleted':
          if (event.reaction) {
            event.message = channelState.removeReaction(event.reaction, event.message);
          }

          break;

        case 'reaction.updated':
          if (event.reaction) {
            // assuming reaction.updated is only called if enforce_unique is true
            event.message = channelState.addReaction(event.reaction, event.message, true);
          }

          break;

        case 'channel.hidden':
          channel.data = _objectSpread$c(_objectSpread$c({}, channel.data), {}, {
            hidden: true
          });

          if (event.clear_history) {
            channelState.clearMessages();
          }

          break;

        case 'channel.visible':
          channel.data = _objectSpread$c(_objectSpread$c({}, channel.data), {}, {
            hidden: false
          });
          break;

        case 'user.banned':
          if (!((_event$user11 = event.user) !== null && _event$user11 !== void 0 && _event$user11.id)) break;
          channelState.members[event.user.id] = _objectSpread$c(_objectSpread$c({}, channelState.members[event.user.id] || {}), {}, {
            shadow_banned: !!event.shadow,
            banned: !event.shadow,
            user: _objectSpread$c(_objectSpread$c({}, ((_channelState$members = channelState.members[event.user.id]) === null || _channelState$members === void 0 ? void 0 : _channelState$members.user) || {}), event.user)
          });
          break;

        case 'user.unbanned':
          if (!((_event$user12 = event.user) !== null && _event$user12 !== void 0 && _event$user12.id)) break;
          channelState.members[event.user.id] = _objectSpread$c(_objectSpread$c({}, channelState.members[event.user.id] || {}), {}, {
            shadow_banned: false,
            banned: false,
            user: _objectSpread$c(_objectSpread$c({}, ((_channelState$members2 = channelState.members[event.user.id]) === null || _channelState$members2 === void 0 ? void 0 : _channelState$members2.user) || {}), event.user)
          });
          break;
      } // any event can send over the online count


      if (event.watcher_count !== undefined) {
        channel.state.watcher_count = event.watcher_count;
      }
    }
  }, {
    key: "_checkInitialized",
    value: function _checkInitialized() {
      if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {
        throw Error("Channel ".concat(this.cid, " hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve"));
      }
    } // eslint-disable-next-line sonarjs/cognitive-complexity

  }, {
    key: "_initializeState",
    value: function _initializeState(state) {
      var messageSetToAddToIfDoesNotExist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';

      var _this$getClient2 = this.getClient(),
          clientState = _this$getClient2.state,
          user = _this$getClient2.user,
          userID = _this$getClient2.userID; // add the members and users


      if (state.members) {
        this._hydrateMembers({
          members: state.members
        });

        var _iterator = _createForOfIteratorHelper$4(state.members),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var member = _step.value;

            if (member.user) {
              clientState.updateUserReference(member.user, this.cid);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      this.state.membership = state.membership || {};
      var messages = state.messages || [];

      if (!this.state.messages) {
        this.state.initMessages();
      }

      var _this$state$addMessag = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist),
          messageSet = _this$state$addMessag.messageSet;

      if (!this.state.pinnedMessages) {
        this.state.pinnedMessages = [];
      }

      this.state.addPinnedMessages(state.pinned_messages || []);

      if (state.pending_messages) {
        this.state.pending_messages = state.pending_messages;
      }

      if (state.watcher_count !== undefined) {
        this.state.watcher_count = state.watcher_count;
      } // convert the arrays into objects for easier syncing...


      if (state.watchers) {
        var _iterator2 = _createForOfIteratorHelper$4(state.watchers),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var watcher = _step2.value;

            if (watcher) {
              clientState.updateUserReference(watcher, this.cid);
              this.state.watchers[watcher.id] = watcher;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } // initialize read state to last message or current time if the channel is empty
      // if the user is a member, this value will be overwritten later on otherwise this ensures
      // that everything up to this point is not marked as unread


      if (userID != null) {
        var last_read = this.state.last_message_at || new Date();

        if (user) {
          this.state.read[user.id] = {
            user: user,
            last_read: last_read,
            unread_messages: 0
          };
        }
      } // apply read state if part of the state


      if (state.read) {
        var _iterator3 = _createForOfIteratorHelper$4(state.read),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _read$unread_messages;

            var read = _step3.value;
            this.state.read[read.user.id] = {
              last_read: new Date(read.last_read),
              last_read_message_id: read.last_read_message_id,
              unread_messages: (_read$unread_messages = read.unread_messages) !== null && _read$unread_messages !== void 0 ? _read$unread_messages : 0,
              user: read.user
            };

            if (read.user.id === (user === null || user === void 0 ? void 0 : user.id)) {
              this.state.unreadCount = this.state.read[read.user.id].unread_messages;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      return {
        messageSet: messageSet
      };
    }
  }, {
    key: "_extendEventWithOwnReactions",
    value: function _extendEventWithOwnReactions(event) {
      if (!event.message) {
        return;
      }

      var message = this.state.findMessage(event.message.id, event.message.parent_id);

      if (message) {
        event.message.own_reactions = message.own_reactions;
      }
    }
  }, {
    key: "_hydrateMembers",
    value: function _hydrateMembers(_ref6) {
      var members = _ref6.members,
          _ref6$overrideCurrent = _ref6.overrideCurrentState,
          overrideCurrentState = _ref6$overrideCurrent === void 0 ? true : _ref6$overrideCurrent;
      var newMembersById = members.reduce(function (membersById, member) {
        if (member.user) {
          membersById[member.user.id] = member;
        }

        return membersById;
      }, {});

      if (overrideCurrentState) {
        this.state.members = newMembersById;
      } else if (!overrideCurrentState && members.length) {
        this.state.members = _objectSpread$c(_objectSpread$c({}, this.state.members), newMembersById);
      }
    }
  }, {
    key: "_disconnect",
    value: function _disconnect() {
      this._client.logger('info', "channel:disconnect() - Disconnecting the channel ".concat(this.cid), {
        tags: ['connection', 'channel'],
        channel: this
      });

      this.disconnected = true;
      this.state.setIsUpToDate(false);
    }
  }]);

  return Channel;
}();

function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * ClientState - A container class for the client state.
 */
var ClientState = /*#__PURE__*/function () {
  function ClientState(_ref) {
    var client = _ref.client;

    _classCallCheck__default['default'](this, ClientState);

    _defineProperty__default['default'](this, "client", void 0);

    _defineProperty__default['default'](this, "users", void 0);

    _defineProperty__default['default'](this, "userChannelReferences", void 0);

    // show the status for a certain user...
    // ie online, offline etc
    this.client = client;
    this.users = {}; // store which channels contain references to the specified user...

    this.userChannelReferences = {};
  }

  _createClass__default['default'](ClientState, [{
    key: "updateUsers",
    value: function updateUsers(users) {
      var _iterator = _createForOfIteratorHelper$3(users),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var user = _step.value;
          this.updateUser(user);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "updateUser",
    value: function updateUser(user) {
      if (user != null && this.client._cacheEnabled()) {
        this.users[user.id] = user;
      }
    }
  }, {
    key: "updateUserReference",
    value: function updateUserReference(user, channelID) {
      if (user == null || !this.client._cacheEnabled()) {
        return;
      }

      this.updateUser(user);

      if (!this.userChannelReferences[user.id]) {
        this.userChannelReferences[user.id] = {};
      }

      this.userChannelReferences[user.id][channelID] = true;
    }
  }, {
    key: "deleteAllChannelReference",
    value: function deleteAllChannelReference(channelID) {
      for (var userID in this.userChannelReferences) {
        delete this.userChannelReferences[userID][channelID];
      }
    }
  }]);

  return ClientState;
}();

function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var InsightMetrics = function InsightMetrics() {
  _classCallCheck__default['default'](this, InsightMetrics);

  _defineProperty__default['default'](this, "connectionStartTimestamp", void 0);

  _defineProperty__default['default'](this, "wsConsecutiveFailures", void 0);

  _defineProperty__default['default'](this, "wsTotalFailures", void 0);

  _defineProperty__default['default'](this, "instanceClientId", void 0);

  this.connectionStartTimestamp = null;
  this.wsTotalFailures = 0;
  this.wsConsecutiveFailures = 0;
  this.instanceClientId = randomId();
};
/**
 * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated
 * from all the client/connection code/logic.
 *
 * @param insightType
 * @param insights
 */

var postInsights = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(insightType, insights) {
    var maxAttempts, i;
    return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            maxAttempts = 3;
            i = 0;

          case 2:
            if (!(i < maxAttempts)) {
              _context.next = 17;
              break;
            }

            _context.prev = 3;
            _context.next = 6;
            return axios__default['default'].post("https://chat-insights.getstream.io/insights/".concat(insightType), insights);

          case 6:
            _context.next = 13;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](3);
            _context.next = 12;
            return sleep((i + 1) * 3000);

          case 12:
            return _context.abrupt("continue", 14);

          case 13:
            return _context.abrupt("break", 17);

          case 14:
            i++;
            _context.next = 2;
            break;

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 8]]);
  }));

  return function postInsights(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
function buildWsFatalInsight(connection, event) {
  return _objectSpread$b(_objectSpread$b({}, event), buildWsBaseInsight(connection));
}

function buildWsBaseInsight(connection) {
  var _connection$ws, _navigator, _navigator2;

  var client = connection.client;
  return {
    ready_state: (_connection$ws = connection.ws) === null || _connection$ws === void 0 ? void 0 : _connection$ws.readyState,
    url: connection._buildUrl(),
    api_key: client.key,
    start_ts: client.insightMetrics.connectionStartTimestamp,
    end_ts: new Date().getTime(),
    auth_type: client.getAuthType(),
    token: client.tokenManager.token,
    user_id: client.userID,
    user_details: client._user,
    device: client.options.device,
    client_id: connection.connectionID,
    ws_details: connection.ws,
    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,
    ws_total_failures: client.insightMetrics.wsTotalFailures,
    request_id: connection.requestID,
    online: typeof navigator !== 'undefined' ? (_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine : null,
    user_agent: typeof navigator !== 'undefined' ? (_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : _navigator2.userAgent : null,
    instance_client_id: client.insightMetrics.instanceClientId
  };
}

function buildWsSuccessAfterFailureInsight(connection) {
  return buildWsBaseInsight(connection);
}

function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Type guards to check WebSocket error type
var isCloseEvent = function isCloseEvent(res) {
  return res.code !== undefined;
};

var isErrorEvent = function isErrorEvent(res) {
  return res.error !== undefined;
};
/**
 * StableWSConnection - A WS connection that reconnects upon failure.
 * - the browser will sometimes report that you're online or offline
 * - the WS connection can break and fail (there is a 30s health check)
 * - sometimes your WS connection will seem to work while the user is in fact offline
 * - to speed up online/offline detection you can use the window.addEventListener('offline');
 *
 * There are 4 ways in which a connection can become unhealthy:
 * - websocket.onerror is called
 * - websocket.onclose is called
 * - the health check fails and no event is received for ~40 seconds
 * - the browser indicates the connection is now offline
 *
 * There are 2 assumptions we make about the server:
 * - state can be recovered by querying the channel again
 * - if the servers fails to publish a message to the client, the WS connection is destroyed
 */


var StableWSConnection = /*#__PURE__*/function () {
  // global from constructor
  // local vars
  function StableWSConnection(_ref) {
    var _this = this;

    var client = _ref.client;

    _classCallCheck__default['default'](this, StableWSConnection);

    _defineProperty__default['default'](this, "client", void 0);

    _defineProperty__default['default'](this, "connectionID", void 0);

    _defineProperty__default['default'](this, "connectionOpen", void 0);

    _defineProperty__default['default'](this, "consecutiveFailures", void 0);

    _defineProperty__default['default'](this, "pingInterval", void 0);

    _defineProperty__default['default'](this, "healthCheckTimeoutRef", void 0);

    _defineProperty__default['default'](this, "isConnecting", void 0);

    _defineProperty__default['default'](this, "isDisconnected", void 0);

    _defineProperty__default['default'](this, "isHealthy", void 0);

    _defineProperty__default['default'](this, "isResolved", void 0);

    _defineProperty__default['default'](this, "lastEvent", void 0);

    _defineProperty__default['default'](this, "connectionCheckTimeout", void 0);

    _defineProperty__default['default'](this, "connectionCheckTimeoutRef", void 0);

    _defineProperty__default['default'](this, "rejectPromise", void 0);

    _defineProperty__default['default'](this, "requestID", void 0);

    _defineProperty__default['default'](this, "resolvePromise", void 0);

    _defineProperty__default['default'](this, "totalFailures", void 0);

    _defineProperty__default['default'](this, "ws", void 0);

    _defineProperty__default['default'](this, "wsID", void 0);

    _defineProperty__default['default'](this, "_buildUrl", function () {
      var qs = _this.client._buildWSPayload(_this.requestID);

      var token = _this.client.tokenManager.getToken();

      var wsUrlParams = _this.client.options.wsUrlParams;
      var params = new URLSearchParams(wsUrlParams);
      params.set('json', qs);
      params.set('api_key', _this.client.key); // it is expected that the autorization parameter exists even if
      // the token is undefined, so we interpolate it to be safe

      params.set('authorization', "".concat(token));
      params.set('stream-auth-type', _this.client.getAuthType());
      params.set('X-Stream-Client', _this.client.getUserAgent());
      return "".concat(_this.client.wsBaseURL, "/connect?").concat(params.toString());
    });

    _defineProperty__default['default'](this, "onlineStatusChanged", function (event) {
      if (event.type === 'offline') {
        // mark the connection as down
        _this._log('onlineStatusChanged() - Status changing to offline');

        _this._setHealth(false);
      } else if (event.type === 'online') {
        // retry right now...
        // We check this.isHealthy, not sure if it's always
        // smart to create a new WS connection if the old one is still up and running.
        // it's possible we didn't miss any messages, so this process is just expensive and not needed.
        _this._log("onlineStatusChanged() - Status changing to online. isHealthy: ".concat(_this.isHealthy));

        if (!_this.isHealthy) {
          _this._reconnect({
            interval: 10
          });
        }
      }
    });

    _defineProperty__default['default'](this, "onopen", function (wsID) {
      if (_this.wsID !== wsID) return;

      _this._log('onopen() - onopen callback', {
        wsID: wsID
      });
    });

    _defineProperty__default['default'](this, "onmessage", function (wsID, event) {
      if (_this.wsID !== wsID) return;

      _this._log('onmessage() - onmessage callback', {
        event: event,
        wsID: wsID
      });

      var data = typeof event.data === 'string' ? JSON.parse(event.data) : null; // we wait till the first message before we consider the connection open..
      // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately
      // after that a ws.onclose..

      if (!_this.isResolved && data) {
        var _this$resolvePromise;

        _this.isResolved = true;

        if (data.error) {
          var _this$rejectPromise;

          (_this$rejectPromise = _this.rejectPromise) === null || _this$rejectPromise === void 0 ? void 0 : _this$rejectPromise.call(_this, _this._errorFromWSEvent(data, false));
          return;
        }

        (_this$resolvePromise = _this.resolvePromise) === null || _this$resolvePromise === void 0 ? void 0 : _this$resolvePromise.call(_this, data);

        _this._setHealth(true);
      } // trigger the event..


      _this.lastEvent = new Date();

      if (data && data.type === 'health.check') {
        _this.scheduleNextPing();
      }

      _this.client.handleEvent(event);

      _this.scheduleConnectionCheck();
    });

    _defineProperty__default['default'](this, "onclose", function (wsID, event) {
      if (_this.wsID !== wsID) return;

      _this._log('onclose() - onclose callback - ' + event.code, {
        event: event,
        wsID: wsID
      });

      if (event.code === chatCodes.WS_CLOSED_SUCCESS) {
        var _this$rejectPromise2;

        // this is a permanent error raised by stream..
        // usually caused by invalid auth details
        var error = new Error("WS connection reject with error ".concat(event.reason));
        error.reason = event.reason;
        error.code = event.code;
        error.wasClean = event.wasClean;
        error.target = event.target;
        (_this$rejectPromise2 = _this.rejectPromise) === null || _this$rejectPromise2 === void 0 ? void 0 : _this$rejectPromise2.call(_this, error);

        _this._log("onclose() - WS connection reject with error ".concat(event.reason), {
          event: event
        });
      } else {
        var _this$rejectPromise3;

        _this.consecutiveFailures += 1;
        _this.totalFailures += 1;

        _this._setHealth(false);

        _this.isConnecting = false;
        (_this$rejectPromise3 = _this.rejectPromise) === null || _this$rejectPromise3 === void 0 ? void 0 : _this$rejectPromise3.call(_this, _this._errorFromWSEvent(event));

        _this._log("onclose() - WS connection closed. Calling reconnect ...", {
          event: event
        }); // reconnect if its an abnormal failure


        _this._reconnect();
      }
    });

    _defineProperty__default['default'](this, "onerror", function (wsID, event) {
      var _this$rejectPromise4;

      if (_this.wsID !== wsID) return;
      _this.consecutiveFailures += 1;
      _this.totalFailures += 1;

      _this._setHealth(false);

      _this.isConnecting = false;
      (_this$rejectPromise4 = _this.rejectPromise) === null || _this$rejectPromise4 === void 0 ? void 0 : _this$rejectPromise4.call(_this, _this._errorFromWSEvent(event));

      _this._log("onerror() - WS connection resulted into error", {
        event: event
      });

      _this._reconnect();
    });

    _defineProperty__default['default'](this, "_setHealth", function (healthy) {
      if (healthy === _this.isHealthy) return;
      _this.isHealthy = healthy;

      if (_this.isHealthy) {
        _this.client.dispatchEvent({
          type: 'connection.changed',
          online: _this.isHealthy
        });

        return;
      } // we're offline, wait few seconds and fire and event if still offline


      setTimeout(function () {
        if (_this.isHealthy) return;

        _this.client.dispatchEvent({
          type: 'connection.changed',
          online: _this.isHealthy
        });
      }, 5000);
    });

    _defineProperty__default['default'](this, "_errorFromWSEvent", function (event) {
      var isWSFailure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var code;
      var statusCode;
      var message;

      if (isCloseEvent(event)) {
        code = event.code;
        statusCode = 'unknown';
        message = event.reason;
      }

      if (isErrorEvent(event)) {
        code = event.error.code;
        statusCode = event.error.StatusCode;
        message = event.error.message;
      } // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.


      _this._log("_errorFromWSEvent() - WS failed with code ".concat(code), {
        event: event
      }, 'warn');

      var error = new Error("WS failed with code ".concat(code, " and reason - ").concat(message));
      error.code = code;
      /**
       * StatusCode does not exist on any event types but has been left
       * as is to preserve JS functionality during the TS implementation
       */

      error.StatusCode = statusCode;
      error.isWSFailure = isWSFailure;
      return error;
    });

    _defineProperty__default['default'](this, "_setupConnectionPromise", function () {
      _this.isResolved = false;
      /** a promise that is resolved once ws.open is called */

      _this.connectionOpen = new Promise(function (resolve, reject) {
        _this.resolvePromise = resolve;
        _this.rejectPromise = reject;
      });
    });

    _defineProperty__default['default'](this, "scheduleNextPing", function () {
      if (_this.healthCheckTimeoutRef) {
        clearTimeout(_this.healthCheckTimeoutRef);
      } // 30 seconds is the recommended interval (messenger uses this)


      _this.healthCheckTimeoutRef = setTimeout(function () {
        // send the healthcheck.., server replies with a health check event
        var data = [{
          type: 'health.check',
          client_id: _this.client.clientID
        }]; // try to send on the connection

        try {
          var _this$ws;

          (_this$ws = _this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.send(JSON.stringify(data));
        } catch (e) {// error will already be detected elsewhere
        }
      }, _this.pingInterval);
    });

    _defineProperty__default['default'](this, "scheduleConnectionCheck", function () {
      if (_this.connectionCheckTimeoutRef) {
        clearTimeout(_this.connectionCheckTimeoutRef);
      }

      _this.connectionCheckTimeoutRef = setTimeout(function () {
        var now = new Date();

        if (_this.lastEvent && now.getTime() - _this.lastEvent.getTime() > _this.connectionCheckTimeout) {
          _this._log('scheduleConnectionCheck - going to reconnect');

          _this._setHealth(false);

          _this._reconnect();
        }
      }, _this.connectionCheckTimeout);
    });

    /** StreamChat client */
    this.client = client;
    /** consecutive failures influence the duration of the timeout */

    this.consecutiveFailures = 0;
    /** keep track of the total number of failures */

    this.totalFailures = 0;
    /** We only make 1 attempt to reconnect at the same time.. */

    this.isConnecting = false;
    /** To avoid reconnect if client is disconnected */

    this.isDisconnected = false;
    /** Boolean that indicates if the connection promise is resolved */

    this.isResolved = false;
    /** Boolean that indicates if we have a working connection to the server */

    this.isHealthy = false;
    /** Incremented when a new WS connection is made */

    this.wsID = 1;
    /** Store the last event time for health checks */

    this.lastEvent = null;
    /** Send a health check message every 25 seconds */

    this.pingInterval = 25 * 1000;
    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;
    addConnectionEventListeners(this.onlineStatusChanged);
  }

  _createClass__default['default'](StableWSConnection, [{
    key: "_log",
    value: function _log(msg) {
      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';
      this.client.logger(level, 'connection:' + msg, _objectSpread$a({
        tags: ['connection']
      }, extra));
    }
  }, {
    key: "setClient",
    value: function setClient(client) {
      this.client = client;
    }
    /**
     * connect - Connect to the WS URL
     * the default 15s timeout allows between 2~3 tries
     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received
     */

  }, {
    key: "connect",
    value: function () {
      var _connect2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var timeout,
            healthCheck,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                timeout = _args.length > 0 && _args[0] !== undefined ? _args[0] : 15000;

                if (!this.isConnecting) {
                  _context.next = 3;
                  break;
                }

                throw Error("You've called connect twice, can only attempt 1 connection at the time");

              case 3:
                this.isDisconnected = false;
                _context.prev = 4;
                _context.next = 7;
                return this._connect();

              case 7:
                healthCheck = _context.sent;
                this.consecutiveFailures = 0;

                this._log("connect() - Established ws connection with healthcheck: ".concat(healthCheck));

                _context.next = 23;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](4);
                this.isHealthy = false;
                this.consecutiveFailures += 1;

                if (!(_context.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {
                  _context.next = 21;
                  break;
                }

                this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');

                this._reconnect({
                  refreshToken: true
                });

                _context.next = 23;
                break;

              case 21:
                if (_context.t0.isWSFailure) {
                  _context.next = 23;
                  break;
                }

                throw new Error(JSON.stringify({
                  code: _context.t0.code,
                  StatusCode: _context.t0.StatusCode,
                  message: _context.t0.message,
                  isWSFailure: _context.t0.isWSFailure
                }));

              case 23:
                _context.next = 25;
                return this._waitForHealthy(timeout);

              case 25:
                return _context.abrupt("return", _context.sent);

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 12]]);
      }));

      function connect() {
        return _connect2.apply(this, arguments);
      }

      return connect;
    }()
    /**
     * _waitForHealthy polls the promise connection to see if its resolved until it times out
     * the default 15s timeout allows between 2~3 tries
     * @param timeout duration(ms)
     */

  }, {
    key: "_waitForHealthy",
    value: function () {
      var _waitForHealthy2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        var _this2 = this;

        var timeout,
            _args4 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 15000;
                return _context4.abrupt("return", Promise.race([_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
                  var interval, i;
                  return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          interval = 50; // ms

                          i = 0;

                        case 2:
                          if (!(i <= timeout)) {
                            _context2.next = 18;
                            break;
                          }

                          _context2.prev = 3;
                          _context2.next = 6;
                          return _this2.connectionOpen;

                        case 6:
                          return _context2.abrupt("return", _context2.sent);

                        case 9:
                          _context2.prev = 9;
                          _context2.t0 = _context2["catch"](3);

                          if (!(i === timeout)) {
                            _context2.next = 13;
                            break;
                          }

                          throw new Error(JSON.stringify({
                            code: _context2.t0.code,
                            StatusCode: _context2.t0.StatusCode,
                            message: _context2.t0.message,
                            isWSFailure: _context2.t0.isWSFailure
                          }));

                        case 13:
                          _context2.next = 15;
                          return sleep(interval);

                        case 15:
                          i += interval;
                          _context2.next = 2;
                          break;

                        case 18:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, null, [[3, 9]]);
                }))(), _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
                  return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return sleep(timeout);

                        case 2:
                          _this2.isConnecting = false;
                          throw new Error(JSON.stringify({
                            code: '',
                            StatusCode: '',
                            message: 'initial WS connection could not be established',
                            isWSFailure: true
                          }));

                        case 4:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3);
                }))()]));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function _waitForHealthy() {
        return _waitForHealthy2.apply(this, arguments);
      }

      return _waitForHealthy;
    }()
    /**
     * Builds and returns the url for websocket.
     * @private
     * @returns url string
     */

  }, {
    key: "disconnect",
    value:
    /**
     * disconnect - Disconnect the connection and doesn't recover...
     *
     */
    function disconnect(timeout) {
      var _this3 = this;

      this._log("disconnect() - Closing the websocket connection for wsID ".concat(this.wsID));

      this.wsID += 1;
      this.isConnecting = false;
      this.isDisconnected = true; // start by removing all the listeners

      if (this.healthCheckTimeoutRef) {
        clearInterval(this.healthCheckTimeoutRef);
      }

      if (this.connectionCheckTimeoutRef) {
        clearInterval(this.connectionCheckTimeoutRef);
      }

      removeConnectionEventListeners(this.onlineStatusChanged);
      this.isHealthy = false; // remove ws handlers...

      if (this.ws && this.ws.removeAllListeners) {
        this.ws.removeAllListeners();
      }

      var isClosedPromise; // and finally close...
      // Assigning to local here because we will remove it from this before the
      // promise resolves.

      var ws = this.ws;

      if (ws && ws.close && ws.readyState === ws.OPEN) {
        isClosedPromise = new Promise(function (resolve) {
          var onclose = function onclose(event) {
            _this3._log("disconnect() - resolving isClosedPromise ".concat(event ? 'with' : 'without', " close frame"), {
              event: event
            });

            resolve();
          };

          ws.onclose = onclose; // In case we don't receive close frame websocket server in time,
          // lets not wait for more than 1 seconds.

          setTimeout(onclose, timeout != null ? timeout : 1000);
        });

        this._log("disconnect() - Manually closed connection by calling client.disconnect()");

        ws.close(chatCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');
      } else {
        this._log("disconnect() - ws connection doesn't exist or it is already closed.");

        isClosedPromise = Promise.resolve();
      }

      delete this.ws;
      return isClosedPromise;
    }
    /**
     * _connect - Connect to the WS endpoint
     *
     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received
     */

  }, {
    key: "_connect",
    value: function () {
      var _connect3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5() {
        var isTokenReady, wsURL, response, insights;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback)) {
                  _context5.next = 2;
                  break;
                }

                return _context5.abrupt("return");

              case 2:
                // simply ignore _connect if it's currently trying to connect
                this.isConnecting = true;
                this.requestID = randomId();
                this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();
                isTokenReady = false;
                _context5.prev = 6;

                this._log("_connect() - waiting for token");

                _context5.next = 10;
                return this.client.tokenManager.tokenReady();

              case 10:
                isTokenReady = true;
                _context5.next = 15;
                break;

              case 13:
                _context5.prev = 13;
                _context5.t0 = _context5["catch"](6);

              case 15:
                _context5.prev = 15;

                if (isTokenReady) {
                  _context5.next = 20;
                  break;
                }

                this._log("_connect() - tokenProvider failed before, so going to retry");

                _context5.next = 20;
                return this.client.tokenManager.loadToken();

              case 20:
                this._setupConnectionPromise();

                wsURL = this._buildUrl();

                this._log("_connect() - Connecting to ".concat(wsURL), {
                  wsURL: wsURL,
                  requestID: this.requestID
                });

                this.ws = new WebSocket__default['default'](wsURL);
                this.ws.onopen = this.onopen.bind(this, this.wsID);
                this.ws.onclose = this.onclose.bind(this, this.wsID);
                this.ws.onerror = this.onerror.bind(this, this.wsID);
                this.ws.onmessage = this.onmessage.bind(this, this.wsID);
                _context5.next = 30;
                return this.connectionOpen;

              case 30:
                response = _context5.sent;
                this.isConnecting = false;

                if (!response) {
                  _context5.next = 36;
                  break;
                }

                this.connectionID = response.connection_id;

                if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {
                  postInsights('ws_success_after_failure', buildWsSuccessAfterFailureInsight(this));
                  this.client.insightMetrics.wsConsecutiveFailures = 0;
                }

                return _context5.abrupt("return", response);

              case 36:
                _context5.next = 44;
                break;

              case 38:
                _context5.prev = 38;
                _context5.t1 = _context5["catch"](15);
                this.isConnecting = false;

                this._log("_connect() - Error - ", _context5.t1);

                if (this.client.options.enableInsights) {
                  this.client.insightMetrics.wsConsecutiveFailures++;
                  this.client.insightMetrics.wsTotalFailures++;
                  insights = buildWsFatalInsight(this, convertErrorToJson(_context5.t1));
                  postInsights === null || postInsights === void 0 ? void 0 : postInsights('ws_fatal', insights);
                }

                throw _context5.t1;

              case 44:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[6, 13], [15, 38]]);
      }));

      function _connect() {
        return _connect3.apply(this, arguments);
      }

      return _connect;
    }()
    /**
     * _reconnect - Retry the connection to WS endpoint
     *
     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available
     *
     * - `interval`	{int}			number of ms that function should wait before reconnecting
     * - `refreshToken` {boolean}	reload/refresh user token be refreshed before attempting reconnection.
     */

  }, {
    key: "_reconnect",
    value: function () {
      var _reconnect2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6() {
        var options,
            interval,
            _args6 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};

                this._log('_reconnect() - Initiating the reconnect'); // only allow 1 connection at the time


                if (!(this.isConnecting || this.isHealthy)) {
                  _context6.next = 5;
                  break;
                }

                this._log('_reconnect() - Abort (1) since already connecting or healthy');

                return _context6.abrupt("return");

              case 5:
                // reconnect in case of on error or on close
                // also reconnect if the health check cycle fails
                interval = options.interval;

                if (!interval) {
                  interval = retryInterval(this.consecutiveFailures);
                } // reconnect, or try again after a little while...


                _context6.next = 9;
                return sleep(interval);

              case 9:
                if (!(this.isConnecting || this.isHealthy)) {
                  _context6.next = 12;
                  break;
                }

                this._log('_reconnect() - Abort (2) since already connecting or healthy');

                return _context6.abrupt("return");

              case 12:
                if (!(this.isDisconnected && this.client.options.enableWSFallback)) {
                  _context6.next = 15;
                  break;
                }

                this._log('_reconnect() - Abort (3) since disconnect() is called');

                return _context6.abrupt("return");

              case 15:
                this._log('_reconnect() - Destroying current WS connection'); // cleanup the old connection


                this._destroyCurrentWSConnection();

                if (!options.refreshToken) {
                  _context6.next = 20;
                  break;
                }

                _context6.next = 20;
                return this.client.tokenManager.loadToken();

              case 20:
                _context6.prev = 20;
                _context6.next = 23;
                return this._connect();

              case 23:
                this._log('_reconnect() - Waiting for recoverCallBack');

                _context6.next = 26;
                return this.client.recoverState();

              case 26:
                this._log('_reconnect() - Finished recoverCallBack');

                this.consecutiveFailures = 0;
                _context6.next = 38;
                break;

              case 30:
                _context6.prev = 30;
                _context6.t0 = _context6["catch"](20);
                this.isHealthy = false;
                this.consecutiveFailures += 1;

                if (!(_context6.t0.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic())) {
                  _context6.next = 37;
                  break;
                }

                this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');

                return _context6.abrupt("return", this._reconnect({
                  refreshToken: true
                }));

              case 37:
                // reconnect on WS failures, don't reconnect if there is a code bug
                if (_context6.t0.isWSFailure) {
                  this._log('_reconnect() - WS failure, so going to try to reconnect');

                  this._reconnect();
                }

              case 38:
                this._log('_reconnect() - == END ==');

              case 39:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[20, 30]]);
      }));

      function _reconnect() {
        return _reconnect2.apply(this, arguments);
      }

      return _reconnect;
    }()
    /**
     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.
     *
     * @param {Event} event Event with type online or offline
     *
     */

  }, {
    key: "_destroyCurrentWSConnection",
    value:
    /**
     * _destroyCurrentWSConnection - Removes the current WS connection
     *
     */
    function _destroyCurrentWSConnection() {
      // increment the ID, meaning we will ignore all messages from the old
      // ws connection from now on.
      this.wsID += 1;

      try {
        var _this$ws2, _this$ws3;

        this === null || this === void 0 ? void 0 : (_this$ws2 = this.ws) === null || _this$ws2 === void 0 ? void 0 : _this$ws2.removeAllListeners();
        this === null || this === void 0 ? void 0 : (_this$ws3 = this.ws) === null || _this$ws3 === void 0 ? void 0 : _this$ws3.close();
      } catch (e) {// we don't care
      }
    }
    /**
     * _setupPromise - sets up the this.connectOpen promise
     */

  }]);

  return StableWSConnection;
}();

function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates the JWT token that can be used for a UserSession
 * @method JWTUserToken
 * @memberof signing
 * @private
 * @param {Secret} apiSecret - API Secret key
 * @param {string} userId - The user_id key in the JWT payload
 * @param {UR} [extraData] - Extra that should be part of the JWT token
 * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign
 * @return {string} JWT Token
 */
function JWTUserToken(apiSecret, userId) {
  var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var jwtOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  if (typeof userId !== 'string') {
    throw new TypeError('userId should be a string');
  }

  var payload = _objectSpread$9({
    user_id: userId
  }, extraData); // make sure we return a clear error when jwt is shimmed (ie. browser build)


  if (jwt__default['default'] == null || jwt__default['default'].sign == null) {
    throw Error("Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.");
  }

  var opts = _extends__default['default']({
    algorithm: 'HS256',
    noTimestamp: true
  }, jwtOptions);

  if (payload.iat) {
    opts.noTimestamp = false;
  }

  return jwt__default['default'].sign(payload, apiSecret, opts);
}
function JWTServerToken(apiSecret) {
  var jwtOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var payload = {
    server: true
  };

  var opts = _extends__default['default']({
    algorithm: 'HS256',
    noTimestamp: true
  }, jwtOptions);

  return jwt__default['default'].sign(payload, apiSecret, opts);
}
function UserFromToken(token) {
  var fragments = token.split('.');

  if (fragments.length !== 3) {
    return '';
  }

  var b64Payload = fragments[1];
  var payload = decodeBase64(b64Payload);
  var data = JSON.parse(payload);
  return data.user_id;
}
/**
 *
 * @param {string} userId the id of the user
 * @return {string}
 */

function DevToken(userId) {
  return ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{"alg": "HS256", "typ": "JWT"}
  encodeBase64(JSON.stringify({
    user_id: userId
  })), 'devtoken' // hardcoded signature
  ].join('.');
}
/**
 *
 * @param {string | Buffer} body the signed message
 * @param {string} secret the shared secret used to generate the signature (Stream API secret)
 * @param {string} signature the signature to validate
 * @return {boolean}
 */

function CheckSignature(body, secret, signature) {
  var key = Buffer.from(secret, 'utf8');
  var hash = crypto__default['default'].createHmac('sha256', key).update(body).digest('hex');

  try {
    return crypto__default['default'].timingSafeEqual(Buffer.from(hash), Buffer.from(signature));
  } catch (_unused) {
    return false;
  }
}

/**
 * TokenManager
 *
 * Handles all the operations around user token.
 */
var TokenManager =
/**
 * Constructor
 *
 * @param {Secret} secret
 */
function TokenManager(secret) {
  var _this = this;

  _classCallCheck__default['default'](this, TokenManager);

  _defineProperty__default['default'](this, "loadTokenPromise", void 0);

  _defineProperty__default['default'](this, "type", void 0);

  _defineProperty__default['default'](this, "secret", void 0);

  _defineProperty__default['default'](this, "token", void 0);

  _defineProperty__default['default'](this, "tokenProvider", void 0);

  _defineProperty__default['default'](this, "user", void 0);

  _defineProperty__default['default'](this, "setTokenOrProvider", /*#__PURE__*/function () {
    var _ref = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(tokenOrProvider, user) {
      return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.validateToken(tokenOrProvider, user);

              _this.user = user;

              if (isFunction(tokenOrProvider)) {
                _this.tokenProvider = tokenOrProvider;
                _this.type = 'provider';
              }

              if (typeof tokenOrProvider === 'string') {
                _this.token = tokenOrProvider;
                _this.type = 'static';
              }

              if (!tokenOrProvider && _this.user && _this.secret) {
                _this.token = JWTUserToken(_this.secret, user.id, {}, {});
                _this.type = 'static';
              }

              _context.next = 7;
              return _this.loadToken();

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());

  _defineProperty__default['default'](this, "reset", function () {
    _this.token = undefined;
    _this.tokenProvider = undefined;
    _this.type = 'static';
    _this.user = undefined;
    _this.loadTokenPromise = null;
  });

  _defineProperty__default['default'](this, "validateToken", function (tokenOrProvider, user) {
    // allow empty token for anon user
    if (user && user.anon && !tokenOrProvider) return; // Don't allow empty token for non-server side client.

    if (!_this.secret && !tokenOrProvider) {
      throw new Error('User token can not be empty');
    }

    if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {
      throw new Error('user token should either be a string or a function');
    }

    if (typeof tokenOrProvider === 'string') {
      // Allow empty token for anonymous users
      if (user.anon && tokenOrProvider === '') return;
      var tokenUserId = UserFromToken(tokenOrProvider);

      if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {
        throw new Error('userToken does not have a user_id or is not matching with user.id');
      }
    }
  });

  _defineProperty__default['default'](this, "tokenReady", function () {
    return _this.loadTokenPromise;
  });

  _defineProperty__default['default'](this, "loadToken", function () {
    // eslint-disable-next-line no-async-promise-executor
    _this.loadTokenPromise = new Promise( /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(resolve, reject) {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(_this.type === 'static')) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", resolve(_this.token));

              case 2:
                if (!(_this.tokenProvider && typeof _this.tokenProvider !== 'string')) {
                  _context2.next = 13;
                  break;
                }

                _context2.prev = 3;
                _context2.next = 6;
                return _this.tokenProvider();

              case 6:
                _this.token = _context2.sent;
                _context2.next = 12;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](3);
                return _context2.abrupt("return", reject(new Error("Call to tokenProvider failed with message: ".concat(_context2.t0))));

              case 12:
                resolve(_this.token);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[3, 9]]);
      }));

      return function (_x3, _x4) {
        return _ref2.apply(this, arguments);
      };
    }());
    return _this.loadTokenPromise;
  });

  _defineProperty__default['default'](this, "getToken", function () {
    if (_this.token) {
      return _this.token;
    }

    if (_this.user && _this.user.anon && !_this.token) {
      return _this.token;
    }

    if (_this.secret) {
      return JWTServerToken(_this.secret);
    }

    throw new Error("Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called");
  });

  _defineProperty__default['default'](this, "isStatic", function () {
    return _this.type === 'static';
  });

  this.loadTokenPromise = null;

  if (secret) {
    this.secret = secret;
  }

  this.type = 'static';

  if (this.secret) {
    this.token = JWTServerToken(this.secret);
  }
}
/**
 * Set the static string token or token provider.
 * Token provider should return a token string or a promise which resolves to string token.
 *
 * @param {TokenOrProvider} tokenOrProvider
 * @param {UserResponse<StreamChatGenerics>} user
 */
;

var APIErrorCodes = {
  '-1': {
    name: 'InternalSystemError',
    retryable: true
  },
  '2': {
    name: 'AccessKeyError',
    retryable: false
  },
  '3': {
    name: 'AuthenticationFailedError',
    retryable: true
  },
  '4': {
    name: 'InputError',
    retryable: false
  },
  '6': {
    name: 'DuplicateUsernameError',
    retryable: false
  },
  '9': {
    name: 'RateLimitError',
    retryable: true
  },
  '16': {
    name: 'DoesNotExistError',
    retryable: false
  },
  '17': {
    name: 'NotAllowedError',
    retryable: false
  },
  '18': {
    name: 'EventNotSupportedError',
    retryable: false
  },
  '19': {
    name: 'ChannelFeatureNotSupportedError',
    retryable: false
  },
  '20': {
    name: 'MessageTooLongError',
    retryable: false
  },
  '21': {
    name: 'MultipleNestingLevelError',
    retryable: false
  },
  '22': {
    name: 'PayloadTooBigError',
    retryable: false
  },
  '23': {
    name: 'RequestTimeoutError',
    retryable: true
  },
  '24': {
    name: 'MaxHeaderSizeExceededError',
    retryable: false
  },
  '40': {
    name: 'AuthErrorTokenExpired',
    retryable: false
  },
  '41': {
    name: 'AuthErrorTokenNotValidYet',
    retryable: false
  },
  '42': {
    name: 'AuthErrorTokenUsedBeforeIssuedAt',
    retryable: false
  },
  '43': {
    name: 'AuthErrorTokenSignatureInvalid',
    retryable: false
  },
  '44': {
    name: 'CustomCommandEndpointMissingError',
    retryable: false
  },
  '45': {
    name: 'CustomCommandEndpointCallError',
    retryable: true
  },
  '46': {
    name: 'ConnectionIDNotFoundError',
    retryable: false
  },
  '60': {
    name: 'CoolDownError',
    retryable: true
  },
  '69': {
    name: 'ErrWrongRegion',
    retryable: false
  },
  '70': {
    name: 'ErrQueryChannelPermissions',
    retryable: false
  },
  '71': {
    name: 'ErrTooManyConnections',
    retryable: true
  },
  '99': {
    name: 'AppSuspendedError',
    retryable: false
  }
};
function isAPIError(error) {
  return error.code !== undefined;
}
function isErrorRetryable(error) {
  if (!error.code) return false;
  var err = APIErrorCodes["".concat(error.code)];
  if (!err) return false;
  return err.retryable;
}
function isConnectionIDError(error) {
  return error.code === 46; // ConnectionIDNotFoundError
}
function isWSFailure(err) {
  if (typeof err.isWSFailure === 'boolean') {
    return err.isWSFailure;
  }

  try {
    return JSON.parse(err.message).isWSFailure;
  } catch (_) {
    return false;
  }
}
function isErrorResponse(res) {
  return !res.status || res.status < 200 || 300 <= res.status;
}

function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var ConnectionState;

(function (ConnectionState) {
  ConnectionState["Closed"] = "CLOSED";
  ConnectionState["Connected"] = "CONNECTED";
  ConnectionState["Connecting"] = "CONNECTING";
  ConnectionState["Disconnected"] = "DISCONNECTED";
  ConnectionState["Init"] = "INIT";
})(ConnectionState || (ConnectionState = {}));

var WSConnectionFallback = /*#__PURE__*/function () {
  function WSConnectionFallback(_ref) {
    var _this = this;

    var client = _ref.client;

    _classCallCheck__default['default'](this, WSConnectionFallback);

    _defineProperty__default['default'](this, "client", void 0);

    _defineProperty__default['default'](this, "state", void 0);

    _defineProperty__default['default'](this, "consecutiveFailures", void 0);

    _defineProperty__default['default'](this, "connectionID", void 0);

    _defineProperty__default['default'](this, "cancelToken", void 0);

    _defineProperty__default['default'](this, "_onlineStatusChanged", function (event) {
      _this._log("_onlineStatusChanged() - ".concat(event.type));

      if (event.type === 'offline') {
        var _this$cancelToken;

        _this._setState(ConnectionState.Closed);

        (_this$cancelToken = _this.cancelToken) === null || _this$cancelToken === void 0 ? void 0 : _this$cancelToken.cancel('disconnect() is called');
        _this.cancelToken = undefined;
        return;
      }

      if (event.type === 'online' && _this.state === ConnectionState.Closed) {
        _this.connect(true);
      }
    });

    _defineProperty__default['default'](this, "_req", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(params, config, retry) {
        var _this$cancelToken2, res;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this.cancelToken && !params.close) {
                  _this.cancelToken = axios__default['default'].CancelToken.source();
                }

                _context.prev = 1;
                _context.next = 4;
                return _this.client.doAxiosRequest('get', _this.client.baseURL.replace(':3030', ':8900') + '/longpoll', // replace port if present for testing with local API
                undefined, {
                  config: _objectSpread$8(_objectSpread$8({}, config), {}, {
                    cancelToken: (_this$cancelToken2 = _this.cancelToken) === null || _this$cancelToken2 === void 0 ? void 0 : _this$cancelToken2.token
                  }),
                  params: params
                });

              case 4:
                res = _context.sent;
                _this.consecutiveFailures = 0; // always reset in case of no error

                return _context.abrupt("return", res);

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](1);
                _this.consecutiveFailures += 1;

                if (!(retry && isErrorRetryable(_context.t0))) {
                  _context.next = 17;
                  break;
                }

                _this._log("_req() - Retryable error, retrying request");

                _context.next = 16;
                return sleep(retryInterval(_this.consecutiveFailures));

              case 16:
                return _context.abrupt("return", _this._req(params, config, retry));

              case 17:
                throw _context.t0;

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 9]]);
      }));

      return function (_x, _x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "_poll", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
      var _data$events, data, i;

      return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(_this.state === ConnectionState.Connected)) {
                _context2.next = 25;
                break;
              }

              _context2.prev = 1;
              _context2.next = 4;
              return _this._req({}, {
                timeout: 30000
              }, true);

            case 4:
              data = _context2.sent;

              // 30s => API responds in 20s if there is no event
              if ((_data$events = data.events) !== null && _data$events !== void 0 && _data$events.length) {
                for (i = 0; i < data.events.length; i++) {
                  _this.client.dispatchEvent(data.events[i]);
                }
              }

              _context2.next = 23;
              break;

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](1);

              if (!axios__default['default'].isCancel(_context2.t0)) {
                _context2.next = 13;
                break;
              }

              _this._log("_poll() - axios canceled request");

              return _context2.abrupt("return");

            case 13:
              if (!isConnectionIDError(_context2.t0)) {
                _context2.next = 18;
                break;
              }

              _this._log("_poll() - ConnectionID error, connecting without ID...");

              _this._setState(ConnectionState.Disconnected);

              _this.connect(true);

              return _context2.abrupt("return");

            case 18:
              if (!(isAPIError(_context2.t0) && !isErrorRetryable(_context2.t0))) {
                _context2.next = 21;
                break;
              }

              _this._setState(ConnectionState.Closed);

              return _context2.abrupt("return");

            case 21:
              _context2.next = 23;
              return sleep(retryInterval(_this.consecutiveFailures));

            case 23:
              _context2.next = 0;
              break;

            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 8]]);
    })));

    _defineProperty__default['default'](this, "connect", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
      var reconnect,
          _yield$_this$_req,
          event,
          _args3 = arguments;

      return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              reconnect = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;

              if (!(_this.state === ConnectionState.Connecting)) {
                _context3.next = 4;
                break;
              }

              _this._log('connect() - connecting already in progress', {
                reconnect: reconnect
              }, 'warn');

              return _context3.abrupt("return");

            case 4:
              if (!(_this.state === ConnectionState.Connected)) {
                _context3.next = 7;
                break;
              }

              _this._log('connect() - already connected and polling', {
                reconnect: reconnect
              }, 'warn');

              return _context3.abrupt("return");

            case 7:
              _this._setState(ConnectionState.Connecting);

              _this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one

              _context3.prev = 9;
              _context3.next = 12;
              return _this._req({
                json: _this.client._buildWSPayload()
              }, {
                timeout: 8000
              }, // 8s
              reconnect);

            case 12:
              _yield$_this$_req = _context3.sent;
              event = _yield$_this$_req.event;

              _this._setState(ConnectionState.Connected);

              _this.connectionID = event.connection_id; // @ts-expect-error

              _this.client.dispatchEvent(event);

              _this._poll();

              if (reconnect) {
                _this.client.recoverState();
              }

              return _context3.abrupt("return", event);

            case 22:
              _context3.prev = 22;
              _context3.t0 = _context3["catch"](9);

              _this._setState(ConnectionState.Closed);

              throw _context3.t0;

            case 26:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[9, 22]]);
    })));

    _defineProperty__default['default'](this, "isHealthy", function () {
      return !!_this.connectionID && _this.state === ConnectionState.Connected;
    });

    _defineProperty__default['default'](this, "disconnect", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
      var _this$cancelToken3;

      var timeout,
          connection_id,
          _args4 = arguments;
      return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 2000;
              removeConnectionEventListeners(_this._onlineStatusChanged);

              _this._setState(ConnectionState.Disconnected);

              (_this$cancelToken3 = _this.cancelToken) === null || _this$cancelToken3 === void 0 ? void 0 : _this$cancelToken3.cancel('disconnect() is called');
              _this.cancelToken = undefined;
              connection_id = _this.connectionID;
              _this.connectionID = undefined;
              _context4.prev = 7;
              _context4.next = 10;
              return _this._req({
                close: true,
                connection_id: connection_id
              }, {
                timeout: timeout
              }, false);

            case 10:
              _this._log("disconnect() - Closed connectionID");

              _context4.next = 16;
              break;

            case 13:
              _context4.prev = 13;
              _context4.t0 = _context4["catch"](7);

              _this._log("disconnect() - Failed", {
                err: _context4.t0
              }, 'error');

            case 16:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[7, 13]]);
    })));

    this.client = client;
    this.state = ConnectionState.Init;
    this.consecutiveFailures = 0;
    addConnectionEventListeners(this._onlineStatusChanged);
  }

  _createClass__default['default'](WSConnectionFallback, [{
    key: "_log",
    value: function _log(msg) {
      var extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'info';
      this.client.logger(level, 'WSConnectionFallback:' + msg, _objectSpread$8({
        tags: ['connection_fallback', 'connection']
      }, extra));
    }
  }, {
    key: "_setState",
    value: function _setState(state) {
      this._log("_setState() - ".concat(state)); // transition from connecting => connected


      if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {
        this.client.dispatchEvent({
          type: 'connection.changed',
          online: true
        });
      }

      if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {
        this.client.dispatchEvent({
          type: 'connection.changed',
          online: false
        });
      }

      this.state = state;
    }
    /** @private */

  }]);

  return WSConnectionFallback;
}();

var Segment = /*#__PURE__*/function () {
  function Segment(client, type, id, data) {
    _classCallCheck__default['default'](this, Segment);

    _defineProperty__default['default'](this, "type", void 0);

    _defineProperty__default['default'](this, "id", void 0);

    _defineProperty__default['default'](this, "client", void 0);

    _defineProperty__default['default'](this, "data", void 0);

    this.client = client;
    this.type = type;
    this.id = id;
    this.data = data;
  }

  _createClass__default['default'](Segment, [{
    key: "create",
    value: function () {
      var _create = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this$data, _this$data2, _this$data3, _this$data4, _this$data5;

        var body;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                body = {
                  name: (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.name,
                  filter: (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.filter,
                  description: (_this$data3 = this.data) === null || _this$data3 === void 0 ? void 0 : _this$data3.description,
                  all_sender_channels: (_this$data4 = this.data) === null || _this$data4 === void 0 ? void 0 : _this$data4.all_sender_channels,
                  all_users: (_this$data5 = this.data) === null || _this$data5 === void 0 ? void 0 : _this$data5.all_users
                };
                return _context.abrupt("return", this.client.createSegment(this.type, this.id, body));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function create() {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "verifySegmentId",
    value: function verifySegmentId() {
      if (!this.id) {
        throw new Error('Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)');
      }
    }
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.verifySegmentId();
                return _context2.abrupt("return", this.client.getSegment(this.id));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function get() {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "update",
    value: function () {
      var _update = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(data) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.verifySegmentId();
                return _context3.abrupt("return", this.client.updateSegment(this.id, data));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function update(_x) {
        return _update.apply(this, arguments);
      }

      return update;
    }()
  }, {
    key: "addTargets",
    value: function () {
      var _addTargets = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(targets) {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.verifySegmentId();
                return _context4.abrupt("return", this.client.addSegmentTargets(this.id, targets));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function addTargets(_x2) {
        return _addTargets.apply(this, arguments);
      }

      return addTargets;
    }()
  }, {
    key: "removeTargets",
    value: function () {
      var _removeTargets = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(targets) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.verifySegmentId();
                return _context5.abrupt("return", this.client.removeSegmentTargets(this.id, targets));

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function removeTargets(_x3) {
        return _removeTargets.apply(this, arguments);
      }

      return removeTargets;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6() {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.verifySegmentId();
                return _context6.abrupt("return", this.client.deleteSegment(this.id));

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "targetExists",
    value: function () {
      var _targetExists = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(targetId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.verifySegmentId();
                return _context7.abrupt("return", this.client.segmentTargetExists(this.id, targetId));

              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function targetExists(_x4) {
        return _targetExists.apply(this, arguments);
      }

      return targetExists;
    }()
  }, {
    key: "queryTargets",
    value: function () {
      var _queryTargets = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8() {
        var filter,
            sort,
            options,
            _args8 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                filter = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
                sort = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : [];
                options = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};
                this.verifySegmentId();
                return _context8.abrupt("return", this.client.querySegmentTargets(this.id, filter, sort, options));

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function queryTargets() {
        return _queryTargets.apply(this, arguments);
      }

      return queryTargets;
    }()
  }]);

  return Segment;
}();

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Utility Types
 */

/* Unknown Record */
//alias to avoid breaking change

/**
 * Response Types
 */
// eslint-disable-next-line @typescript-eslint/no-empty-interface
// TODO: Figure out a way to strongly type set and unset.
// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.

/**
 * Option Types
 */
// TODO: rename to UpdateChannelOptions in the next major update and use it in channel._update and/or channel.update

/** @deprecated use MarkChannelsReadOptions instead */
// TODO: rename to UpdateChannelTypeOptions in the next major update

/**
 * Event Types
 */

/**
 * Filter Types
 */
// https://getstream.io/chat/docs/react/channel_member/#update-channel-members

/**
 * Sort Types
 */

/**
 * Base Types
 */

/**
 * @deprecated Use ChannelMemberResponse instead
 */

/*
  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.

  `user`:
    - soft: marks user as deleted and retains all user data
    - pruning: marks user as deleted and nullifies user information
    - hard: deletes user completely - this requires hard option for messages and conversation as well
  `conversations`:
    - soft: marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)
    - hard: deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)
  `messages`:
    - soft: marks all user messages as deleted without removing any related message data
    - pruning: marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags
    - hard: deletes messages completely with all related information
  `new_channel_owner_id`: any channels owned by the hard-deleted user will be transferred to this user ID
 */
// TODO: add better typing
var ErrorFromResponse = /*#__PURE__*/function (_Error) {
  _inherits__default['default'](ErrorFromResponse, _Error);

  var _super = _createSuper$1(ErrorFromResponse);

  function ErrorFromResponse() {
    var _this;

    _classCallCheck__default['default'](this, ErrorFromResponse);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "code", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "response", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "status", void 0);

    return _this;
  }

  return ErrorFromResponse;
}( /*#__PURE__*/_wrapNativeSuper__default['default'](Error));
exports.VotingVisibility = void 0;

(function (VotingVisibility) {
  VotingVisibility["anonymous"] = "anonymous";
  VotingVisibility["public"] = "public";
})(exports.VotingVisibility || (exports.VotingVisibility = {}));

function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var isPatch = function isPatch(value) {
  return typeof value === 'function';
};
var StateStore = function StateStore(value) {
  var _this = this;

  _classCallCheck__default['default'](this, StateStore);

  this.value = value;

  _defineProperty__default['default'](this, "handlerSet", new Set());

  _defineProperty__default['default'](this, "next", function (newValueOrPatch) {
    // newValue (or patch output) should never be mutated previous value
    var newValue = isPatch(newValueOrPatch) ? newValueOrPatch(_this.value) : newValueOrPatch; // do not notify subscribers if the value hasn't changed

    if (newValue === _this.value) return;
    var oldValue = _this.value;
    _this.value = newValue;

    _this.handlerSet.forEach(function (handler) {
      return handler(_this.value, oldValue);
    });
  });

  _defineProperty__default['default'](this, "partialNext", function (partial) {
    return _this.next(function (current) {
      return _objectSpread$7(_objectSpread$7({}, current), partial);
    });
  });

  _defineProperty__default['default'](this, "getLatestValue", function () {
    return _this.value;
  });

  _defineProperty__default['default'](this, "subscribe", function (handler) {
    handler(_this.value, undefined);

    _this.handlerSet.add(handler);

    return function () {
      _this.handlerSet.delete(handler);
    };
  });

  _defineProperty__default['default'](this, "subscribeWithSelector", function (selector, handler) {
    // begin with undefined to reduce amount of selector calls
    var selectedValues;

    var wrappedHandler = function wrappedHandler(nextValue) {
      var newlySelectedValues = selector(nextValue);
      var hasUpdatedValues = !selectedValues;

      if (Array.isArray(newlySelectedValues) && StateStore.logCount > 0) {
        console.warn('[StreamChat]: The API of our StateStore has changed. Instead of returning an array in the selector, please return a named object of properties.');
        StateStore.logCount--;
      }

      for (var key in selectedValues) {
        // @ts-ignore TODO: remove array support (Readonly<unknown[]>)
        if (selectedValues[key] === newlySelectedValues[key]) continue;
        hasUpdatedValues = true;
        break;
      }

      if (!hasUpdatedValues) return;
      var oldSelectedValues = selectedValues;
      selectedValues = newlySelectedValues;
      handler(newlySelectedValues, oldSelectedValues);
    };

    return _this.subscribe(wrappedHandler);
  });
};

_defineProperty__default['default'](StateStore, "logCount", 5);

var _excluded$3 = ["limit", "sort"];

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var DEFAULT_PAGE_LIMIT = 50;
var DEFAULT_SORT = [{
  created_at: -1
}];
var MARK_AS_READ_THROTTLE_TIMEOUT = 1000; // TODO: remove this once we move to API v2

var THREAD_RESPONSE_RESERVED_KEYS = {
  channel: true,
  channel_cid: true,
  created_at: true,
  created_by_user_id: true,
  parent_message_id: true,
  title: true,
  updated_at: true,
  latest_replies: true,
  active_participant_count: true,
  deleted_at: true,
  last_message_at: true,
  participant_count: true,
  reply_count: true,
  read: true,
  thread_participants: true,
  created_by: true,
  parent_message: true
}; // TODO: remove this once we move to API v2

var constructCustomDataObject = function constructCustomDataObject(threadData) {
  var custom = {};

  for (var key in threadData) {
    if (THREAD_RESPONSE_RESERVED_KEYS[key]) {
      continue;
    }

    var customKey = key;
    custom[customKey] = threadData[customKey];
  }

  return custom;
};

var Thread = /*#__PURE__*/function () {
  function Thread(_ref) {
    var _this = this,
        _threadData$channel$m,
        _threadData$reply_cou;

    var client = _ref.client,
        _threadData = _ref.threadData;

    _classCallCheck__default['default'](this, Thread);

    _defineProperty__default['default'](this, "state", void 0);

    _defineProperty__default['default'](this, "id", void 0);

    _defineProperty__default['default'](this, "client", void 0);

    _defineProperty__default['default'](this, "unsubscribeFunctions", new Set());

    _defineProperty__default['default'](this, "failedRepliesMap", new Map());

    _defineProperty__default['default'](this, "activate", function () {
      _this.state.partialNext({
        active: true
      });
    });

    _defineProperty__default['default'](this, "deactivate", function () {
      _this.state.partialNext({
        active: false
      });
    });

    _defineProperty__default['default'](this, "reload", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
      var thread;
      return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!_this.state.getLatestValue().isLoading) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              _this.state.partialNext({
                isLoading: true
              });

              _context.prev = 3;
              _context.next = 6;
              return _this.client.getThread(_this.id, {
                watch: true
              });

            case 6:
              thread = _context.sent;

              _this.hydrateState(thread);

            case 8:
              _context.prev = 8;

              _this.state.partialNext({
                isLoading: false
              });

              return _context.finish(8);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3,, 8, 11]]);
    })));

    _defineProperty__default['default'](this, "hydrateState", function (thread) {
      if (thread === _this) {
        // skip if the instances are the same
        return;
      }

      if (thread.id !== _this.id) {
        throw new Error("Cannot hydrate thread state with using thread's state");
      }

      var _thread$state$getLate = thread.state.getLatestValue(),
          read = _thread$state$getLate.read,
          replyCount = _thread$state$getLate.replyCount,
          replies = _thread$state$getLate.replies,
          parentMessage = _thread$state$getLate.parentMessage,
          participants = _thread$state$getLate.participants,
          createdAt = _thread$state$getLate.createdAt,
          deletedAt = _thread$state$getLate.deletedAt,
          updatedAt = _thread$state$getLate.updatedAt; // Preserve pending replies and append them to the updated list of replies


      var pendingReplies = Array.from(_this.failedRepliesMap.values());

      _this.state.partialNext({
        read: read,
        replyCount: replyCount,
        replies: pendingReplies.length ? replies.concat(pendingReplies) : replies,
        parentMessage: parentMessage,
        participants: participants,
        createdAt: createdAt,
        deletedAt: deletedAt,
        updatedAt: updatedAt,
        isStateStale: false
      });
    });

    _defineProperty__default['default'](this, "registerSubscriptions", function () {
      if (_this.unsubscribeFunctions.size) {
        // Thread is already listening for events and changes
        return;
      }

      _this.unsubscribeFunctions.add(_this.subscribeThreadUpdated());

      _this.unsubscribeFunctions.add(_this.subscribeMarkActiveThreadRead());

      _this.unsubscribeFunctions.add(_this.subscribeReloadActiveStaleThread());

      _this.unsubscribeFunctions.add(_this.subscribeMarkThreadStale());

      _this.unsubscribeFunctions.add(_this.subscribeNewReplies());

      _this.unsubscribeFunctions.add(_this.subscribeRepliesRead());

      _this.unsubscribeFunctions.add(_this.subscribeMessageDeleted());

      _this.unsubscribeFunctions.add(_this.subscribeMessageUpdated());
    });

    _defineProperty__default['default'](this, "subscribeThreadUpdated", function () {
      return _this.client.on('thread.updated', function (event) {
        if (!event.thread || event.thread.parent_message_id !== _this.id) {
          return;
        }

        var threadData = event.thread;

        _this.state.partialNext({
          title: threadData.title,
          updatedAt: new Date(threadData.updated_at),
          deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,
          // TODO: use threadData.custom once we move to API v2
          custom: constructCustomDataObject(threadData)
        });
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeMarkActiveThreadRead", function () {
      return _this.state.subscribeWithSelector(function (nextValue) {
        return {
          active: nextValue.active,
          unreadMessageCount: ownUnreadCountSelector(_this.client.userID)(nextValue)
        };
      }, function (_ref3) {
        var active = _ref3.active,
            unreadMessageCount = _ref3.unreadMessageCount;
        if (!active || !unreadMessageCount) return;

        _this.throttledMarkAsRead();
      });
    });

    _defineProperty__default['default'](this, "subscribeReloadActiveStaleThread", function () {
      return _this.state.subscribeWithSelector(function (nextValue) {
        return {
          active: nextValue.active,
          isStateStale: nextValue.isStateStale
        };
      }, function (_ref4) {
        var active = _ref4.active,
            isStateStale = _ref4.isStateStale;

        if (active && isStateStale) {
          _this.reload();
        }
      });
    });

    _defineProperty__default['default'](this, "subscribeMarkThreadStale", function () {
      return _this.client.on('user.watching.stop', function (event) {
        var _event$user, _event$channel;

        var _this$state$getLatest = _this.state.getLatestValue(),
            channel = _this$state$getLatest.channel;

        if (!_this.client.userID || _this.client.userID !== ((_event$user = event.user) === null || _event$user === void 0 ? void 0 : _event$user.id) || ((_event$channel = event.channel) === null || _event$channel === void 0 ? void 0 : _event$channel.cid) !== channel.cid) {
          return;
        }

        _this.state.partialNext({
          isStateStale: true
        });
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeNewReplies", function () {
      return _this.client.on('message.new', function (event) {
        var _event$message, _event$message$user;

        if (!_this.client.userID || ((_event$message = event.message) === null || _event$message === void 0 ? void 0 : _event$message.parent_id) !== _this.id) {
          return;
        }

        var isOwnMessage = ((_event$message$user = event.message.user) === null || _event$message$user === void 0 ? void 0 : _event$message$user.id) === _this.client.userID;

        var _this$state$getLatest2 = _this.state.getLatestValue(),
            active = _this$state$getLatest2.active,
            read = _this$state$getLatest2.read;

        _this.upsertReplyLocally({
          message: event.message,
          // Message from current user could have been added optimistically,
          // so the actual timestamp might differ in the event
          timestampChanged: isOwnMessage
        });

        if (active) {
          _this.throttledMarkAsRead();
        }

        var nextRead = {};

        for (var _i = 0, _Object$keys = Object.keys(read); _i < _Object$keys.length; _i++) {
          var userId = _Object$keys[_i];
          var userRead = read[userId];

          if (userRead) {
            var _event$user2;

            var nextUserRead = userRead;

            if (userId === ((_event$user2 = event.user) === null || _event$user2 === void 0 ? void 0 : _event$user2.id)) {
              // The user who just sent a message to the thread has no unread messages
              // in that thread
              nextUserRead = _objectSpread$6(_objectSpread$6({}, nextUserRead), {}, {
                lastReadAt: event.created_at ? new Date(event.created_at) : new Date(),
                user: event.user,
                unreadMessageCount: 0
              });
            } else if (active && userId === _this.client.userID) ; else {
              // Increment unread count for all users except the author of the new message
              nextUserRead = _objectSpread$6(_objectSpread$6({}, nextUserRead), {}, {
                unreadMessageCount: userRead.unreadMessageCount + 1
              });
            }

            nextRead[userId] = nextUserRead;
          }
        }

        _this.state.partialNext({
          read: nextRead
        });
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeRepliesRead", function () {
      return _this.client.on('message.read', function (event) {
        if (!event.user || !event.created_at || !event.thread) return;
        if (event.thread.parent_message_id !== _this.id) return;
        var userId = event.user.id;
        var createdAt = event.created_at;
        var user = event.user;

        _this.state.next(function (current) {
          return _objectSpread$6(_objectSpread$6({}, current), {}, {
            read: _objectSpread$6(_objectSpread$6({}, current.read), {}, _defineProperty__default['default']({}, userId, {
              lastReadAt: new Date(createdAt),
              user: user,
              lastReadMessageId: event.last_read_message_id,
              unreadMessageCount: 0
            }))
          });
        });
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeMessageDeleted", function () {
      return _this.client.on('message.deleted', function (event) {
        if (!event.message) return; // Deleted message is a reply of this thread

        if (event.message.parent_id === _this.id) {
          if (event.hard_delete) {
            _this.deleteReplyLocally({
              message: event.message
            });
          } else {
            // Handle soft delete (updates deleted_at timestamp)
            _this.upsertReplyLocally({
              message: event.message
            });
          }
        } // Deleted message is parent message of this thread


        if (event.message.id === _this.id) {
          _this.updateParentMessageLocally({
            message: event.message
          });
        }
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeMessageUpdated", function () {
      var eventTypes = ['message.updated', 'reaction.new', 'reaction.deleted', 'reaction.updated'];
      var unsubscribeFunctions = eventTypes.map(function (eventType) {
        return _this.client.on(eventType, function (event) {
          if (event.message) {
            _this.updateParentMessageOrReplyLocally(event.message);
          }
        }).unsubscribe;
      });
      return function () {
        return unsubscribeFunctions.forEach(function (unsubscribe) {
          return unsubscribe();
        });
      };
    });

    _defineProperty__default['default'](this, "unregisterSubscriptions", function () {
      _this.unsubscribeFunctions.forEach(function (cleanupFunction) {
        return cleanupFunction();
      });

      _this.unsubscribeFunctions.clear();
    });

    _defineProperty__default['default'](this, "deleteReplyLocally", function (_ref5) {
      var _replies$index;

      var message = _ref5.message;

      var _this$state$getLatest3 = _this.state.getLatestValue(),
          replies = _this$state$getLatest3.replies;

      var index = findIndexInSortedArray({
        needle: formatMessage(message),
        sortedArray: replies,
        sortDirection: 'ascending',
        selectValueToCompare: function selectValueToCompare(reply) {
          return reply.created_at.getTime();
        },
        selectKey: function selectKey(reply) {
          return reply.id;
        }
      });

      if (((_replies$index = replies[index]) === null || _replies$index === void 0 ? void 0 : _replies$index.id) !== message.id) {
        return;
      }

      var updatedReplies = _toConsumableArray__default['default'](replies);

      updatedReplies.splice(index, 1);

      _this.state.partialNext({
        replies: updatedReplies
      });
    });

    _defineProperty__default['default'](this, "upsertReplyLocally", function (_ref6) {
      var message = _ref6.message,
          _ref6$timestampChange = _ref6.timestampChanged,
          timestampChanged = _ref6$timestampChange === void 0 ? false : _ref6$timestampChange;

      if (message.parent_id !== _this.id) {
        throw new Error('Reply does not belong to this thread');
      }

      var formattedMessage = formatMessage(message);

      if (message.status === 'failed') {
        // store failed reply so that it's not lost when reloading or hydrating
        _this.failedRepliesMap.set(formattedMessage.id, formattedMessage);
      } else if (_this.failedRepliesMap.has(message.id)) {
        _this.failedRepliesMap.delete(message.id);
      }

      _this.state.next(function (current) {
        return _objectSpread$6(_objectSpread$6({}, current), {}, {
          replies: addToMessageList(current.replies, formattedMessage, timestampChanged)
        });
      });
    });

    _defineProperty__default['default'](this, "updateParentMessageLocally", function (_ref7) {
      var message = _ref7.message;

      if (message.id !== _this.id) {
        throw new Error('Message does not belong to this thread');
      }

      _this.state.next(function (current) {
        var _message$reply_count;

        var formattedMessage = formatMessage(message);
        return _objectSpread$6(_objectSpread$6({}, current), {}, {
          deletedAt: formattedMessage.deleted_at,
          parentMessage: formattedMessage,
          replyCount: (_message$reply_count = message.reply_count) !== null && _message$reply_count !== void 0 ? _message$reply_count : current.replyCount
        });
      });
    });

    _defineProperty__default['default'](this, "updateParentMessageOrReplyLocally", function (message) {
      if (message.parent_id === _this.id) {
        _this.upsertReplyLocally({
          message: message
        });
      }

      if (!message.parent_id && message.id === _this.id) {
        _this.updateParentMessageLocally({
          message: message
        });
      }
    });

    _defineProperty__default['default'](this, "markAsRead", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
      var _ref9,
          _ref9$force,
          force,
          _args2 = arguments;

      return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _ref9 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, _ref9$force = _ref9.force, force = _ref9$force === void 0 ? false : _ref9$force;

              if (!(_this.ownUnreadCount === 0 && !force)) {
                _context2.next = 3;
                break;
              }

              return _context2.abrupt("return", null);

            case 3:
              _context2.next = 5;
              return _this.channel.markRead({
                thread_id: _this.id
              });

            case 5:
              return _context2.abrupt("return", _context2.sent);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));

    _defineProperty__default['default'](this, "throttledMarkAsRead", throttle(function () {
      return _this.markAsRead();
    }, MARK_AS_READ_THROTTLE_TIMEOUT, {
      trailing: true
    }));

    _defineProperty__default['default'](this, "queryReplies", function () {
      var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _ref10$limit = _ref10.limit,
          limit = _ref10$limit === void 0 ? DEFAULT_PAGE_LIMIT : _ref10$limit,
          _ref10$sort = _ref10.sort,
          sort = _ref10$sort === void 0 ? DEFAULT_SORT : _ref10$sort,
          otherOptions = _objectWithoutProperties__default['default'](_ref10, _excluded$3);

      return _this.channel.getReplies(_this.id, _objectSpread$6({
        limit: limit
      }, otherOptions), sort);
    });

    _defineProperty__default['default'](this, "loadNextPage", function () {
      var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref11$limit = _ref11.limit,
          limit = _ref11$limit === void 0 ? DEFAULT_PAGE_LIMIT : _ref11$limit;

      return _this.loadPage(limit);
    });

    _defineProperty__default['default'](this, "loadPrevPage", function () {
      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref12$limit = _ref12.limit,
          limit = _ref12$limit === void 0 ? DEFAULT_PAGE_LIMIT : _ref12$limit;

      return _this.loadPage(-limit);
    });

    _defineProperty__default['default'](this, "loadPage", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(count) {
        var _this$state$getLatest4, pagination, _ref14, _ref15, loadingKey, cursorKey, insertionMethodKey, queryOptions, limit, _replies$at$id, _replies$at, data, replies, maybeNextCursor;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _this$state$getLatest4 = _this.state.getLatestValue(), pagination = _this$state$getLatest4.pagination;
                _ref14 = count > 0 ? ['isLoadingNext', 'nextCursor', 'push'] : ['isLoadingPrev', 'prevCursor', 'unshift'], _ref15 = _slicedToArray__default['default'](_ref14, 3), loadingKey = _ref15[0], cursorKey = _ref15[1], insertionMethodKey = _ref15[2];

                if (!(pagination[loadingKey] || pagination[cursorKey] === null)) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return");

              case 4:
                queryOptions = _defineProperty__default['default']({}, count > 0 ? 'id_gt' : 'id_lt', pagination[cursorKey]);
                limit = Math.abs(count);

                _this.state.partialNext({
                  pagination: _objectSpread$6(_objectSpread$6({}, pagination), {}, _defineProperty__default['default']({}, loadingKey, true))
                });

                _context3.prev = 7;
                _context3.next = 10;
                return _this.queryReplies(_objectSpread$6(_objectSpread$6({}, queryOptions), {}, {
                  limit: limit
                }));

              case 10:
                data = _context3.sent;
                replies = data.messages.map(formatMessage);
                maybeNextCursor = (_replies$at$id = (_replies$at = replies.at(count > 0 ? -1 : 0)) === null || _replies$at === void 0 ? void 0 : _replies$at.id) !== null && _replies$at$id !== void 0 ? _replies$at$id : null;

                _this.state.next(function (current) {
                  var _objectSpread4;

                  var nextReplies = current.replies; // prevent re-creating array if there's nothing to add to the current one

                  if (replies.length > 0) {
                    var _nextReplies;

                    nextReplies = _toConsumableArray__default['default'](current.replies);

                    (_nextReplies = nextReplies)[insertionMethodKey].apply(_nextReplies, _toConsumableArray__default['default'](replies));
                  }

                  return _objectSpread$6(_objectSpread$6({}, current), {}, {
                    replies: nextReplies,
                    pagination: _objectSpread$6(_objectSpread$6({}, current.pagination), {}, (_objectSpread4 = {}, _defineProperty__default['default'](_objectSpread4, cursorKey, data.messages.length < limit ? null : maybeNextCursor), _defineProperty__default['default'](_objectSpread4, loadingKey, false), _objectSpread4))
                  });
                });

                _context3.next = 20;
                break;

              case 16:
                _context3.prev = 16;
                _context3.t0 = _context3["catch"](7);

                _this.client.logger('error', _context3.t0.message);

                _this.state.next(function (current) {
                  return _objectSpread$6(_objectSpread$6({}, current), {}, {
                    pagination: _objectSpread$6(_objectSpread$6({}, current.pagination), {}, _defineProperty__default['default']({}, loadingKey, false))
                  });
                });

              case 20:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[7, 16]]);
      }));

      return function (_x) {
        return _ref13.apply(this, arguments);
      };
    }());

    var _channel = client.channel(_threadData.channel.type, _threadData.channel.id, {
      name: _threadData.channel.name
    });

    _channel._hydrateMembers({
      members: (_threadData$channel$m = _threadData.channel.members) !== null && _threadData$channel$m !== void 0 ? _threadData$channel$m : [],
      overrideCurrentState: false
    }); // For when read object is undefined and due to that unreadMessageCount for
    // the current user isn't being incremented on message.new


    var placeholderReadResponse = client.userID ? [{
      user: {
        id: client.userID
      },
      unread_messages: 0,
      last_read: new Date().toISOString()
    }] : [];
    this.state = new StateStore({
      // local only
      active: false,
      isLoading: false,
      isStateStale: false,
      // 99.9% should never change
      channel: _channel,
      createdAt: new Date(_threadData.created_at),
      // rest
      deletedAt: _threadData.deleted_at ? new Date(_threadData.deleted_at) : null,
      pagination: repliesPaginationFromInitialThread(_threadData),
      parentMessage: formatMessage(_threadData.parent_message),
      participants: _threadData.thread_participants,
      read: formatReadState(!_threadData.read || _threadData.read.length === 0 ? placeholderReadResponse : _threadData.read),
      replies: _threadData.latest_replies.map(formatMessage),
      replyCount: (_threadData$reply_cou = _threadData.reply_count) !== null && _threadData$reply_cou !== void 0 ? _threadData$reply_cou : 0,
      updatedAt: _threadData.updated_at ? new Date(_threadData.updated_at) : null,
      title: _threadData.title,
      custom: constructCustomDataObject(_threadData)
    });
    this.id = _threadData.parent_message_id;
    this.client = client;
  }

  _createClass__default['default'](Thread, [{
    key: "channel",
    get: function get() {
      return this.state.getLatestValue().channel;
    }
  }, {
    key: "hasStaleState",
    get: function get() {
      return this.state.getLatestValue().isStateStale;
    }
  }, {
    key: "ownUnreadCount",
    get: function get() {
      return ownUnreadCountSelector(this.client.userID)(this.state.getLatestValue());
    }
  }]);

  return Thread;
}();

var formatReadState = function formatReadState(read) {
  return read.reduce(function (state, userRead) {
    var _userRead$unread_mess;

    state[userRead.user.id] = {
      user: userRead.user,
      lastReadMessageId: userRead.last_read_message_id,
      unreadMessageCount: (_userRead$unread_mess = userRead.unread_messages) !== null && _userRead$unread_mess !== void 0 ? _userRead$unread_mess : 0,
      lastReadAt: new Date(userRead.last_read)
    };
    return state;
  }, {});
};

var repliesPaginationFromInitialThread = function repliesPaginationFromInitialThread(thread) {
  var _thread$latest_replie, _thread$latest_replie2;

  var latestRepliesContainsAllReplies = thread.latest_replies.length === thread.reply_count;
  return {
    nextCursor: null,
    prevCursor: latestRepliesContainsAllReplies ? null : (_thread$latest_replie = (_thread$latest_replie2 = thread.latest_replies.at(0)) === null || _thread$latest_replie2 === void 0 ? void 0 : _thread$latest_replie2.id) !== null && _thread$latest_replie !== void 0 ? _thread$latest_replie : null,
    isLoadingNext: false,
    isLoadingPrev: false
  };
};

var ownUnreadCountSelector = function ownUnreadCountSelector(currentUserId) {
  return function (state) {
    var _state$read$currentUs;

    return currentUserId && ((_state$read$currentUs = state.read[currentUserId]) === null || _state$read$currentUs === void 0 ? void 0 : _state$read$currentUs.unreadMessageCount) || 0;
  };
};

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var MODERATION_ENTITY_TYPES = {
  user: 'stream:user',
  message: 'stream:chat:v1:message',
  userprofile: 'stream:v1:user_profile'
}; // Moderation class provides all the endpoints related to moderation v2.

var Moderation = /*#__PURE__*/function () {
  function Moderation(client) {
    _classCallCheck__default['default'](this, Moderation);

    _defineProperty__default['default'](this, "client", void 0);

    this.client = client;
  }
  /**
   * Flag a user
   *
   * @param {string} flaggedUserID User ID to be flagged
   * @param {string} reason Reason for flagging the user
   * @param {Object} options Additional options for flagging the user
   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target user
   * @param {Object} options.custom Additional data to be stored with the flag
   * @returns
   */


  _createClass__default['default'](Moderation, [{
    key: "flagUser",
    value: function () {
      var _flagUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(flaggedUserID, reason) {
        var options,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
                return _context.abrupt("return", this.flag(MODERATION_ENTITY_TYPES.user, flaggedUserID, '', reason, options));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function flagUser(_x, _x2) {
        return _flagUser.apply(this, arguments);
      }

      return flagUser;
    }()
    /**
     * Flag a message
     *
     * @param {string} messageID Message ID to be flagged
     * @param {string} reason Reason for flagging the message
     * @param {Object} options Additional options for flagging the message
     * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target message
     * @param {Object} options.custom Additional data to be stored with the flag
     * @returns
     */

  }, {
    key: "flagMessage",
    value: function () {
      var _flagMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(messageID, reason) {
        var options,
            _args2 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
                return _context2.abrupt("return", this.flag(MODERATION_ENTITY_TYPES.message, messageID, '', reason, options));

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function flagMessage(_x3, _x4) {
        return _flagMessage.apply(this, arguments);
      }

      return flagMessage;
    }()
    /**
     * Flag a user
     *
     * @param {string} entityType Entity type to be flagged
     * @param {string} entityId Entity ID to be flagged
     * @param {string} entityCreatorID User ID of the entity creator
     * @param {string} reason Reason for flagging the entity
     * @param {Object} options Additional options for flagging the entity
     * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target entity
     * @param {Object} options.moderation_payload Content to be flagged e.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}
     * @param {Object} options.custom Additional data to be stored with the flag
     * @returns
     */

  }, {
    key: "flag",
    value: function () {
      var _flag = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(entityType, entityId, entityCreatorID, reason) {
        var options,
            _args3 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : {};
                _context3.next = 3;
                return this.client.post(this.client.baseURL + '/api/v2/moderation/flag', _objectSpread$5({
                  entity_type: entityType,
                  entity_id: entityId,
                  entity_creator_id: entityCreatorID,
                  reason: reason
                }, options));

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function flag(_x5, _x6, _x7, _x8) {
        return _flag.apply(this, arguments);
      }

      return flag;
    }()
    /**
     * Mute a user
     * @param {string} targetID  User ID to be muted
     * @param {Object} options Additional options for muting the user
     * @param {string} options.user_id (For server side usage) User ID of the user who is muting the target user
     * @param {number} options.timeout Timeout for the mute in minutes
     * @returns
     */

  }, {
    key: "muteUser",
    value: function () {
      var _muteUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(targetID) {
        var options,
            _args4 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                _context4.next = 3;
                return this.client.post(this.client.baseURL + '/api/v2/moderation/mute', _objectSpread$5({
                  target_ids: [targetID]
                }, options));

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function muteUser(_x9) {
        return _muteUser.apply(this, arguments);
      }

      return muteUser;
    }()
    /**
     * Unmute a user
     * @param {string} targetID  User ID to be unmuted
     * @param {Object} options Additional options for unmuting the user
     * @param {string} options.user_id (For server side usage) User ID of the user who is unmuting the target user
     * @returns
     */

  }, {
    key: "unmuteUser",
    value: function () {
      var _unmuteUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(targetID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.client.post(this.client.baseURL + '/api/v2/moderation/unmute', _objectSpread$5({
                  target_ids: [targetID]
                }, options));

              case 2:
                return _context5.abrupt("return", _context5.sent);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function unmuteUser(_x10, _x11) {
        return _unmuteUser.apply(this, arguments);
      }

      return unmuteUser;
    }()
    /**
     * Get moderation report for a user
     * @param {string} userID User ID for which moderation report is to be fetched
     * @param {Object} options Additional options for fetching the moderation report
     * @param {boolean} options.create_user_if_not_exists Create user if not exists
     * @param {boolean} options.include_user_blocks Include user blocks
     * @param {boolean} options.include_user_mutes Include user mutes
     */

  }, {
    key: "getUserModerationReport",
    value: function () {
      var _getUserModerationReport = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(userID) {
        var options,
            _args6 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
                _context6.next = 3;
                return this.client.get(this.client.baseURL + "/api/v2/moderation/user_report", _objectSpread$5({
                  user_id: userID
                }, options));

              case 3:
                return _context6.abrupt("return", _context6.sent);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getUserModerationReport(_x12) {
        return _getUserModerationReport.apply(this, arguments);
      }

      return getUserModerationReport;
    }()
    /**
     * Query review queue
     * @param {Object} filterConditions Filter conditions for querying review queue
     * @param {Object} sort Sort conditions for querying review queue
     * @param {Object} options Pagination options for querying review queue
     */

  }, {
    key: "queryReviewQueue",
    value: function () {
      var _queryReviewQueue = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        var filterConditions,
            sort,
            options,
            _args7 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                filterConditions = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
                sort = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : [];
                options = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};
                _context7.next = 5;
                return this.client.post(this.client.baseURL + '/api/v2/moderation/review_queue', _objectSpread$5({
                  filter: filterConditions,
                  sort: normalizeQuerySort(sort)
                }, options));

              case 5:
                return _context7.abrupt("return", _context7.sent);

              case 6:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function queryReviewQueue() {
        return _queryReviewQueue.apply(this, arguments);
      }

      return queryReviewQueue;
    }()
    /**
     * Upsert moderation config
     * @param {Object} config Moderation config to be upserted
     */

  }, {
    key: "upsertConfig",
    value: function () {
      var _upsertConfig = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(config) {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.client.post(this.client.baseURL + '/api/v2/moderation/config', config);

              case 2:
                return _context8.abrupt("return", _context8.sent);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function upsertConfig(_x13) {
        return _upsertConfig.apply(this, arguments);
      }

      return upsertConfig;
    }()
    /**
     * Get moderation config
     * @param {string} key Key for which moderation config is to be fetched
     */

  }, {
    key: "getConfig",
    value: function () {
      var _getConfig = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9(key, data) {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.client.get(this.client.baseURL + '/api/v2/moderation/config/' + key, data);

              case 2:
                return _context9.abrupt("return", _context9.sent);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getConfig(_x14, _x15) {
        return _getConfig.apply(this, arguments);
      }

      return getConfig;
    }()
  }, {
    key: "deleteConfig",
    value: function () {
      var _deleteConfig = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(key, data) {
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.client.delete(this.client.baseURL + '/api/v2/moderation/config/' + key, data);

              case 2:
                return _context10.abrupt("return", _context10.sent);

              case 3:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function deleteConfig(_x16, _x17) {
        return _deleteConfig.apply(this, arguments);
      }

      return deleteConfig;
    }()
    /**
     * Query moderation configs
     * @param {Object} filterConditions Filter conditions for querying moderation configs
     * @param {Object} sort Sort conditions for querying moderation configs
     * @param {Object} options Additional options for querying moderation configs
     */

  }, {
    key: "queryConfigs",
    value: function () {
      var _queryConfigs = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11(filterConditions, sort) {
        var options,
            _args11 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : {};
                _context11.next = 3;
                return this.client.post(this.client.baseURL + '/api/v2/moderation/configs', _objectSpread$5({
                  filter: filterConditions,
                  sort: sort
                }, options));

              case 3:
                return _context11.abrupt("return", _context11.sent);

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function queryConfigs(_x18, _x19) {
        return _queryConfigs.apply(this, arguments);
      }

      return queryConfigs;
    }()
  }, {
    key: "submitAction",
    value: function () {
      var _submitAction = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12(actionType, itemID) {
        var options,
            _args12 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                options = _args12.length > 2 && _args12[2] !== undefined ? _args12[2] : {};
                _context12.next = 3;
                return this.client.post(this.client.baseURL + '/api/v2/moderation/submit_action', _objectSpread$5({
                  action_type: actionType,
                  item_id: itemID
                }, options));

              case 3:
                return _context12.abrupt("return", _context12.sent);

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function submitAction(_x20, _x21) {
        return _submitAction.apply(this, arguments);
      }

      return submitAction;
    }()
    /**
     *
     * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string
     * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes
     * @param {string} entityCreatorID string ID of the entity creator
     * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}
     * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation
     * @param {Array} moderationPayload.images array Array of images to be checked for moderation
     * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation
     * @param configKey
     * @param options
     * @returns
     */

  }, {
    key: "check",
    value: function () {
      var _check = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13(entityType, entityID, entityCreatorID, moderationPayload, configKey, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.client.post(this.client.baseURL + "/api/v2/moderation/check", {
                  entity_type: entityType,
                  entity_id: entityID,
                  entity_creator_id: entityCreatorID,
                  moderation_payload: moderationPayload,
                  config_key: configKey,
                  options: options
                });

              case 2:
                return _context13.abrupt("return", _context13.sent);

              case 3:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function check(_x22, _x23, _x24, _x25, _x26, _x27) {
        return _check.apply(this, arguments);
      }

      return check;
    }()
    /**
     * Experimental: Check user profile
     *
     * Warning: This is an experimental feature and the API is subject to change.
     *
     * This function is used to check a user profile for moderation.
     * This will not create any review queue items for the user profile.
     * You can just use this to check whether to allow a certain user profile to be created or not.
     *
     * Example:
     *
     * ```ts
     * const res = await client.moderation.checkUserProfile(userId, { username: "fuck_boy_001", image: "https://example.com/profile.jpg" });
     * if (res.recommended_action === "remove") {
     *   // Block the user profile from being created
     * } else {
     *   // Allow the user profile to be created
     * }
     * ```
     *
     * @param userId
     * @param profile.username
     * @param profile.image
     * @returns
     */

  }, {
    key: "checkUserProfile",
    value: function () {
      var _checkUserProfile = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14(userId, profile) {
        var moderationPayload;
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                if (!(!profile.username && !profile.image)) {
                  _context14.next = 2;
                  break;
                }

                throw new Error('Either username or image must be provided');

              case 2:
                moderationPayload = {};

                if (profile.username) {
                  moderationPayload.texts = [profile.username];
                }

                if (profile.image) {
                  moderationPayload.images = [profile.image];
                }

                _context14.next = 7;
                return this.check(MODERATION_ENTITY_TYPES.userprofile, userId, userId, moderationPayload, 'user_profile:default', {
                  force_sync: true,
                  test_mode: true
                });

              case 7:
                return _context14.abrupt("return", _context14.sent);

              case 8:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function checkUserProfile(_x28, _x29) {
        return _checkUserProfile.apply(this, arguments);
      }

      return checkUserProfile;
    }()
    /**
     *
     * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string
     * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes
     * @param {string} entityCreatorID string ID of the entity creator
     * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}
     * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation
     * @param {Array} moderationPayload.images array Array of images to be checked for moderation
     * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation
     * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the entity
     * @returns
     */

  }, {
    key: "addCustomFlags",
    value: function () {
      var _addCustomFlags = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15(entityType, entityID, entityCreatorID, moderationPayload, flags) {
        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.client.post(this.client.baseURL + "/api/v2/moderation/custom_check", {
                  entity_type: entityType,
                  entity_id: entityID,
                  entity_creator_id: entityCreatorID,
                  moderation_payload: moderationPayload,
                  flags: flags
                });

              case 2:
                return _context15.abrupt("return", _context15.sent);

              case 3:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function addCustomFlags(_x30, _x31, _x32, _x33, _x34) {
        return _addCustomFlags.apply(this, arguments);
      }

      return addCustomFlags;
    }()
    /**
     * Add custom flags to a message
     * @param {string} messageID Message ID to be flagged
     * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the message
     * @returns
     */

  }, {
    key: "addCustomMessageFlags",
    value: function () {
      var _addCustomMessageFlags = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16(messageID, flags) {
        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.addCustomFlags(MODERATION_ENTITY_TYPES.message, messageID, '', {}, flags);

              case 2:
                return _context16.abrupt("return", _context16.sent);

              case 3:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function addCustomMessageFlags(_x35, _x36) {
        return _addCustomMessageFlags.apply(this, arguments);
      }

      return addCustomMessageFlags;
    }()
  }]);

  return Moderation;
}();

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION = 1000;
var MAX_QUERY_THREADS_LIMIT = 25;
var THREAD_MANAGER_INITIAL_STATE = {
  active: false,
  isThreadOrderStale: false,
  threads: [],
  unreadThreadCount: 0,
  unseenThreadIds: [],
  lastConnectionDropAt: null,
  pagination: {
    isLoading: false,
    isLoadingNext: false,
    nextCursor: null
  },
  ready: false
};
var ThreadManager = /*#__PURE__*/function () {
  function ThreadManager(_ref) {
    var _this = this;

    var client = _ref.client;

    _classCallCheck__default['default'](this, ThreadManager);

    _defineProperty__default['default'](this, "state", void 0);

    _defineProperty__default['default'](this, "client", void 0);

    _defineProperty__default['default'](this, "unsubscribeFunctions", new Set());

    _defineProperty__default['default'](this, "threadsByIdGetterCache", void 0);

    _defineProperty__default['default'](this, "resetState", function () {
      _this.state.next(THREAD_MANAGER_INITIAL_STATE);
    });

    _defineProperty__default['default'](this, "activate", function () {
      _this.state.partialNext({
        active: true
      });
    });

    _defineProperty__default['default'](this, "deactivate", function () {
      _this.state.partialNext({
        active: false
      });
    });

    _defineProperty__default['default'](this, "registerSubscriptions", function () {
      if (_this.unsubscribeFunctions.size) return;

      _this.unsubscribeFunctions.add(_this.subscribeUnreadThreadsCountChange());

      _this.unsubscribeFunctions.add(_this.subscribeManageThreadSubscriptions());

      _this.unsubscribeFunctions.add(_this.subscribeReloadOnActivation());

      _this.unsubscribeFunctions.add(_this.subscribeNewReplies());

      _this.unsubscribeFunctions.add(_this.subscribeRecoverAfterConnectionDrop());

      _this.unsubscribeFunctions.add(_this.subscribeChannelDeleted());
    });

    _defineProperty__default['default'](this, "subscribeUnreadThreadsCountChange", function () {
      var _ref3;

      // initiate
      var _ref2 = (_ref3 = _this.client.user) !== null && _ref3 !== void 0 ? _ref3 : {},
          _ref2$unread_threads = _ref2.unread_threads,
          unreadThreadCount = _ref2$unread_threads === void 0 ? 0 : _ref2$unread_threads;

      _this.state.partialNext({
        unreadThreadCount: unreadThreadCount
      });

      var unsubscribeFunctions = ['health.check', 'notification.mark_read', 'notification.thread_message_new', 'notification.channel_deleted'].map(function (eventType) {
        return _this.client.on(eventType, function (event) {
          var _event$me;

          var _ref4 = (_event$me = event.me) !== null && _event$me !== void 0 ? _event$me : event,
              unreadThreadCount = _ref4.unread_threads;

          if (typeof unreadThreadCount === 'number') {
            _this.state.partialNext({
              unreadThreadCount: unreadThreadCount
            });
          }
        }).unsubscribe;
      });
      return function () {
        return unsubscribeFunctions.forEach(function (unsubscribe) {
          return unsubscribe();
        });
      };
    });

    _defineProperty__default['default'](this, "subscribeChannelDeleted", function () {
      return _this.client.on('notification.channel_deleted', function (event) {
        var cid = event.cid;

        var _this$state$getLatest = _this.state.getLatestValue(),
            threads = _this$state$getLatest.threads;

        var newThreads = threads.filter(function (thread) {
          return thread.channel.cid !== cid;
        });

        _this.state.partialNext({
          threads: newThreads
        });
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeManageThreadSubscriptions", function () {
      return _this.state.subscribeWithSelector(function (nextValue) {
        return {
          threads: nextValue.threads
        };
      }, function (_ref5, prev) {
        var nextThreads = _ref5.threads;

        var _ref6 = prev !== null && prev !== void 0 ? prev : {},
            _ref6$threads = _ref6.threads,
            prevThreads = _ref6$threads === void 0 ? [] : _ref6$threads; // Thread instance was removed if there's no thread with the given id at all,
        // or it was replaced with a new instance


        var removedThreads = prevThreads.filter(function (thread) {
          return thread !== _this.threadsById[thread.id];
        });
        nextThreads.forEach(function (thread) {
          return thread.registerSubscriptions();
        });
        removedThreads.forEach(function (thread) {
          return thread.unregisterSubscriptions();
        });
      });
    });

    _defineProperty__default['default'](this, "subscribeReloadOnActivation", function () {
      return _this.state.subscribeWithSelector(function (nextValue) {
        return {
          active: nextValue.active
        };
      }, function (_ref7) {
        var active = _ref7.active;
        if (active) _this.reload();
      });
    });

    _defineProperty__default['default'](this, "subscribeNewReplies", function () {
      return _this.client.on('notification.thread_message_new', function (event) {
        var _event$message;

        var parentId = (_event$message = event.message) === null || _event$message === void 0 ? void 0 : _event$message.parent_id;
        if (!parentId) return;

        var _this$state$getLatest2 = _this.state.getLatestValue(),
            unseenThreadIds = _this$state$getLatest2.unseenThreadIds,
            ready = _this$state$getLatest2.ready;

        if (!ready) return;

        if (_this.threadsById[parentId]) {
          _this.state.partialNext({
            isThreadOrderStale: true
          });
        } else if (!unseenThreadIds.includes(parentId)) {
          _this.state.partialNext({
            unseenThreadIds: unseenThreadIds.concat(parentId)
          });
        }
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeRecoverAfterConnectionDrop", function () {
      var unsubscribeConnectionDropped = _this.client.on('connection.changed', function (event) {
        if (event.online === false) {
          _this.state.next(function (current) {
            return current.lastConnectionDropAt ? current : _objectSpread$4(_objectSpread$4({}, current), {}, {
              lastConnectionDropAt: new Date()
            });
          });
        }
      }).unsubscribe;

      var throttledHandleConnectionRecovered = throttle(function () {
        var _this$state$getLatest3 = _this.state.getLatestValue(),
            lastConnectionDropAt = _this$state$getLatest3.lastConnectionDropAt;

        if (!lastConnectionDropAt) return;

        _this.reload({
          force: true
        });
      }, DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION, {
        trailing: true
      });

      var unsubscribeConnectionRecovered = _this.client.on('connection.recovered', throttledHandleConnectionRecovered).unsubscribe;

      return function () {
        unsubscribeConnectionDropped();
        unsubscribeConnectionRecovered();
      };
    });

    _defineProperty__default['default'](this, "unregisterSubscriptions", function () {
      _this.state.getLatestValue().threads.forEach(function (thread) {
        return thread.unregisterSubscriptions();
      });

      _this.unsubscribeFunctions.forEach(function (cleanupFunction) {
        return cleanupFunction();
      });

      _this.unsubscribeFunctions.clear();
    });

    _defineProperty__default['default'](this, "reload", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
      var _ref9,
          _ref9$force,
          force,
          _this$state$getLatest4,
          threads,
          unseenThreadIds,
          isThreadOrderStale,
          pagination,
          ready,
          limit,
          response,
          currentThreads,
          nextThreads,
          _iterator,
          _step,
          incomingThread,
          existingThread,
          _args = arguments;

      return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _ref9 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref9$force = _ref9.force, force = _ref9$force === void 0 ? false : _ref9$force;
              _this$state$getLatest4 = _this.state.getLatestValue(), threads = _this$state$getLatest4.threads, unseenThreadIds = _this$state$getLatest4.unseenThreadIds, isThreadOrderStale = _this$state$getLatest4.isThreadOrderStale, pagination = _this$state$getLatest4.pagination, ready = _this$state$getLatest4.ready;

              if (!pagination.isLoading) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return");

            case 4:
              if (!(!force && ready && !unseenThreadIds.length && !isThreadOrderStale)) {
                _context.next = 6;
                break;
              }

              return _context.abrupt("return");

            case 6:
              limit = threads.length + unseenThreadIds.length;
              _context.prev = 7;

              _this.state.next(function (current) {
                return _objectSpread$4(_objectSpread$4({}, current), {}, {
                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {
                    isLoading: true
                  })
                });
              });

              _context.next = 11;
              return _this.queryThreads({
                limit: Math.min(limit, MAX_QUERY_THREADS_LIMIT) || MAX_QUERY_THREADS_LIMIT
              });

            case 11:
              response = _context.sent;
              currentThreads = _this.threadsById;
              nextThreads = [];
              _iterator = _createForOfIteratorHelper$2(response.threads);

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  incomingThread = _step.value;
                  existingThread = currentThreads[incomingThread.id];

                  if (existingThread) {
                    // Reuse thread instances if possible
                    nextThreads.push(existingThread);

                    if (existingThread.hasStaleState) {
                      existingThread.hydrateState(incomingThread);
                    }
                  } else {
                    nextThreads.push(incomingThread);
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }

              _this.state.next(function (current) {
                var _response$next;

                return _objectSpread$4(_objectSpread$4({}, current), {}, {
                  threads: nextThreads,
                  unseenThreadIds: [],
                  isThreadOrderStale: false,
                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {
                    isLoading: false,
                    nextCursor: (_response$next = response.next) !== null && _response$next !== void 0 ? _response$next : null
                  }),
                  ready: true
                });
              });

              _context.next = 23;
              break;

            case 19:
              _context.prev = 19;
              _context.t0 = _context["catch"](7);

              _this.client.logger('error', _context.t0.message);

              _this.state.next(function (current) {
                return _objectSpread$4(_objectSpread$4({}, current), {}, {
                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {
                    isLoading: false
                  })
                });
              });

            case 23:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[7, 19]]);
    })));

    _defineProperty__default['default'](this, "queryThreads", function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _this.client.queryThreads(_objectSpread$4({
        limit: 25,
        participant_limit: 10,
        reply_limit: 10,
        watch: true
      }, options));
    });

    _defineProperty__default['default'](this, "loadNextPage", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
      var options,
          _this$state$getLatest5,
          pagination,
          response,
          _args2 = arguments;

      return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
              _this$state$getLatest5 = _this.state.getLatestValue(), pagination = _this$state$getLatest5.pagination;

              if (!(pagination.isLoadingNext || !pagination.nextCursor)) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt("return");

            case 4:
              _context2.prev = 4;

              _this.state.partialNext({
                pagination: _objectSpread$4(_objectSpread$4({}, pagination), {}, {
                  isLoadingNext: true
                })
              });

              _context2.next = 8;
              return _this.queryThreads(_objectSpread$4(_objectSpread$4({}, options), {}, {
                next: pagination.nextCursor
              }));

            case 8:
              response = _context2.sent;

              _this.state.next(function (current) {
                var _response$next2;

                return _objectSpread$4(_objectSpread$4({}, current), {}, {
                  threads: response.threads.length ? current.threads.concat(response.threads) : current.threads,
                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {
                    nextCursor: (_response$next2 = response.next) !== null && _response$next2 !== void 0 ? _response$next2 : null,
                    isLoadingNext: false
                  })
                });
              });

              _context2.next = 16;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](4);

              _this.client.logger('error', _context2.t0.message);

              _this.state.next(function (current) {
                return _objectSpread$4(_objectSpread$4({}, current), {}, {
                  pagination: _objectSpread$4(_objectSpread$4({}, current.pagination), {}, {
                    isLoadingNext: false
                  })
                });
              });

            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[4, 12]]);
    })));

    this.client = client;
    this.state = new StateStore(THREAD_MANAGER_INITIAL_STATE);
    this.threadsByIdGetterCache = {
      threads: [],
      threadsById: {}
    };
  }

  _createClass__default['default'](ThreadManager, [{
    key: "threadsById",
    get: function get() {
      var _this$state$getLatest6 = this.state.getLatestValue(),
          threads = _this$state$getLatest6.threads;

      if (threads === this.threadsByIdGetterCache.threads) {
        return this.threadsByIdGetterCache.threadsById;
      }

      var threadsById = threads.reduce(function (newThreadsById, thread) {
        newThreadsById[thread.id] = thread;
        return newThreadsById;
      }, {});
      this.threadsByIdGetterCache.threads = threads;
      this.threadsByIdGetterCache.threadsById = threadsById;
      return threadsById;
    }
  }]);

  return ThreadManager;
}();

var _excluded$2 = ["own_votes", "id"],
    _excluded2$1 = ["id"];

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var isPollUpdatedEvent = function isPollUpdatedEvent(e) {
  return e.type === 'poll.updated';
};

var isPollClosedEventEvent = function isPollClosedEventEvent(e) {
  return e.type === 'poll.closed';
};

var isPollVoteCastedEvent = function isPollVoteCastedEvent(e) {
  return e.type === 'poll.vote_casted';
};

var isPollVoteChangedEvent = function isPollVoteChangedEvent(e) {
  return e.type === 'poll.vote_changed';
};

var isPollVoteRemovedEvent = function isPollVoteRemovedEvent(e) {
  return e.type === 'poll.vote_removed';
};

var isVoteAnswer = function isVoteAnswer(vote) {
  return !!(vote !== null && vote !== void 0 && vote.answer_text);
};
var Poll = /*#__PURE__*/function () {
  function Poll(_ref) {
    var _this = this;

    var client = _ref.client,
        _poll = _ref.poll;

    _classCallCheck__default['default'](this, Poll);

    _defineProperty__default['default'](this, "state", void 0);

    _defineProperty__default['default'](this, "id", void 0);

    _defineProperty__default['default'](this, "client", void 0);

    _defineProperty__default['default'](this, "unsubscribeFunctions", new Set());

    _defineProperty__default['default'](this, "getInitialStateFromPollResponse", function (poll) {
      var _own_votes$reduce;

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      var own_votes = poll.own_votes;
          poll.id;
          var pollResponseForState = _objectWithoutProperties__default['default'](poll, _excluded$2);

      var _ref2 = (_own_votes$reduce = own_votes === null || own_votes === void 0 ? void 0 : own_votes.reduce(function (acc, voteOrAnswer) {
        if (isVoteAnswer(voteOrAnswer)) {
          acc.ownAnswer = voteOrAnswer;
        } else {
          acc.ownVotes.push(voteOrAnswer);
        }

        return acc;
      }, {
        ownVotes: []
      })) !== null && _own_votes$reduce !== void 0 ? _own_votes$reduce : {
        ownVotes: []
      },
          ownAnswer = _ref2.ownAnswer,
          ownVotes = _ref2.ownVotes;

      return _objectSpread$3(_objectSpread$3({}, pollResponseForState), {}, {
        lastActivityAt: new Date(),
        maxVotedOptionIds: getMaxVotedOptionIds(pollResponseForState.vote_counts_by_option),
        ownAnswer: ownAnswer,
        ownVotesByOptionId: getOwnVotesByOptionId(ownVotes)
      });
    });

    _defineProperty__default['default'](this, "reinitializeState", function (poll) {
      _this.state.partialNext(_this.getInitialStateFromPollResponse(poll));
    });

    _defineProperty__default['default'](this, "handlePollUpdated", function (event) {
      var _event$poll;

      if ((_event$poll = event.poll) !== null && _event$poll !== void 0 && _event$poll.id && event.poll.id !== _this.id) return;
      if (!isPollUpdatedEvent(event)) return; // eslint-disable-next-line @typescript-eslint/no-unused-vars

      var _extractPollData = extractPollData(event.poll),
          pollData = _objectWithoutProperties__default['default'](_extractPollData, _excluded2$1); // @ts-ignore


      _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, pollData), {}, {
        lastActivityAt: new Date(event.created_at)
      }));
    });

    _defineProperty__default['default'](this, "handlePollClosed", function (event) {
      var _event$poll2;

      if ((_event$poll2 = event.poll) !== null && _event$poll2 !== void 0 && _event$poll2.id && event.poll.id !== _this.id) return;
      if (!isPollClosedEventEvent(event)) return; // @ts-ignore

      _this.state.partialNext({
        is_closed: true,
        lastActivityAt: new Date(event.created_at)
      });
    });

    _defineProperty__default['default'](this, "handleVoteCasted", function (event) {
      var _event$poll3;

      if ((_event$poll3 = event.poll) !== null && _event$poll3 !== void 0 && _event$poll3.id && event.poll.id !== _this.id) return;
      if (!isPollVoteCastedEvent(event)) return;
      var currentState = _this.data;
      var isOwnVote = event.poll_vote.user_id === _this.client.userID;

      var latestAnswers = _toConsumableArray__default['default'](currentState.latest_answers);

      var ownAnswer = currentState.ownAnswer;
      var ownVotesByOptionId = currentState.ownVotesByOptionId;
      var maxVotedOptionIds = currentState.maxVotedOptionIds;

      if (isOwnVote) {
        if (isVoteAnswer(event.poll_vote)) {
          ownAnswer = event.poll_vote;
        } else if (event.poll_vote.option_id) {
          ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;
        }
      }

      if (isVoteAnswer(event.poll_vote)) {
        latestAnswers = [event.poll_vote].concat(_toConsumableArray__default['default'](latestAnswers));
      } else {
        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);
      }

      var pollEnrichData = extractPollEnrichedData(event.poll); // @ts-ignore

      _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, pollEnrichData), {}, {
        latest_answers: latestAnswers,
        lastActivityAt: new Date(event.created_at),
        ownAnswer: ownAnswer,
        ownVotesByOptionId: ownVotesByOptionId,
        maxVotedOptionIds: maxVotedOptionIds
      }));
    });

    _defineProperty__default['default'](this, "handleVoteChanged", function (event) {
      var _event$poll4;

      // this event is triggered only when event.poll.enforce_unique_vote === true
      if ((_event$poll4 = event.poll) !== null && _event$poll4 !== void 0 && _event$poll4.id && event.poll.id !== _this.id) return;
      if (!isPollVoteChangedEvent(event)) return;
      var currentState = _this.data;
      var isOwnVote = event.poll_vote.user_id === _this.client.userID;

      var latestAnswers = _toConsumableArray__default['default'](currentState.latest_answers);

      var ownAnswer = currentState.ownAnswer;
      var ownVotesByOptionId = currentState.ownVotesByOptionId;
      var maxVotedOptionIds = currentState.maxVotedOptionIds;

      if (isOwnVote) {
        if (isVoteAnswer(event.poll_vote)) {
          latestAnswers = [event.poll_vote].concat(_toConsumableArray__default['default'](latestAnswers.filter(function (answer) {
            return answer.id !== event.poll_vote.id;
          })));
          ownAnswer = event.poll_vote;
        } else if (event.poll_vote.option_id) {
          var _ownAnswer;

          if (event.poll.enforce_unique_votes) {
            ownVotesByOptionId = _defineProperty__default['default']({}, event.poll_vote.option_id, event.poll_vote);
          } else {
            ownVotesByOptionId = Object.entries(ownVotesByOptionId).reduce(function (acc, _ref3) {
              var _ref4 = _slicedToArray__default['default'](_ref3, 2),
                  optionId = _ref4[0],
                  vote = _ref4[1];

              if (optionId !== event.poll_vote.option_id && vote.id === event.poll_vote.id) {
                return acc;
              }

              acc[optionId] = vote;
              return acc;
            }, {});
            ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;
          }

          if (((_ownAnswer = ownAnswer) === null || _ownAnswer === void 0 ? void 0 : _ownAnswer.id) === event.poll_vote.id) {
            ownAnswer = undefined;
          }

          maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);
        }
      } else if (isVoteAnswer(event.poll_vote)) {
        latestAnswers = [event.poll_vote].concat(_toConsumableArray__default['default'](latestAnswers));
      } else {
        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);
      }

      var pollEnrichData = extractPollEnrichedData(event.poll); // @ts-ignore

      _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, pollEnrichData), {}, {
        latest_answers: latestAnswers,
        lastActivityAt: new Date(event.created_at),
        ownAnswer: ownAnswer,
        ownVotesByOptionId: ownVotesByOptionId,
        maxVotedOptionIds: maxVotedOptionIds
      }));
    });

    _defineProperty__default['default'](this, "handleVoteRemoved", function (event) {
      var _event$poll5;

      if ((_event$poll5 = event.poll) !== null && _event$poll5 !== void 0 && _event$poll5.id && event.poll.id !== _this.id) return;
      if (!isPollVoteRemovedEvent(event)) return;
      var currentState = _this.data;
      var isOwnVote = event.poll_vote.user_id === _this.client.userID;

      var latestAnswers = _toConsumableArray__default['default'](currentState.latest_answers);

      var ownAnswer = currentState.ownAnswer;

      var ownVotesByOptionId = _objectSpread$3({}, currentState.ownVotesByOptionId);

      var maxVotedOptionIds = currentState.maxVotedOptionIds;

      if (isVoteAnswer(event.poll_vote)) {
        latestAnswers = latestAnswers.filter(function (answer) {
          return answer.id !== event.poll_vote.id;
        });

        if (isOwnVote) {
          ownAnswer = undefined;
        }
      } else {
        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);

        if (isOwnVote && event.poll_vote.option_id) {
          delete ownVotesByOptionId[event.poll_vote.option_id];
        }
      }

      var pollEnrichData = extractPollEnrichedData(event.poll); // @ts-ignore

      _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, pollEnrichData), {}, {
        latest_answers: latestAnswers,
        lastActivityAt: new Date(event.created_at),
        ownAnswer: ownAnswer,
        ownVotesByOptionId: ownVotesByOptionId,
        maxVotedOptionIds: maxVotedOptionIds
      }));
    });

    _defineProperty__default['default'](this, "query", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(id) {
        var _yield$_this$client$g, poll;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.client.getPoll(id);

              case 2:
                _yield$_this$client$g = _context.sent;
                poll = _yield$_this$client$g.poll;

                // @ts-ignore
                _this.state.partialNext(_objectSpread$3(_objectSpread$3({}, poll), {}, {
                  lastActivityAt: new Date()
                }));

                return _context.abrupt("return", poll);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref5.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "update", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(data) {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _this.client.updatePoll(_objectSpread$3(_objectSpread$3({}, data), {}, {
                  id: _this.id
                }));

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref6.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "partialUpdate", /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(partialPollObject) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _this.client.partialUpdatePoll(_this.id, partialPollObject);

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref7.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "close", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
      return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _this.client.closePoll(_this.id);

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));

    _defineProperty__default['default'](this, "delete", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5() {
      return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _this.client.deletePoll(_this.id);

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));

    _defineProperty__default['default'](this, "createOption", /*#__PURE__*/function () {
      var _ref10 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(option) {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return _this.client.createPollOption(_this.id, option);

              case 2:
                return _context6.abrupt("return", _context6.sent);

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      return function (_x4) {
        return _ref10.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "updateOption", /*#__PURE__*/function () {
      var _ref11 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(option) {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return _this.client.updatePollOption(_this.id, option);

              case 2:
                return _context7.abrupt("return", _context7.sent);

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x5) {
        return _ref11.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "deleteOption", /*#__PURE__*/function () {
      var _ref12 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(optionId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _this.client.deletePollOption(_this.id, optionId);

              case 2:
                return _context8.abrupt("return", _context8.sent);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }));

      return function (_x6) {
        return _ref12.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "castVote", /*#__PURE__*/function () {
      var _ref13 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9(optionId, messageId) {
        var _this$data, max_votes_allowed, ownVotesByOptionId, reachedVoteLimit, _oldestVote2, oldestVote;

        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _this$data = _this.data, max_votes_allowed = _this$data.max_votes_allowed, ownVotesByOptionId = _this$data.ownVotesByOptionId;
                reachedVoteLimit = max_votes_allowed && max_votes_allowed === Object.keys(ownVotesByOptionId).length;

                if (!reachedVoteLimit) {
                  _context9.next = 8;
                  break;
                }

                oldestVote = Object.values(ownVotesByOptionId)[0];
                Object.values(ownVotesByOptionId).slice(1).forEach(function (vote) {
                  var _oldestVote;

                  if (!((_oldestVote = oldestVote) !== null && _oldestVote !== void 0 && _oldestVote.created_at) || new Date(vote.created_at) < new Date(oldestVote.created_at)) {
                    oldestVote = vote;
                  }
                });

                if (!((_oldestVote2 = oldestVote) !== null && _oldestVote2 !== void 0 && _oldestVote2.id)) {
                  _context9.next = 8;
                  break;
                }

                _context9.next = 8;
                return _this.removeVote(oldestVote.id, messageId);

              case 8:
                _context9.next = 10;
                return _this.client.castPollVote(messageId, _this.id, {
                  option_id: optionId
                });

              case 10:
                return _context9.abrupt("return", _context9.sent);

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      }));

      return function (_x7, _x8) {
        return _ref13.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "removeVote", /*#__PURE__*/function () {
      var _ref14 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(voteId, messageId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return _this.client.removePollVote(messageId, _this.id, voteId);

              case 2:
                return _context10.abrupt("return", _context10.sent);

              case 3:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      return function (_x9, _x10) {
        return _ref14.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "addAnswer", /*#__PURE__*/function () {
      var _ref15 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11(answerText, messageId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return _this.client.addPollAnswer(messageId, _this.id, answerText);

              case 2:
                return _context11.abrupt("return", _context11.sent);

              case 3:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }));

      return function (_x11, _x12) {
        return _ref15.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "removeAnswer", /*#__PURE__*/function () {
      var _ref16 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12(answerId, messageId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return _this.client.removePollVote(messageId, _this.id, answerId);

              case 2:
                return _context12.abrupt("return", _context12.sent);

              case 3:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }));

      return function (_x13, _x14) {
        return _ref16.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "queryAnswers", /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13(params) {
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return _this.client.queryPollAnswers(_this.id, params.filter, params.sort, params.options);

              case 2:
                return _context13.abrupt("return", _context13.sent);

              case 3:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13);
      }));

      return function (_x15) {
        return _ref17.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "queryOptionVotes", /*#__PURE__*/function () {
      var _ref18 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14(params) {
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return _this.client.queryPollVotes(_this.id, params.filter, params.sort, params.options);

              case 2:
                return _context14.abrupt("return", _context14.sent);

              case 3:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      return function (_x16) {
        return _ref18.apply(this, arguments);
      };
    }());

    this.client = client;
    this.id = _poll.id;
    this.state = new StateStore(this.getInitialStateFromPollResponse(_poll));
  }

  _createClass__default['default'](Poll, [{
    key: "data",
    get: function get() {
      return this.state.getLatestValue();
    }
  }]);

  return Poll;
}();

function getMaxVotedOptionIds(voteCountsByOption) {
  var maxVotes = 0;
  var winningOptions = [];

  for (var _i = 0, _Object$entries = Object.entries(voteCountsByOption !== null && voteCountsByOption !== void 0 ? voteCountsByOption : {}); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray__default['default'](_Object$entries[_i], 2),
        id = _Object$entries$_i[0],
        count = _Object$entries$_i[1];

    if (count > maxVotes) {
      winningOptions = [id];
      maxVotes = count;
    } else if (count === maxVotes) {
      winningOptions.push(id);
    }
  }

  return winningOptions;
}

function getOwnVotesByOptionId(ownVotes) {
  return !ownVotes ? {} : ownVotes.reduce(function (acc, vote) {
    if (isVoteAnswer(vote) || !vote.option_id) return acc;
    acc[vote.option_id] = vote;
    return acc;
  }, {});
}

function extractPollData(pollResponse) {
  return {
    allow_answers: pollResponse.allow_answers,
    allow_user_suggested_options: pollResponse.allow_user_suggested_options,
    description: pollResponse.description,
    enforce_unique_vote: pollResponse.enforce_unique_vote,
    id: pollResponse.id,
    is_closed: pollResponse.is_closed,
    max_votes_allowed: pollResponse.max_votes_allowed,
    name: pollResponse.name,
    options: pollResponse.options,
    voting_visibility: pollResponse.voting_visibility
  };
}
function extractPollEnrichedData(pollResponse) {
  return {
    answers_count: pollResponse.answers_count,
    latest_votes_by_option: pollResponse.latest_votes_by_option,
    vote_count: pollResponse.vote_count,
    vote_counts_by_option: pollResponse.vote_counts_by_option
  };
}

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var PollManager = /*#__PURE__*/function () {
  // The pollCache contains only polls that have been created and sent as messages
  // (i.e only polls that are coupled with a message, can be voted on and require a
  // reactive state). It shall work as a basic look-up table for our SDK to be able
  // to quickly consume poll state that will be reactive even without the polls being
  // rendered within the UI.
  function PollManager(_ref) {
    var _this = this;

    var client = _ref.client;

    _classCallCheck__default['default'](this, PollManager);

    _defineProperty__default['default'](this, "client", void 0);

    _defineProperty__default['default'](this, "pollCache", new Map());

    _defineProperty__default['default'](this, "unsubscribeFunctions", new Set());

    _defineProperty__default['default'](this, "fromState", function (id) {
      return _this.pollCache.get(id);
    });

    _defineProperty__default['default'](this, "registerSubscriptions", function () {
      if (_this.unsubscribeFunctions.size) {
        // Already listening for events and changes
        return;
      }

      _this.unsubscribeFunctions.add(_this.subscribeMessageNew());

      _this.unsubscribeFunctions.add(_this.subscribePollUpdated());

      _this.unsubscribeFunctions.add(_this.subscribePollClosed());

      _this.unsubscribeFunctions.add(_this.subscribeVoteCasted());

      _this.unsubscribeFunctions.add(_this.subscribeVoteChanged());

      _this.unsubscribeFunctions.add(_this.subscribeVoteRemoved());
    });

    _defineProperty__default['default'](this, "unregisterSubscriptions", function () {
      _this.unsubscribeFunctions.forEach(function (cleanupFunction) {
        return cleanupFunction();
      });

      _this.unsubscribeFunctions.clear();
    });

    _defineProperty__default['default'](this, "createPoll", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(poll) {
        var _yield$_this$client$c, createdPoll;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.client.createPoll(poll);

              case 2:
                _yield$_this$client$c = _context.sent;
                createdPoll = _yield$_this$client$c.poll;
                return _context.abrupt("return", new Poll({
                  client: _this.client,
                  poll: createdPoll
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "getPoll", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(id) {
        var cachedPoll, _yield$_this$client$g, poll;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                cachedPoll = _this.fromState(id); // optimistically return the cached poll if it exists and update in the background

                if (!cachedPoll) {
                  _context2.next = 4;
                  break;
                }

                _this.client.getPoll(id).then(function (_ref4) {
                  var poll = _ref4.poll;
                  return _this.setOrOverwriteInCache(poll, true);
                });

                return _context2.abrupt("return", cachedPoll);

              case 4:
                _context2.next = 6;
                return _this.client.getPoll(id);

              case 6:
                _yield$_this$client$g = _context2.sent;
                poll = _yield$_this$client$g.poll;

                _this.setOrOverwriteInCache(poll);

                return _context2.abrupt("return", _this.fromState(id));

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref3.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "queryPolls", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(filter) {
        var sort,
            options,
            _yield$_this$client$q,
            polls,
            next,
            pollInstances,
            _args3 = arguments;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                sort = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : [];
                options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
                _context3.next = 4;
                return _this.client.queryPolls(filter, sort, options);

              case 4:
                _yield$_this$client$q = _context3.sent;
                polls = _yield$_this$client$q.polls;
                next = _yield$_this$client$q.next;
                pollInstances = polls.map(function (poll) {
                  _this.setOrOverwriteInCache(poll, true);

                  return _this.fromState(poll.id);
                });
                return _context3.abrupt("return", {
                  polls: pollInstances,
                  next: next
                });

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      return function (_x3) {
        return _ref5.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "hydratePollCache", function (messages, overwriteState) {
      var _iterator = _createForOfIteratorHelper$1(messages),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var message = _step.value;

          if (!message.poll) {
            continue;
          }

          var pollResponse = message.poll;

          _this.setOrOverwriteInCache(pollResponse, overwriteState);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });

    _defineProperty__default['default'](this, "setOrOverwriteInCache", function (pollResponse, overwriteState) {
      if (!_this.client._cacheEnabled()) {
        return;
      }

      var pollFromCache = _this.fromState(pollResponse.id);

      if (!pollFromCache) {
        var poll = new Poll({
          client: _this.client,
          poll: pollResponse
        });

        _this.pollCache.set(poll.id, poll);
      } else if (overwriteState) {
        pollFromCache.reinitializeState(pollResponse);
      }
    });

    _defineProperty__default['default'](this, "subscribePollUpdated", function () {
      return _this.client.on('poll.updated', function (event) {
        var _event$poll;

        if ((_event$poll = event.poll) !== null && _event$poll !== void 0 && _event$poll.id) {
          var _this$fromState;

          (_this$fromState = _this.fromState(event.poll.id)) === null || _this$fromState === void 0 ? void 0 : _this$fromState.handlePollUpdated(event);
        }
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribePollClosed", function () {
      return _this.client.on('poll.closed', function (event) {
        var _event$poll2;

        if ((_event$poll2 = event.poll) !== null && _event$poll2 !== void 0 && _event$poll2.id) {
          var _this$fromState2;

          (_this$fromState2 = _this.fromState(event.poll.id)) === null || _this$fromState2 === void 0 ? void 0 : _this$fromState2.handlePollClosed(event);
        }
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeVoteCasted", function () {
      return _this.client.on('poll.vote_casted', function (event) {
        var _event$poll3;

        if ((_event$poll3 = event.poll) !== null && _event$poll3 !== void 0 && _event$poll3.id) {
          var _this$fromState3;

          (_this$fromState3 = _this.fromState(event.poll.id)) === null || _this$fromState3 === void 0 ? void 0 : _this$fromState3.handleVoteCasted(event);
        }
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeVoteChanged", function () {
      return _this.client.on('poll.vote_changed', function (event) {
        var _event$poll4;

        if ((_event$poll4 = event.poll) !== null && _event$poll4 !== void 0 && _event$poll4.id) {
          var _this$fromState4;

          (_this$fromState4 = _this.fromState(event.poll.id)) === null || _this$fromState4 === void 0 ? void 0 : _this$fromState4.handleVoteChanged(event);
        }
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeVoteRemoved", function () {
      return _this.client.on('poll.vote_removed', function (event) {
        var _event$poll5;

        if ((_event$poll5 = event.poll) !== null && _event$poll5 !== void 0 && _event$poll5.id) {
          var _this$fromState5;

          (_this$fromState5 = _this.fromState(event.poll.id)) === null || _this$fromState5 === void 0 ? void 0 : _this$fromState5.handleVoteRemoved(event);
        }
      }).unsubscribe;
    });

    _defineProperty__default['default'](this, "subscribeMessageNew", function () {
      return _this.client.on('message.new', function (event) {
        var message = event.message;

        if (message) {
          var formattedMessage = formatMessage(message);

          _this.hydratePollCache([formattedMessage]);
        }
      }).unsubscribe;
    });

    this.client = client;
  }

  _createClass__default['default'](PollManager, [{
    key: "data",
    get: function get() {
      return this.pollCache;
    }
  }]);

  return PollManager;
}();

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var channelManagerEventToHandlerMapping = {
  'channel.deleted': 'channelDeletedHandler',
  'channel.hidden': 'channelHiddenHandler',
  'channel.truncated': 'channelTruncatedHandler',
  'channel.updated': 'channelUpdatedHandler',
  'channel.visible': 'channelVisibleHandler',
  'message.new': 'newMessageHandler',
  'member.updated': 'memberUpdatedHandler',
  'notification.added_to_channel': 'notificationAddedToChannelHandler',
  'notification.message_new': 'notificationNewMessageHandler',
  'notification.removed_from_channel': 'notificationRemovedFromChannelHandler'
};
var DEFAULT_CHANNEL_MANAGER_OPTIONS = {
  abortInFlightQuery: false,
  allowNotLoadedChannelPromotionForEvent: {
    'channel.visible': true,
    'message.new': true,
    'notification.added_to_channel': true,
    'notification.message_new': true
  },
  lockChannelOrder: false
};
var DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS = {
  limit: 10,
  offset: 0
};
/**
 * A class that manages a list of channels and changes it based on configuration and WS events. The
 * list of channels is reactive as well as the pagination and it can be subscribed to for state updates.
 *
 * @internal
 */

var ChannelManager = function ChannelManager(_ref) {
  var _this = this;

  var client = _ref.client,
      _ref$eventHandlerOver = _ref.eventHandlerOverrides,
      _eventHandlerOverrides = _ref$eventHandlerOver === void 0 ? {} : _ref$eventHandlerOver,
      _ref$options = _ref.options,
      _options = _ref$options === void 0 ? {} : _ref$options;

  _classCallCheck__default['default'](this, ChannelManager);

  _defineProperty__default['default'](this, "state", void 0);

  _defineProperty__default['default'](this, "client", void 0);

  _defineProperty__default['default'](this, "unsubscribeFunctions", new Set());

  _defineProperty__default['default'](this, "eventHandlers", new Map());

  _defineProperty__default['default'](this, "eventHandlerOverrides", new Map());

  _defineProperty__default['default'](this, "options", {});

  _defineProperty__default['default'](this, "stateOptions", {});

  _defineProperty__default['default'](this, "setChannels", function (valueOrFactory) {
    _this.state.next(function (current) {
      var currentChannels = current.channels;
      var newChannels = isPatch(valueOrFactory) ? valueOrFactory(currentChannels) : valueOrFactory; // If the references between the two values are the same, just return the
      // current state; otherwise trigger a state change.

      if (currentChannels === newChannels) {
        return current;
      }

      return _objectSpread$2(_objectSpread$2({}, current), {}, {
        channels: newChannels
      });
    });
  });

  _defineProperty__default['default'](this, "setEventHandlerOverrides", function () {
    var eventHandlerOverrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var truthyEventHandlerOverrides = Object.entries(eventHandlerOverrides).reduce(function (acc, _ref2) {
      var _ref3 = _slicedToArray__default['default'](_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];

      if (value) {
        acc[key] = value;
      }

      return acc;
    }, {});
    _this.eventHandlerOverrides = new Map(Object.entries(truthyEventHandlerOverrides));
  });

  _defineProperty__default['default'](this, "setOptions", function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _this.options = _objectSpread$2(_objectSpread$2({}, DEFAULT_CHANNEL_MANAGER_OPTIONS), options);
  });

  _defineProperty__default['default'](this, "queryChannels", /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(filters) {
      var sort,
          options,
          stateOptions,
          _DEFAULT_CHANNEL_MANA,
          offset,
          limit,
          _this$state$getLatest,
          isLoading,
          _channels$length,
          _channels$length2,
          channels,
          newOffset,
          newOptions,
          _this$state$getLatest2,
          pagination,
          _args = arguments;

      return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              sort = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];
              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
              stateOptions = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
              _DEFAULT_CHANNEL_MANA = _objectSpread$2(_objectSpread$2({}, DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS), options), offset = _DEFAULT_CHANNEL_MANA.offset, limit = _DEFAULT_CHANNEL_MANA.limit;
              _this$state$getLatest = _this.state.getLatestValue(), isLoading = _this$state$getLatest.pagination.isLoading;

              if (!(isLoading && !_this.options.abortInFlightQuery)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return");

            case 7:
              _context.prev = 7;
              _this.stateOptions = stateOptions;

              _this.state.next(function (currentState) {
                return _objectSpread$2(_objectSpread$2({}, currentState), {}, {
                  pagination: _objectSpread$2(_objectSpread$2({}, currentState.pagination), {}, {
                    isLoading: true,
                    isLoadingNext: false,
                    filters: filters,
                    sort: sort,
                    options: options
                  })
                });
              });

              _context.next = 12;
              return _this.client.queryChannels(filters, sort, options, stateOptions);

            case 12:
              channels = _context.sent;
              newOffset = offset + ((_channels$length = channels === null || channels === void 0 ? void 0 : channels.length) !== null && _channels$length !== void 0 ? _channels$length : 0);
              newOptions = _objectSpread$2(_objectSpread$2({}, options), {}, {
                offset: newOffset
              });
              _this$state$getLatest2 = _this.state.getLatestValue(), pagination = _this$state$getLatest2.pagination;

              _this.state.partialNext({
                channels: channels,
                pagination: _objectSpread$2(_objectSpread$2({}, pagination), {}, {
                  hasNext: ((_channels$length2 = channels === null || channels === void 0 ? void 0 : channels.length) !== null && _channels$length2 !== void 0 ? _channels$length2 : 0) >= limit,
                  isLoading: false,
                  options: newOptions
                }),
                initialized: true
              });

              _context.next = 24;
              break;

            case 19:
              _context.prev = 19;
              _context.t0 = _context["catch"](7);

              _this.client.logger('error', _context.t0.message);

              _this.state.next(function (currentState) {
                return _objectSpread$2(_objectSpread$2({}, currentState), {}, {
                  pagination: _objectSpread$2(_objectSpread$2({}, currentState.pagination), {}, {
                    isLoading: false
                  })
                });
              });

              throw _context.t0;

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[7, 19]]);
    }));

    return function (_x) {
      return _ref4.apply(this, arguments);
    };
  }());

  _defineProperty__default['default'](this, "loadNext", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
    var _this$state$getLatest3, pagination, initialized, filters, sort, options, isLoadingNext, hasNext, _nextChannels$length, _nextChannels$length2, _DEFAULT_CHANNEL_MANA2, offset, limit, nextChannels, _this$state$getLatest4, channels, newOffset, newOptions;

    return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _this$state$getLatest3 = _this.state.getLatestValue(), pagination = _this$state$getLatest3.pagination, initialized = _this$state$getLatest3.initialized;
            filters = pagination.filters, sort = pagination.sort, options = pagination.options, isLoadingNext = pagination.isLoadingNext, hasNext = pagination.hasNext;

            if (!(!initialized || isLoadingNext || !hasNext)) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return");

          case 4:
            _context2.prev = 4;
            _DEFAULT_CHANNEL_MANA2 = _objectSpread$2(_objectSpread$2({}, DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS), options), offset = _DEFAULT_CHANNEL_MANA2.offset, limit = _DEFAULT_CHANNEL_MANA2.limit;

            _this.state.partialNext({
              pagination: _objectSpread$2(_objectSpread$2({}, pagination), {}, {
                isLoading: false,
                isLoadingNext: true
              })
            });

            _context2.next = 9;
            return _this.client.queryChannels(filters, sort, options, _this.stateOptions);

          case 9:
            nextChannels = _context2.sent;
            _this$state$getLatest4 = _this.state.getLatestValue(), channels = _this$state$getLatest4.channels;
            newOffset = offset + ((_nextChannels$length = nextChannels === null || nextChannels === void 0 ? void 0 : nextChannels.length) !== null && _nextChannels$length !== void 0 ? _nextChannels$length : 0);
            newOptions = _objectSpread$2(_objectSpread$2({}, options), {}, {
              offset: newOffset
            });

            _this.state.partialNext({
              channels: uniqBy([].concat(_toConsumableArray__default['default'](channels || []), _toConsumableArray__default['default'](nextChannels)), 'cid'),
              pagination: _objectSpread$2(_objectSpread$2({}, pagination), {}, {
                hasNext: ((_nextChannels$length2 = nextChannels === null || nextChannels === void 0 ? void 0 : nextChannels.length) !== null && _nextChannels$length2 !== void 0 ? _nextChannels$length2 : 0) >= limit,
                isLoading: false,
                isLoadingNext: false,
                options: newOptions
              })
            });

            _context2.next = 21;
            break;

          case 16:
            _context2.prev = 16;
            _context2.t0 = _context2["catch"](4);

            _this.client.logger('error', _context2.t0.message);

            _this.state.next(function (currentState) {
              return _objectSpread$2(_objectSpread$2({}, currentState), {}, {
                pagination: _objectSpread$2(_objectSpread$2({}, currentState.pagination), {}, {
                  isLoadingNext: false
                })
              });
            });

            throw _context2.t0;

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[4, 16]]);
  })));

  _defineProperty__default['default'](this, "notificationAddedToChannelHandler", /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(event) {
      var _event$channel, _this$options$allowNo;

      var _ref7, id, type, members, channel, _this$state$getLatest5, pagination, channels, _ref9, sort;

      return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _ref7 = (_event$channel = event === null || event === void 0 ? void 0 : event.channel) !== null && _event$channel !== void 0 ? _event$channel : {}, id = _ref7.id, type = _ref7.type, members = _ref7.members;

              if (!(!type || !((_this$options$allowNo = _this.options.allowNotLoadedChannelPromotionForEvent) !== null && _this$options$allowNo !== void 0 && _this$options$allowNo['notification.added_to_channel']))) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt("return");

            case 3:
              _context3.next = 5;
              return getAndWatchChannel({
                client: _this.client,
                id: id,
                members: members === null || members === void 0 ? void 0 : members.reduce(function (acc, _ref8) {
                  var user = _ref8.user,
                      user_id = _ref8.user_id;
                  var userId = user_id || (user === null || user === void 0 ? void 0 : user.id);

                  if (userId) {
                    acc.push(userId);
                  }

                  return acc;
                }, []),
                type: type
              });

            case 5:
              channel = _context3.sent;
              _this$state$getLatest5 = _this.state.getLatestValue(), pagination = _this$state$getLatest5.pagination, channels = _this$state$getLatest5.channels;

              if (channels) {
                _context3.next = 9;
                break;
              }

              return _context3.abrupt("return");

            case 9:
              _ref9 = pagination !== null && pagination !== void 0 ? pagination : {}, sort = _ref9.sort;

              _this.setChannels(promoteChannel({
                channels: channels,
                channelToMove: channel,
                sort: sort
              }));

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x2) {
      return _ref6.apply(this, arguments);
    };
  }());

  _defineProperty__default['default'](this, "channelDeletedHandler", function (event) {
    var _this$state$getLatest6 = _this.state.getLatestValue(),
        channels = _this$state$getLatest6.channels;

    if (!channels) {
      return;
    }

    var newChannels = _toConsumableArray__default['default'](channels);

    var channelIndex = newChannels.findIndex(function (channel) {
      var _event$channel2;

      return channel.cid === (event.cid || ((_event$channel2 = event.channel) === null || _event$channel2 === void 0 ? void 0 : _event$channel2.cid));
    });

    if (channelIndex < 0) {
      return;
    }

    newChannels.splice(channelIndex, 1);

    _this.setChannels(newChannels);
  });

  _defineProperty__default['default'](this, "channelHiddenHandler", this.channelDeletedHandler);

  _defineProperty__default['default'](this, "newMessageHandler", function (event) {
    var _this$options$allowNo2;

    var _this$state$getLatest7 = _this.state.getLatestValue(),
        pagination = _this$state$getLatest7.pagination,
        channels = _this$state$getLatest7.channels;

    if (!channels) {
      return;
    }

    var _ref10 = pagination !== null && pagination !== void 0 ? pagination : {},
        filters = _ref10.filters,
        sort = _ref10.sort;

    var channelType = event.channel_type;
    var channelId = event.channel_id;

    if (!channelType || !channelId) {
      return;
    }

    var targetChannel = _this.client.channel(channelType, channelId);

    var targetChannelIndex = channels.indexOf(targetChannel);
    var targetChannelExistsWithinList = targetChannelIndex >= 0;
    var isTargetChannelPinned = isChannelPinned(targetChannel);
    var isTargetChannelArchived = isChannelArchived(targetChannel);
    var considerArchivedChannels = shouldConsiderArchivedChannels(filters);
    var considerPinnedChannels = shouldConsiderPinnedChannels(sort);

    if ( // filter is defined, target channel is archived and filter option is set to false
    considerArchivedChannels && isTargetChannelArchived && !filters.archived || // filter is defined, target channel isn't archived and filter option is set to true
    considerArchivedChannels && !isTargetChannelArchived && filters.archived || // sort option is defined, target channel is pinned
    considerPinnedChannels && isTargetChannelPinned || // list order is locked
    _this.options.lockChannelOrder || // target channel is not within the loaded list and loading from cache is disallowed
    !targetChannelExistsWithinList && !((_this$options$allowNo2 = _this.options.allowNotLoadedChannelPromotionForEvent) !== null && _this$options$allowNo2 !== void 0 && _this$options$allowNo2['message.new'])) {
      return;
    }

    _this.setChannels(promoteChannel({
      channels: channels,
      channelToMove: targetChannel,
      channelToMoveIndexWithinChannels: targetChannelIndex,
      sort: sort
    }));
  });

  _defineProperty__default['default'](this, "notificationNewMessageHandler", /*#__PURE__*/function () {
    var _ref11 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(event) {
      var _event$channel3, _this$options$allowNo3;

      var _ref12, id, type, channel, _this$state$getLatest8, channels, pagination, _ref13, filters, sort, considerArchivedChannels, isTargetChannelArchived;

      return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _ref12 = (_event$channel3 = event === null || event === void 0 ? void 0 : event.channel) !== null && _event$channel3 !== void 0 ? _event$channel3 : {}, id = _ref12.id, type = _ref12.type;

              if (!(!id || !type)) {
                _context4.next = 3;
                break;
              }

              return _context4.abrupt("return");

            case 3:
              _context4.next = 5;
              return getAndWatchChannel({
                client: _this.client,
                id: id,
                type: type
              });

            case 5:
              channel = _context4.sent;
              _this$state$getLatest8 = _this.state.getLatestValue(), channels = _this$state$getLatest8.channels, pagination = _this$state$getLatest8.pagination;
              _ref13 = pagination !== null && pagination !== void 0 ? pagination : {}, filters = _ref13.filters, sort = _ref13.sort;
              considerArchivedChannels = shouldConsiderArchivedChannels(filters);
              isTargetChannelArchived = isChannelArchived(channel);

              if (!(!channels || considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived || !((_this$options$allowNo3 = _this.options.allowNotLoadedChannelPromotionForEvent) !== null && _this$options$allowNo3 !== void 0 && _this$options$allowNo3['notification.message_new']))) {
                _context4.next = 12;
                break;
              }

              return _context4.abrupt("return");

            case 12:
              _this.setChannels(promoteChannel({
                channels: channels,
                channelToMove: channel,
                sort: sort
              }));

            case 13:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x3) {
      return _ref11.apply(this, arguments);
    };
  }());

  _defineProperty__default['default'](this, "channelVisibleHandler", /*#__PURE__*/function () {
    var _ref14 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(event) {
      var _this$options$allowNo4;

      var channelType, channelId, channel, _this$state$getLatest9, channels, pagination, _ref15, sort, filters, considerArchivedChannels, isTargetChannelArchived;

      return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              channelType = event.channel_type, channelId = event.channel_id;

              if (!(!channelType || !channelId)) {
                _context5.next = 3;
                break;
              }

              return _context5.abrupt("return");

            case 3:
              _context5.next = 5;
              return getAndWatchChannel({
                client: _this.client,
                id: event.channel_id,
                type: event.channel_type
              });

            case 5:
              channel = _context5.sent;
              _this$state$getLatest9 = _this.state.getLatestValue(), channels = _this$state$getLatest9.channels, pagination = _this$state$getLatest9.pagination;
              _ref15 = pagination !== null && pagination !== void 0 ? pagination : {}, sort = _ref15.sort, filters = _ref15.filters;
              considerArchivedChannels = shouldConsiderArchivedChannels(filters);
              isTargetChannelArchived = isChannelArchived(channel);

              if (!(!channels || considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived || !((_this$options$allowNo4 = _this.options.allowNotLoadedChannelPromotionForEvent) !== null && _this$options$allowNo4 !== void 0 && _this$options$allowNo4['channel.visible']))) {
                _context5.next = 12;
                break;
              }

              return _context5.abrupt("return");

            case 12:
              _this.setChannels(promoteChannel({
                channels: channels,
                channelToMove: channel,
                sort: sort
              }));

            case 13:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    return function (_x4) {
      return _ref14.apply(this, arguments);
    };
  }());

  _defineProperty__default['default'](this, "notificationRemovedFromChannelHandler", this.channelDeletedHandler);

  _defineProperty__default['default'](this, "memberUpdatedHandler", function (event) {
    var _event$member;

    var _this$state$getLatest10 = _this.state.getLatestValue(),
        pagination = _this$state$getLatest10.pagination,
        channels = _this$state$getLatest10.channels;

    var filters = pagination.filters,
        sort = pagination.sort;

    if (!((_event$member = event.member) !== null && _event$member !== void 0 && _event$member.user) || event.member.user.id !== _this.client.userID || !event.channel_type || !event.channel_id) {
      return;
    }

    var channelType = event.channel_type;
    var channelId = event.channel_id;
    var considerPinnedChannels = shouldConsiderPinnedChannels(sort);
    var considerArchivedChannels = shouldConsiderArchivedChannels(filters);
    var pinnedAtSort = extractSortValue({
      atIndex: 0,
      sort: sort,
      targetKey: 'pinned_at'
    });

    if (!channels || !considerPinnedChannels && !considerArchivedChannels || _this.options.lockChannelOrder) {
      return;
    }

    var targetChannel = _this.client.channel(channelType, channelId); // assumes that channel instances are not changing


    var targetChannelIndex = channels.indexOf(targetChannel);
    var targetChannelExistsWithinList = targetChannelIndex >= 0;
    var isTargetChannelPinned = isChannelPinned(targetChannel);
    var isTargetChannelArchived = isChannelArchived(targetChannel);

    var newChannels = _toConsumableArray__default['default'](channels);

    if (targetChannelExistsWithinList) {
      newChannels.splice(targetChannelIndex, 1);
    } // handle archiving (remove channel)


    if ( // When archived filter true, and channel is unarchived
    considerArchivedChannels && !isTargetChannelArchived && filters !== null && filters !== void 0 && filters.archived || // When archived filter false, and channel is archived
    considerArchivedChannels && isTargetChannelArchived && !(filters !== null && filters !== void 0 && filters.archived)) {
      _this.setChannels(newChannels);

      return;
    } // handle pinning


    var lastPinnedChannelIndex = null;

    if (pinnedAtSort === 1 || pinnedAtSort === -1 && !isTargetChannelPinned) {
      lastPinnedChannelIndex = findLastPinnedChannelIndex({
        channels: newChannels
      });
    }

    var newTargetChannelIndex = typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0; // skip state update if the position of the channel does not change

    if (channels[newTargetChannelIndex] === targetChannel) {
      return;
    }

    newChannels.splice(newTargetChannelIndex, 0, targetChannel);

    _this.setChannels(newChannels);
  });

  _defineProperty__default['default'](this, "subscriptionOrOverride", function (event) {
    var handlerName = channelManagerEventToHandlerMapping[event.type];

    var defaultEventHandler = _this.eventHandlers.get(handlerName);

    var eventHandlerOverride = _this.eventHandlerOverrides.get(handlerName);

    if (eventHandlerOverride && typeof eventHandlerOverride === 'function') {
      eventHandlerOverride(_this.setChannels, event);
      return;
    }

    if (defaultEventHandler && typeof defaultEventHandler === 'function') {
      defaultEventHandler(event);
    }
  });

  _defineProperty__default['default'](this, "registerSubscriptions", function () {
    if (_this.unsubscribeFunctions.size) {
      // Already listening for events and changes
      return;
    }

    for (var _i = 0, _Object$keys = Object.keys(channelManagerEventToHandlerMapping); _i < _Object$keys.length; _i++) {
      var eventType = _Object$keys[_i];

      _this.unsubscribeFunctions.add(_this.client.on(eventType, _this.subscriptionOrOverride).unsubscribe);
    }
  });

  _defineProperty__default['default'](this, "unregisterSubscriptions", function () {
    _this.unsubscribeFunctions.forEach(function (cleanupFunction) {
      return cleanupFunction();
    });

    _this.unsubscribeFunctions.clear();
  });

  this.client = client;
  this.state = new StateStore({
    channels: [],
    pagination: {
      isLoading: false,
      isLoadingNext: false,
      hasNext: false,
      filters: {},
      sort: {},
      options: DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS
    },
    initialized: false
  });
  this.setEventHandlerOverrides(_eventHandlerOverrides);
  this.setOptions(_options);
  this.eventHandlers = new Map(Object.entries({
    channelDeletedHandler: this.channelDeletedHandler,
    channelHiddenHandler: this.channelHiddenHandler,
    channelVisibleHandler: this.channelVisibleHandler,
    memberUpdatedHandler: this.memberUpdatedHandler,
    newMessageHandler: this.newMessageHandler,
    notificationAddedToChannelHandler: this.notificationAddedToChannelHandler,
    notificationNewMessageHandler: this.notificationNewMessageHandler,
    notificationRemovedFromChannelHandler: this.notificationRemovedFromChannelHandler
  }));
};

var _excluded$1 = ["created_at", "updated_at", "last_active", "online"],
    _excluded2 = ["params", "headers"];

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function isString(x) {
  return typeof x === 'string' || x instanceof String;
}

var StreamChat = /*#__PURE__*/function () {
  function StreamChat(_key, secretOrOptions, _options) {
    var _this = this,
        _this$options;

    _classCallCheck__default['default'](this, StreamChat);

    _defineProperty__default['default'](this, "_user", void 0);

    _defineProperty__default['default'](this, "activeChannels", void 0);

    _defineProperty__default['default'](this, "threads", void 0);

    _defineProperty__default['default'](this, "polls", void 0);

    _defineProperty__default['default'](this, "anonymous", void 0);

    _defineProperty__default['default'](this, "persistUserOnConnectionFailure", void 0);

    _defineProperty__default['default'](this, "axiosInstance", void 0);

    _defineProperty__default['default'](this, "baseURL", void 0);

    _defineProperty__default['default'](this, "browser", void 0);

    _defineProperty__default['default'](this, "cleaningIntervalRef", void 0);

    _defineProperty__default['default'](this, "clientID", void 0);

    _defineProperty__default['default'](this, "configs", void 0);

    _defineProperty__default['default'](this, "key", void 0);

    _defineProperty__default['default'](this, "listeners", void 0);

    _defineProperty__default['default'](this, "logger", void 0);

    _defineProperty__default['default'](this, "recoverStateOnReconnect", void 0);

    _defineProperty__default['default'](this, "moderation", void 0);

    _defineProperty__default['default'](this, "mutedChannels", void 0);

    _defineProperty__default['default'](this, "mutedUsers", void 0);

    _defineProperty__default['default'](this, "node", void 0);

    _defineProperty__default['default'](this, "options", void 0);

    _defineProperty__default['default'](this, "secret", void 0);

    _defineProperty__default['default'](this, "setUserPromise", void 0);

    _defineProperty__default['default'](this, "state", void 0);

    _defineProperty__default['default'](this, "tokenManager", void 0);

    _defineProperty__default['default'](this, "user", void 0);

    _defineProperty__default['default'](this, "userAgent", void 0);

    _defineProperty__default['default'](this, "userID", void 0);

    _defineProperty__default['default'](this, "wsBaseURL", void 0);

    _defineProperty__default['default'](this, "wsConnection", void 0);

    _defineProperty__default['default'](this, "wsFallback", void 0);

    _defineProperty__default['default'](this, "wsPromise", void 0);

    _defineProperty__default['default'](this, "consecutiveFailures", void 0);

    _defineProperty__default['default'](this, "insightMetrics", void 0);

    _defineProperty__default['default'](this, "defaultWSTimeoutWithFallback", void 0);

    _defineProperty__default['default'](this, "defaultWSTimeout", void 0);

    _defineProperty__default['default'](this, "sdkIdentifier", void 0);

    _defineProperty__default['default'](this, "deviceIdentifier", void 0);

    _defineProperty__default['default'](this, "nextRequestAbortController", null);

    _defineProperty__default['default'](this, "_getConnectionID", function () {
      var _this$wsConnection, _this$wsFallback;

      return ((_this$wsConnection = _this.wsConnection) === null || _this$wsConnection === void 0 ? void 0 : _this$wsConnection.connectionID) || ((_this$wsFallback = _this.wsFallback) === null || _this$wsFallback === void 0 ? void 0 : _this$wsFallback.connectionID);
    });

    _defineProperty__default['default'](this, "_hasConnectionID", function () {
      return Boolean(_this._getConnectionID());
    });

    _defineProperty__default['default'](this, "connectUser", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(user, userTokenOrProvider) {
        var setTokenPromise, wsPromise;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (user.id) {
                  _context.next = 2;
                  break;
                }

                throw new Error('The "id" field on the user is missing');

              case 2:
                if (!(_this.userID === user.id && _this.setUserPromise)) {
                  _context.next = 5;
                  break;
                }

                console.warn('Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.');
                return _context.abrupt("return", _this.setUserPromise);

              case 5:
                if (!_this.userID) {
                  _context.next = 7;
                  break;
                }

                throw new Error('Use client.disconnect() before trying to connect as a different user. connectUser was called twice.');

              case 7:
                if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {
                  console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add "allowServerSideConnect: true" to the client options to disable this warning.');
                } // we generate the client id client side


                _this.userID = user.id;
                _this.anonymous = false;
                setTokenPromise = _this._setToken(user, userTokenOrProvider);

                _this._setUser(user);

                wsPromise = _this.openConnection();
                _this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(function (result) {
                  return result[1];
                } // We only return connection promise;
                );
                _context.prev = 14;
                _context.next = 17;
                return _this.setUserPromise;

              case 17:
                return _context.abrupt("return", _context.sent);

              case 20:
                _context.prev = 20;
                _context.t0 = _context["catch"](14);

                if (_this.persistUserOnConnectionFailure) {
                  // cleanup client to allow the user to retry connectUser again
                  _this.closeConnection();
                } else {
                  _this.disconnectUser();
                }

                throw _context.t0;

              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[14, 20]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "setUser", this.connectUser);

    _defineProperty__default['default'](this, "_setToken", function (user, userTokenOrProvider) {
      return _this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);
    });

    _defineProperty__default['default'](this, "closeConnection", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(timeout) {
        var _this$wsConnection2, _this$wsFallback2;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (_this.cleaningIntervalRef != null) {
                  clearInterval(_this.cleaningIntervalRef);
                  _this.cleaningIntervalRef = undefined;
                }

                _context2.next = 3;
                return Promise.all([(_this$wsConnection2 = _this.wsConnection) === null || _this$wsConnection2 === void 0 ? void 0 : _this$wsConnection2.disconnect(timeout), (_this$wsFallback2 = _this.wsFallback) === null || _this$wsFallback2 === void 0 ? void 0 : _this$wsFallback2.disconnect(timeout)]);

              case 3:
                return _context2.abrupt("return", Promise.resolve());

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "createChannelManager", function (_ref3) {
      var _ref3$eventHandlerOve = _ref3.eventHandlerOverrides,
          eventHandlerOverrides = _ref3$eventHandlerOve === void 0 ? {} : _ref3$eventHandlerOve,
          _ref3$options = _ref3.options,
          options = _ref3$options === void 0 ? {} : _ref3$options;
      return new ChannelManager({
        client: _this,
        eventHandlerOverrides: eventHandlerOverrides,
        options: options
      });
    });

    _defineProperty__default['default'](this, "openConnection", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
      var _this$wsConnection3, _this$wsConnection4, _this$wsFallback3;

      return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (_this.userID) {
                _context3.next = 2;
                break;
              }

              throw Error('User is not set on client, use client.connectUser or client.connectAnonymousUser instead');

            case 2:
              if (!((_this$wsConnection3 = _this.wsConnection) !== null && _this$wsConnection3 !== void 0 && _this$wsConnection3.isConnecting && _this.wsPromise)) {
                _context3.next = 5;
                break;
              }

              _this.logger('info', 'client:openConnection() - connection already in progress', {
                tags: ['connection', 'client']
              });

              return _context3.abrupt("return", _this.wsPromise);

            case 5:
              if (!(((_this$wsConnection4 = _this.wsConnection) !== null && _this$wsConnection4 !== void 0 && _this$wsConnection4.isHealthy || (_this$wsFallback3 = _this.wsFallback) !== null && _this$wsFallback3 !== void 0 && _this$wsFallback3.isHealthy()) && _this._hasConnectionID())) {
                _context3.next = 8;
                break;
              }

              _this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists', {
                tags: ['connection', 'client']
              });

              return _context3.abrupt("return");

            case 8:
              _this.clientID = "".concat(_this.userID, "--").concat(randomId());
              _this.wsPromise = _this.connect();

              _this._startCleaning();

              return _context3.abrupt("return", _this.wsPromise);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));

    _defineProperty__default['default'](this, "_setupConnection", this.openConnection);

    _defineProperty__default['default'](this, "_normalizeDate", function (before) {
      if (before instanceof Date) {
        before = before.toISOString();
      }

      if (before === '') {
        throw new Error("Don't pass blank string for since, use null instead if resetting the token revoke");
      }

      return before;
    });

    _defineProperty__default['default'](this, "disconnectUser", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(timeout) {
        var closePromise, _i, _Object$values, _channel;

        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _this.logger('info', 'client:disconnect() - Disconnecting the client', {
                  tags: ['connection', 'client']
                }); // remove the user specific fields


                delete _this.user;
                delete _this._user;
                delete _this.userID;
                _this.anonymous = false;
                closePromise = _this.closeConnection(timeout);

                for (_i = 0, _Object$values = Object.values(_this.activeChannels); _i < _Object$values.length; _i++) {
                  _channel = _Object$values[_i];

                  _channel._disconnect();
                } // ensure we no longer return inactive channels


                _this.activeChannels = {}; // reset client state

                _this.state = new ClientState({
                  client: _this
                }); // reset thread manager

                _this.threads.resetState(); // reset token manager


                setTimeout(_this.tokenManager.reset); // delay reseting to use token for disconnect calls
                // close the WS connection

                return _context4.abrupt("return", closePromise);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "disconnect", this.disconnectUser);

    _defineProperty__default['default'](this, "connectAnonymousUser", function () {
      if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {
        console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add "allowServerSideConnect: true" to the client options to disable this warning.');
      }

      _this.anonymous = true;
      _this.userID = randomId();
      var anonymousUser = {
        id: _this.userID,
        anon: true
      };

      _this._setToken(anonymousUser, '');

      _this._setUser(anonymousUser);

      return _this._setupConnection();
    });

    _defineProperty__default['default'](this, "setAnonymousUser", this.connectAnonymousUser);

    _defineProperty__default['default'](this, "doAxiosRequest", /*#__PURE__*/function () {
      var _ref6 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(type, url, data) {
        var options,
            requestConfig,
            response,
            _requestConfig$header,
            _args5 = arguments;

        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                options = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : {};
                _context5.next = 3;
                return _this.tokenManager.tokenReady();

              case 3:
                requestConfig = _this._enrichAxiosOptions(options);
                _context5.prev = 4;

                _this._logApiRequest(type, url, data, requestConfig);

                _context5.t0 = type;
                _context5.next = _context5.t0 === 'get' ? 9 : _context5.t0 === 'delete' ? 13 : _context5.t0 === 'post' ? 17 : _context5.t0 === 'postForm' ? 21 : _context5.t0 === 'put' ? 25 : _context5.t0 === 'patch' ? 29 : _context5.t0 === 'options' ? 33 : 37;
                break;

              case 9:
                _context5.next = 11;
                return _this.axiosInstance.get(url, requestConfig);

              case 11:
                response = _context5.sent;
                return _context5.abrupt("break", 38);

              case 13:
                _context5.next = 15;
                return _this.axiosInstance.delete(url, requestConfig);

              case 15:
                response = _context5.sent;
                return _context5.abrupt("break", 38);

              case 17:
                _context5.next = 19;
                return _this.axiosInstance.post(url, data, requestConfig);

              case 19:
                response = _context5.sent;
                return _context5.abrupt("break", 38);

              case 21:
                _context5.next = 23;
                return _this.axiosInstance.postForm(url, data, requestConfig);

              case 23:
                response = _context5.sent;
                return _context5.abrupt("break", 38);

              case 25:
                _context5.next = 27;
                return _this.axiosInstance.put(url, data, requestConfig);

              case 27:
                response = _context5.sent;
                return _context5.abrupt("break", 38);

              case 29:
                _context5.next = 31;
                return _this.axiosInstance.patch(url, data, requestConfig);

              case 31:
                response = _context5.sent;
                return _context5.abrupt("break", 38);

              case 33:
                _context5.next = 35;
                return _this.axiosInstance.options(url, requestConfig);

              case 35:
                response = _context5.sent;
                return _context5.abrupt("break", 38);

              case 37:
                throw new Error('Invalid request type');

              case 38:
                _this._logApiResponse(type, url, response);

                _this.consecutiveFailures = 0;
                return _context5.abrupt("return", _this.handleResponse(response));

              case 43:
                _context5.prev = 43;
                _context5.t1 = _context5["catch"](4);
                _context5.t1.client_request_id = (_requestConfig$header = requestConfig.headers) === null || _requestConfig$header === void 0 ? void 0 : _requestConfig$header['x-client-request-id'];

                _this._logApiError(type, url, _context5.t1);

                _this.consecutiveFailures += 1;

                if (!_context5.t1.response) {
                  _context5.next = 60;
                  break;
                }

                if (!(_context5.t1.response.data.code === chatCodes.TOKEN_EXPIRED && !_this.tokenManager.isStatic())) {
                  _context5.next = 57;
                  break;
                }

                if (!(_this.consecutiveFailures > 1)) {
                  _context5.next = 53;
                  break;
                }

                _context5.next = 53;
                return sleep(retryInterval(_this.consecutiveFailures));

              case 53:
                _this.tokenManager.loadToken();

                _context5.next = 56;
                return _this.doAxiosRequest(type, url, data, options);

              case 56:
                return _context5.abrupt("return", _context5.sent);

              case 57:
                return _context5.abrupt("return", _this.handleResponse(_context5.t1.response));

              case 60:
                throw _context5.t1;

              case 61:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[4, 43]]);
      }));

      return function (_x5, _x6, _x7) {
        return _ref6.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "dispatchEvent", function (event) {
      if (!event.received_at) event.received_at = new Date(); // client event handlers

      var postListenerCallbacks = _this._handleClientEvent(event); // channel event handlers


      var cid = event.cid;
      var channel = cid ? _this.activeChannels[cid] : undefined;

      if (channel) {
        channel._handleChannelEvent(event);
      }

      _this._callClientListeners(event);

      if (channel) {
        channel._callChannelListeners(event);
      }

      postListenerCallbacks.forEach(function (c) {
        return c();
      });
    });

    _defineProperty__default['default'](this, "handleEvent", function (messageEvent) {
      // dispatch the event to the channel listeners
      var jsonString = messageEvent.data;
      var event = JSON.parse(jsonString);

      _this.dispatchEvent(event);
    });

    _defineProperty__default['default'](this, "_updateMemberWatcherReferences", function (user) {
      var refMap = _this.state.userChannelReferences[user.id] || {};

      for (var _channelID in refMap) {
        var _channel2 = _this.activeChannels[_channelID];

        if (_channel2 !== null && _channel2 !== void 0 && _channel2.state) {
          if (_channel2.state.members[user.id]) {
            _channel2.state.members[user.id].user = user;
          }

          if (_channel2.state.watchers[user.id]) {
            _channel2.state.watchers[user.id] = user;
          }

          if (_channel2.state.read[user.id]) {
            _channel2.state.read[user.id].user = user;
          }
        }
      }
    });

    _defineProperty__default['default'](this, "_updateUserReferences", this._updateMemberWatcherReferences);

    _defineProperty__default['default'](this, "_updateUserMessageReferences", function (user) {
      var refMap = _this.state.userChannelReferences[user.id] || {};

      for (var _channelID2 in refMap) {
        var _channel3 = _this.activeChannels[_channelID2];
        if (!_channel3) continue;
        var state = _channel3.state;
        /** update the messages from this user. */

        state === null || state === void 0 ? void 0 : state.updateUserMessages(user);
      }
    });

    _defineProperty__default['default'](this, "_deleteUserMessageReference", function (user) {
      var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var refMap = _this.state.userChannelReferences[user.id] || {};

      for (var _channelID3 in refMap) {
        var _channel4 = _this.activeChannels[_channelID3];

        if (_channel4) {
          var state = _channel4.state;
          /** deleted the messages from this user. */

          state === null || state === void 0 ? void 0 : state.deleteUserMessages(user, hardDelete);
        }
      }
    });

    _defineProperty__default['default'](this, "_handleUserEvent", function (event) {
      if (!event.user) {
        return;
      }
      /** update the client.state with any changes to users */


      if (event.type === 'user.presence.changed' || event.type === 'user.updated') {
        if (event.user.id === _this.userID) {
          var user = _objectSpread$1({}, _this.user || {});

          var _user = _objectSpread$1({}, _this._user || {}); // Remove deleted properties from user objects.


          for (var _key2 in _this.user) {
            if (_key2 in event.user || isOwnUserBaseProperty(_key2)) {
              continue;
            }

            delete user[_key2];
            delete _user[_key2];
          }
          /** Updating only available properties in _user object. */


          for (var _key3 in event.user) {
            if (_user && _key3 in _user) {
              _user[_key3] = event.user[_key3];
            }
          } // @ts-expect-error


          _this._user = _objectSpread$1({}, _user);
          _this.user = _objectSpread$1(_objectSpread$1({}, user), event.user);
        }

        _this.state.updateUser(event.user);

        _this._updateMemberWatcherReferences(event.user);
      }

      if (event.type === 'user.updated') {
        _this._updateUserMessageReferences(event.user);
      }

      if (event.type === 'user.deleted' && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {
        _this._deleteUserMessageReference(event.user, event.hard_delete);
      }
    });

    _defineProperty__default['default'](this, "_callClientListeners", function (event) {
      var client = _this; // gather and call the listeners

      var listeners = [];

      if (client.listeners.all) {
        listeners.push.apply(listeners, _toConsumableArray__default['default'](client.listeners.all));
      }

      if (client.listeners[event.type]) {
        listeners.push.apply(listeners, _toConsumableArray__default['default'](client.listeners[event.type]));
      } // call the event and send it to the listeners


      for (var _i2 = 0, _listeners = listeners; _i2 < _listeners.length; _i2++) {
        var listener = _listeners[_i2];
        listener(event);
      }
    });

    _defineProperty__default['default'](this, "recoverState", /*#__PURE__*/_asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6() {
      var cids;
      return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _this.logger('info', "client:recoverState() - Start of recoverState with connectionID ".concat(_this._getConnectionID()), {
                tags: ['connection']
              });

              cids = Object.keys(_this.activeChannels);

              if (!(cids.length && _this.recoverStateOnReconnect)) {
                _context6.next = 10;
                break;
              }

              _this.logger('info', "client:recoverState() - Start the querying of ".concat(cids.length, " channels"), {
                tags: ['connection', 'client']
              });

              _context6.next = 6;
              return _this.queryChannels({
                cid: {
                  $in: cids
                }
              }, {
                last_message_at: -1
              }, {
                limit: 30
              });

            case 6:
              _this.logger('info', 'client:recoverState() - Querying channels finished', {
                tags: ['connection', 'client']
              });

              _this.dispatchEvent({
                type: 'connection.recovered'
              });

              _context6.next = 11;
              break;

            case 10:
              _this.dispatchEvent({
                type: 'connection.recovered'
              });

            case 11:
              _this.wsPromise = Promise.resolve();
              _this.setUserPromise = Promise.resolve();

            case 13:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));

    _defineProperty__default['default'](this, "getChannelByMembers", function (channelType, custom) {
      var _custom$members;

      // Check if the channel already exists.
      // Only allow 1 channel object per cid
      var memberIds = ((_custom$members = custom.members) !== null && _custom$members !== void 0 ? _custom$members : []).map(function (member) {
        var _member$user_id;

        return typeof member === 'string' ? member : (_member$user_id = member.user_id) !== null && _member$user_id !== void 0 ? _member$user_id : '';
      });
      var membersStr = memberIds.sort().join(',');
      var tempCid = generateChannelTempCid(channelType, memberIds);

      if (!tempCid) {
        throw Error('Please specify atleast one member when creating unique conversation');
      } // channel could exist in `activeChannels` list with either one of the following two keys:
      // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create
      // 2. Sorted membersStr - E.g., "messaging:amin,vishal" OR "messaging:amin,jaap,tom"
      //                        This is set when you create a channel, but haven't queried yet. After query,
      //                        we will replace it with `cid`


      for (var _key4 in _this.activeChannels) {
        var _channel5 = _this.activeChannels[_key4];

        if (_channel5.disconnected) {
          continue;
        }

        if (_key4 === tempCid) {
          return _channel5;
        }

        if (_key4.indexOf("".concat(channelType, ":!members-")) === 0) {
          var membersStrInExistingChannel = Object.keys(_channel5.state.members).sort().join(',');

          if (membersStrInExistingChannel === membersStr) {
            return _channel5;
          }
        }
      }

      var channel = new Channel(_this, channelType, undefined, custom); // For the time being set the key as membersStr, since we don't know the cid yet.
      // In channel.query, we will replace it with 'cid'.

      if (_this._cacheEnabled()) {
        _this.activeChannels[tempCid] = channel;
      }

      return channel;
    });

    _defineProperty__default['default'](this, "getChannelById", function (channelType, channelID, custom) {
      if (typeof channelID === 'string' && ~channelID.indexOf(':')) {
        throw Error("Invalid channel id ".concat(channelID, ", can't contain the : character"));
      } // only allow 1 channel object per cid


      var cid = "".concat(channelType, ":").concat(channelID);

      if (cid in _this.activeChannels && _this.activeChannels[cid] && !_this.activeChannels[cid].disconnected) {
        var _channel6 = _this.activeChannels[cid];

        if (Object.keys(custom).length > 0) {
          _channel6.data = _objectSpread$1(_objectSpread$1({}, _channel6.data), custom);
          _channel6._data = _objectSpread$1(_objectSpread$1({}, _channel6._data), custom);
        }

        return _channel6;
      }

      var channel = new Channel(_this, channelType, channelID, custom);

      if (_this._cacheEnabled()) {
        _this.activeChannels[channel.cid] = channel;
      }

      return channel;
    });

    _defineProperty__default['default'](this, "updateUsers", this.upsertUsers);

    _defineProperty__default['default'](this, "updateUser", this.upsertUser);

    _defineProperty__default['default'](this, "_unblockMessage", this.unblockMessage);

    _defineProperty__default['default'](this, "markAllRead", this.markChannelsRead);

    _defineProperty__default['default'](this, "_isUsingServerAuth", function () {
      return !!_this.secret;
    });

    _defineProperty__default['default'](this, "_cacheEnabled", function () {
      return !_this._isUsingServerAuth() || !_this.options.disableCache;
    });

    _defineProperty__default['default'](this, "_buildWSPayload", function (client_request_id) {
      return JSON.stringify({
        user_id: _this.userID,
        user_details: _this._user,
        device: _this.options.device,
        client_request_id: client_request_id
      });
    });

    // set the key
    this.key = _key;
    this.listeners = {};
    this.state = new ClientState({
      client: this
    }); // a list of channels to hide ws events from

    this.mutedChannels = [];
    this.mutedUsers = [];
    this.moderation = new Moderation(this); // set the secret

    if (secretOrOptions && isString(secretOrOptions)) {
      this.secret = secretOrOptions;
    } // set the options... and figure out defaults...


    var inputOptions = _options ? _options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};
    this.browser = typeof inputOptions.browser !== 'undefined' ? inputOptions.browser : typeof window !== 'undefined';
    this.node = !this.browser;
    this.options = _objectSpread$1({
      timeout: 3000,
      withCredentials: false,
      // making sure cookies are not sent
      warmUp: false,
      recoverStateOnReconnect: true,
      disableCache: false,
      wsUrlParams: new URLSearchParams({})
    }, inputOptions);

    if (this.node && !this.options.httpsAgent) {
      this.options.httpsAgent = new https__default['default'].Agent({
        keepAlive: true,
        keepAliveMsecs: 3000
      });
    }

    this.axiosInstance = axios__default['default'].create(this.options);
    this.setBaseURL(this.options.baseURL || 'https://chat.stream-io-api.com');

    if (typeof process !== 'undefined' && 'env' in process && process.env.STREAM_LOCAL_TEST_RUN) {
      this.setBaseURL('http://localhost:3030');
    }

    if (typeof process !== 'undefined' && 'env' in process && process.env.STREAM_LOCAL_TEST_HOST) {
      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);
    } // WS connection is initialized when setUser is called


    this.wsConnection = null;
    this.wsPromise = null;
    this.setUserPromise = null; // keeps a reference to all the channels that are in use

    this.activeChannels = {}; // mapping between channel groups and configs

    this.configs = {};
    this.anonymous = false;
    this.persistUserOnConnectionFailure = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.persistUserOnConnectionFailure; // If its a server-side client, then lets initialize the tokenManager, since token will be
    // generated from secret.

    this.tokenManager = new TokenManager(this.secret);
    this.consecutiveFailures = 0;
    this.insightMetrics = new InsightMetrics();
    this.defaultWSTimeoutWithFallback = 6 * 1000;
    this.defaultWSTimeout = 15 * 1000;
    this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;
    /**
     * logger function should accept 3 parameters:
     * @param logLevel string
     * @param message   string
     * @param extraData object
     *
     * e.g.,
     * const client = new StreamChat('api_key', {}, {
     * 		logger = (logLevel, message, extraData) => {
     * 			console.log(message);
     * 		}
     * })
     *
     * extraData contains tags array attached to log message. Tags can have one/many of following values:
     * 1. api
     * 2. api_request
     * 3. api_response
     * 4. client
     * 5. channel
     * 6. connection
     * 7. event
     *
     * It may also contains some extra data, some examples have been mentioned below:
     * 1. {
     * 		tags: ['api', 'api_request', 'client'],
     * 		url: string,
     * 		payload: object,
     * 		config: object
     * }
     * 2. {
     * 		tags: ['api', 'api_response', 'client'],
     * 		url: string,
     * 		response: object
     * }
     * 3. {
     * 		tags: ['api', 'api_response', 'client'],
     * 		url: string,
     * 		error: object
     * }
     * 4. {
     * 		tags: ['event', 'client'],
     * 		event: object
     * }
     * 5. {
     * 		tags: ['channel'],
     * 		channel: object
     * }
     */

    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : function () {
      return null;
    };
    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;
    this.threads = new ThreadManager({
      client: this
    });
    this.polls = new PollManager({
      client: this
    });
  }
  /**
   * Get a client instance
   *
   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections
   *
   * **After the first call, the client configuration will not change if the key or options parameters change**
   *
   * @param {string} key - the api key
   * @param {string} [secret] - the api secret
   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance
   * @param {boolean} [options.browser] - enforce the client to be in browser mode
   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests
   * @param {Logger} [options.Logger] - custom logger
   * @param {number} [options.timeout] - default to 3000
   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()
   * @example <caption>initialize the client in user mode</caption>
   * StreamChat.getInstance('api_key')
   * @example <caption>initialize the client in user mode with options</caption>
   * StreamChat.getInstance('api_key', { timeout:5000 })
   * @example <caption>secret is optional and only used in server side mode</caption>
   * StreamChat.getInstance('api_key', "secret", { httpsAgent: customAgent })
   */


  _createClass__default['default'](StreamChat, [{
    key: "devToken",
    value: function devToken(userID) {
      return DevToken(userID);
    }
  }, {
    key: "getAuthType",
    value: function getAuthType() {
      return this.anonymous ? 'anonymous' : 'jwt';
    }
  }, {
    key: "setBaseURL",
    value: function setBaseURL(baseURL) {
      this.baseURL = baseURL;
      this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');
    }
  }, {
    key: "_setUser",
    value: function _setUser(user) {
      /**
       * This one is used by the frontend. This is a copy of the current user object stored on backend.
       * It contains reserved properties and own user properties which are not present in `this._user`.
       */
      this.user = user;
      this.userID = user.id; // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.

      this._user = _objectSpread$1({}, user);
    }
    /**
     * Disconnects the websocket connection, without removing the user set on client.
     * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need
     * to call client.openConnection to reconnect to websocket.
     *
     * This is mainly useful on mobile side. You can only receive push notifications
     * if you don't have active websocket connection.
     * So when your app goes to background, you can call `client.closeConnection`.
     * And when app comes back to foreground, call `client.openConnection`.
     *
     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.
     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
     */

  }, {
    key: "updateAppSettings",
    value:
    /**
     * updateAppSettings - updates application settings
     *
     * @param {AppSettings} options App settings.
     * IE: {
        'apn_config': {
          'auth_type': 'token',
          'auth_key": fs.readFileSync(
            './apn-push-auth-key.p8',
            'utf-8',
          ),
          'key_id': 'keyid',
          'team_id': 'teamid',
          'notification_template": 'notification handlebars template',
          'bundle_id': 'com.apple.your.app',
          'development': true
        },
        'firebase_config': {
          'server_key': 'server key from fcm',
          'notification_template': 'notification handlebars template',
          'data_template': 'data handlebars template',
          'apn_template': 'apn notification handlebars template under v2'
        },
        'webhook_url': 'https://acme.com/my/awesome/webhook/'
      }
     */
    function () {
      var _updateAppSettings = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(options) {
        var apn_config;
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                apn_config = options.apn_config;

                if (apn_config !== null && apn_config !== void 0 && apn_config.p12_cert) {
                  options = _objectSpread$1(_objectSpread$1({}, options), {}, {
                    apn_config: _objectSpread$1(_objectSpread$1({}, apn_config), {}, {
                      p12_cert: Buffer.from(apn_config.p12_cert).toString('base64')
                    })
                  });
                }

                _context7.next = 4;
                return this.patch(this.baseURL + '/app', options);

              case 4:
                return _context7.abrupt("return", _context7.sent);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function updateAppSettings(_x8) {
        return _updateAppSettings.apply(this, arguments);
      }

      return updateAppSettings;
    }()
  }, {
    key: "revokeTokens",
    value:
    /**
     * Revokes all tokens on application level issued before given time
     */
    function () {
      var _revokeTokens = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(before) {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.updateAppSettings({
                  revoke_tokens_issued_before: this._normalizeDate(before)
                });

              case 2:
                return _context8.abrupt("return", _context8.sent);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function revokeTokens(_x9) {
        return _revokeTokens.apply(this, arguments);
      }

      return revokeTokens;
    }()
    /**
     * Revokes token for a user issued before given time
     */

  }, {
    key: "revokeUserToken",
    value: function () {
      var _revokeUserToken = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9(userID, before) {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.revokeUsersToken([userID], before);

              case 2:
                return _context9.abrupt("return", _context9.sent);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function revokeUserToken(_x10, _x11) {
        return _revokeUserToken.apply(this, arguments);
      }

      return revokeUserToken;
    }()
    /**
     * Revokes tokens for a list of users issued before given time
     */

  }, {
    key: "revokeUsersToken",
    value: function () {
      var _revokeUsersToken = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(userIDs, before) {
        var users, _iterator, _step, userID;

        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (before === undefined) {
                  before = new Date().toISOString();
                } else {
                  before = this._normalizeDate(before);
                }

                users = [];
                _iterator = _createForOfIteratorHelper(userIDs);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    userID = _step.value;
                    users.push({
                      id: userID,
                      set: {
                        revoke_tokens_issued_before: before
                      }
                    });
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                _context10.next = 6;
                return this.partialUpdateUsers(users);

              case 6:
                return _context10.abrupt("return", _context10.sent);

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function revokeUsersToken(_x12, _x13) {
        return _revokeUsersToken.apply(this, arguments);
      }

      return revokeUsersToken;
    }()
    /**
     * getAppSettings - retrieves application settings
     */

  }, {
    key: "getAppSettings",
    value: function () {
      var _getAppSettings = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11() {
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.get(this.baseURL + '/app');

              case 2:
                return _context11.abrupt("return", _context11.sent);

              case 3:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getAppSettings() {
        return _getAppSettings.apply(this, arguments);
      }

      return getAppSettings;
    }()
    /**
     * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates
     *
     * @param {string} userID User ID. If user has no devices, it will error
     * @param {TestPushDataInput} [data] Overrides for push templates/message used
     *  IE: {
          messageID: 'id-of-message', // will error if message does not exist
          apnTemplate: '{}', // if app doesn't have apn configured it will error
          firebaseTemplate: '{}', // if app doesn't have firebase configured it will error
          firebaseDataTemplate: '{}', // if app doesn't have firebase configured it will error
          skipDevices: true, // skip config/device checks and sending to real devices
          pushProviderName: 'staging' // one of your configured push providers
          pushProviderType: 'apn' // one of supported provider types
        }
    */

  }, {
    key: "testPushSettings",
    value: function () {
      var _testPushSettings = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12(userID) {
        var data,
            _args12 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                data = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};
                _context12.next = 3;
                return this.post(this.baseURL + '/check_push', _objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1({
                  user_id: userID
                }, data.messageID ? {
                  message_id: data.messageID
                } : {}), data.apnTemplate ? {
                  apn_template: data.apnTemplate
                } : {}), data.firebaseTemplate ? {
                  firebase_template: data.firebaseTemplate
                } : {}), data.firebaseDataTemplate ? {
                  firebase_data_template: data.firebaseDataTemplate
                } : {}), data.skipDevices ? {
                  skip_devices: true
                } : {}), data.pushProviderName ? {
                  push_provider_name: data.pushProviderName
                } : {}), data.pushProviderType ? {
                  push_provider_type: data.pushProviderType
                } : {}));

              case 3:
                return _context12.abrupt("return", _context12.sent);

              case 4:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function testPushSettings(_x14) {
        return _testPushSettings.apply(this, arguments);
      }

      return testPushSettings;
    }()
    /**
     * testSQSSettings - Tests that the given or configured SQS configuration is valid
     *
     * @param {TestSQSDataInput} [data] Overrides SQS settings for testing if needed
     *  IE: {
          sqs_key: 'auth_key',
          sqs_secret: 'auth_secret',
          sqs_url: 'url_to_queue',
        }
     */

  }, {
    key: "testSQSSettings",
    value: function () {
      var _testSQSSettings = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13() {
        var data,
            _args13 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                data = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};
                _context13.next = 3;
                return this.post(this.baseURL + '/check_sqs', data);

              case 3:
                return _context13.abrupt("return", _context13.sent);

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function testSQSSettings() {
        return _testSQSSettings.apply(this, arguments);
      }

      return testSQSSettings;
    }()
    /**
     * testSNSSettings - Tests that the given or configured SNS configuration is valid
     *
     * @param {TestSNSDataInput} [data] Overrides SNS settings for testing if needed
     *  IE: {
          sns_key: 'auth_key',
          sns_secret: 'auth_secret',
          sns_topic_arn: 'topic_to_publish_to',
        }
     */

  }, {
    key: "testSNSSettings",
    value: function () {
      var _testSNSSettings = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14() {
        var data,
            _args14 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                data = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};
                _context14.next = 3;
                return this.post(this.baseURL + '/check_sns', data);

              case 3:
                return _context14.abrupt("return", _context14.sent);

              case 4:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function testSNSSettings() {
        return _testSNSSettings.apply(this, arguments);
      }

      return testSNSSettings;
    }()
    /**
     * Disconnects the websocket and removes the user from client.
     *
     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.
     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
     */

  }, {
    key: "setGuestUser",
    value:
    /**
     * setGuestUser - Setup a temporary guest user
     *
     * @param {UserResponse<StreamChatGenerics>} user Data about this user. IE {name: "john"}
     *
     * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup
     */
    function () {
      var _setGuestUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15(user) {
        var response, _response$user, guestUser;

        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                this.anonymous = true;
                _context15.prev = 1;
                _context15.next = 4;
                return this.post(this.baseURL + '/guest', {
                  user: user
                });

              case 4:
                response = _context15.sent;
                _context15.next = 11;
                break;

              case 7:
                _context15.prev = 7;
                _context15.t0 = _context15["catch"](1);
                this.anonymous = false;
                throw _context15.t0;

              case 11:
                this.anonymous = false; // eslint-disable-next-line @typescript-eslint/no-unused-vars

                _response$user = response.user, _response$user.created_at, _response$user.updated_at, _response$user.last_active, _response$user.online, guestUser = _objectWithoutProperties__default['default'](_response$user, _excluded$1);
                _context15.next = 15;
                return this.connectUser(guestUser, response.access_token);

              case 15:
                return _context15.abrupt("return", _context15.sent);

              case 16:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this, [[1, 7]]);
      }));

      function setGuestUser(_x15) {
        return _setGuestUser.apply(this, arguments);
      }

      return setGuestUser;
    }()
    /**
     * createToken - Creates a token to authenticate this user. This function is used server side.
     * The resulting token should be passed to the client side when the users registers or logs in.
     *
     * @param {string} userID The User ID
     * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch
     *
     * @return {string} Returns a token
     */

  }, {
    key: "createToken",
    value: function createToken(userID, exp, iat) {
      if (this.secret == null) {
        throw Error("tokens can only be created server-side using the API Secret");
      }

      var extra = {};

      if (exp) {
        extra.exp = exp;
      }

      if (iat) {
        extra.iat = iat;
      }

      return JWTUserToken(this.secret, userID, extra, {});
    }
    /**
     * on - Listen to events on all channels and users your watching
     *
     * client.on('message.new', event => {console.log("my new message", event, channel.state.messages)})
     * or
     * client.on(event => {console.log(event.type)})
     *
     * @param {EventHandler<StreamChatGenerics> | string} callbackOrString  The event type to listen for (optional)
     * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call
     *
     * @return {{ unsubscribe: () => void }} Description
     */

  }, {
    key: "on",
    value: function on(callbackOrString, callbackOrNothing) {
      var _this2 = this;

      var key = callbackOrNothing ? callbackOrString : 'all';
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this.logger('info', "Attaching listener for ".concat(key, " event"), {
        tags: ['event', 'client']
      });
      this.listeners[key].push(callback);
      return {
        unsubscribe: function unsubscribe() {
          _this2.logger('info', "Removing listener for ".concat(key, " event"), {
            tags: ['event', 'client']
          });

          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {
            return el !== callback;
          });
        }
      };
    }
    /**
     * off - Remove the event handler
     *
     */

  }, {
    key: "off",
    value: function off(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : 'all';
      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this.logger('info', "Removing listener for ".concat(key, " event"), {
        tags: ['event', 'client']
      });
      this.listeners[key] = this.listeners[key].filter(function (value) {
        return value !== callback;
      });
    }
  }, {
    key: "_logApiRequest",
    value: function _logApiRequest(type, url, data, config) {
      this.logger('info', "client: ".concat(type, " - Request - ").concat(url), {
        tags: ['api', 'api_request', 'client'],
        url: url,
        payload: data,
        config: config
      });
    }
  }, {
    key: "_logApiResponse",
    value: function _logApiResponse(type, url, response) {
      this.logger('info', "client:".concat(type, " - Response - url: ").concat(url, " > status ").concat(response.status), {
        tags: ['api', 'api_response', 'client'],
        url: url,
        response: response
      });
    }
  }, {
    key: "_logApiError",
    value: function _logApiError(type, url, error) {
      this.logger('error', "client:".concat(type, " - Error - url: ").concat(url), {
        tags: ['api', 'api_response', 'client'],
        url: url,
        error: error
      });
    }
  }, {
    key: "get",
    value: function get(url, params) {
      return this.doAxiosRequest('get', url, null, {
        params: params
      });
    }
  }, {
    key: "put",
    value: function put(url, data) {
      return this.doAxiosRequest('put', url, data);
    }
  }, {
    key: "post",
    value: function post(url, data) {
      return this.doAxiosRequest('post', url, data);
    }
  }, {
    key: "patch",
    value: function patch(url, data) {
      return this.doAxiosRequest('patch', url, data);
    }
  }, {
    key: "delete",
    value: function _delete(url, params) {
      return this.doAxiosRequest('delete', url, null, {
        params: params
      });
    }
  }, {
    key: "sendFile",
    value: function sendFile(url, uri, name, contentType, user) {
      var data = addFileToFormData(uri, name, contentType || 'multipart/form-data');
      if (user != null) data.append('user', JSON.stringify(user));
      return this.doAxiosRequest('postForm', url, data, {
        headers: data.getHeaders ? data.getHeaders() : {},
        // node vs browser
        config: {
          timeout: 0,
          maxContentLength: Infinity,
          maxBodyLength: Infinity
        }
      });
    }
  }, {
    key: "errorFromResponse",
    value: function errorFromResponse(response) {
      var err;
      err = new ErrorFromResponse("StreamChat error HTTP code: ".concat(response.status));

      if (response.data && response.data.code) {
        err = new Error("StreamChat error code ".concat(response.data.code, ": ").concat(response.data.message));
        err.code = response.data.code;
      }

      err.response = response;
      err.status = response.status;
      return err;
    }
  }, {
    key: "handleResponse",
    value: function handleResponse(response) {
      var data = response.data;

      if (isErrorResponse(response)) {
        throw this.errorFromResponse(response);
      }

      return data;
    }
  }, {
    key: "_handleClientEvent",
    value: function _handleClientEvent(event) {
      var _event$me,
          _event$me2,
          _this3 = this;

      var client = this;
      var postListenerCallbacks = [];
      this.logger('info', "client:_handleClientEvent - Received event of type { ".concat(event.type, " }"), {
        tags: ['event', 'client'],
        event: event
      });

      if (event.type === 'user.presence.changed' || event.type === 'user.updated' || event.type === 'user.deleted') {
        this._handleUserEvent(event);
      }

      if (event.type === 'health.check' && event.me) {
        client.user = event.me;
        client.state.updateUser(event.me);
        client.mutedChannels = event.me.channel_mutes;
        client.mutedUsers = event.me.mutes;
      }

      if (event.channel && event.type === 'notification.message_new') {
        this._addChannelConfig(event.channel);
      }

      if (event.type === 'notification.channel_mutes_updated' && (_event$me = event.me) !== null && _event$me !== void 0 && _event$me.channel_mutes) {
        this.mutedChannels = event.me.channel_mutes;
      }

      if (event.type === 'notification.mutes_updated' && (_event$me2 = event.me) !== null && _event$me2 !== void 0 && _event$me2.mutes) {
        this.mutedUsers = event.me.mutes;
      }

      if (event.type === 'notification.mark_read' && event.unread_channels === 0) {
        var activeChannelKeys = Object.keys(this.activeChannels);
        activeChannelKeys.forEach(function (activeChannelKey) {
          return _this3.activeChannels[activeChannelKey].state.unreadCount = 0;
        });
      }

      if ((event.type === 'channel.deleted' || event.type === 'notification.channel_deleted') && event.cid) {
        var _this$activeChannels$;

        client.state.deleteAllChannelReference(event.cid);
        (_this$activeChannels$ = this.activeChannels[event.cid]) === null || _this$activeChannels$ === void 0 ? void 0 : _this$activeChannels$._disconnect();
        postListenerCallbacks.push(function () {
          if (!event.cid) return;
          delete _this3.activeChannels[event.cid];
        });
      }

      return postListenerCallbacks;
    }
  }, {
    key: "_muteStatus",
    value: function _muteStatus(cid) {
      var muteStatus;

      for (var i = 0; i < this.mutedChannels.length; i++) {
        var _mute$channel;

        var mute = this.mutedChannels[i];

        if (((_mute$channel = mute.channel) === null || _mute$channel === void 0 ? void 0 : _mute$channel.cid) === cid) {
          muteStatus = {
            muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,
            createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),
            expiresAt: mute.expires ? new Date(mute.expires) : null
          };
          break;
        }
      }

      if (muteStatus) {
        return muteStatus;
      }

      return {
        muted: false,
        createdAt: null,
        expiresAt: null
      };
    }
  }, {
    key: "connect",
    value:
    /**
     * @private
     */
    function () {
      var _connect = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16() {
        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                if (!(!this.userID || !this._user)) {
                  _context16.next = 2;
                  break;
                }

                throw Error('Call connectUser or connectAnonymousUser before starting the connection');

              case 2:
                if (this.wsBaseURL) {
                  _context16.next = 4;
                  break;
                }

                throw Error('Websocket base url not set');

              case 4:
                if (this.clientID) {
                  _context16.next = 6;
                  break;
                }

                throw Error('clientID is not set');

              case 6:
                if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {
                  this._sayHi();
                } // The StableWSConnection handles all the reconnection logic.


                if (this.options.wsConnection && this.node) {
                  // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.
                  this.options.wsConnection.setClient(this);
                  this.wsConnection = this.options.wsConnection;
                } else {
                  this.wsConnection = new StableWSConnection({
                    client: this
                  });
                }

                _context16.prev = 8;

                if (!this.wsFallback) {
                  _context16.next = 13;
                  break;
                }

                _context16.next = 12;
                return this.wsFallback.connect();

              case 12:
                return _context16.abrupt("return", _context16.sent);

              case 13:
                _context16.next = 15;
                return this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);

              case 15:
                return _context16.abrupt("return", _context16.sent);

              case 18:
                _context16.prev = 18;
                _context16.t0 = _context16["catch"](8);

                if (!(this.options.enableWSFallback && isWSFailure(_context16.t0) && isOnline())) {
                  _context16.next = 29;
                  break;
                }

                this.logger('info', 'client:connect() - WS failed, fallback to longpoll', {
                  tags: ['connection', 'client']
                });
                this.dispatchEvent({
                  type: 'transport.changed',
                  mode: 'longpoll'
                });

                this.wsConnection._destroyCurrentWSConnection();

                this.wsConnection.disconnect().then(); // close WS so no retry

                this.wsFallback = new WSConnectionFallback({
                  client: this
                });
                _context16.next = 28;
                return this.wsFallback.connect();

              case 28:
                return _context16.abrupt("return", _context16.sent);

              case 29:
                throw _context16.t0;

              case 30:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this, [[8, 18]]);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
    /**
     * Check the connectivity with server for warmup purpose.
     *
     * @private
     */

  }, {
    key: "_sayHi",
    value: function _sayHi() {
      var _this4 = this;

      var client_request_id = randomId();
      var opts = {
        headers: {
          'x-client-request-id': client_request_id
        }
      };
      this.doAxiosRequest('get', this.baseURL + '/hi', null, opts).catch(function (e) {
        if (_this4.options.enableInsights) {
          postInsights('http_hi_failed', {
            api_key: _this4.key,
            err: e,
            client_request_id: client_request_id
          });
        }
      });
    }
    /**
     * queryUsers - Query users and watch user presence
     *
     * @param {UserFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions
     * @param {UserSort<StreamChatGenerics>} sort Sort options, for instance [{last_active: -1}].
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]
     * @param {UserOptions} options Option object, {presence: true}
     *
     * @return {Promise<{ users: Array<UserResponse<StreamChatGenerics>> }>} User Query Response
     */

  }, {
    key: "queryUsers",
    value: function () {
      var _queryUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee17(filterConditions) {
        var sort,
            options,
            defaultOptions,
            data,
            _args17 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                sort = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : [];
                options = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : {};
                defaultOptions = {
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context17.next = 5;
                return this.wsPromise;

              case 5:
                if (!this._hasConnectionID()) {
                  defaultOptions.presence = false;
                } // Return a list of users


                _context17.next = 8;
                return this.get(this.baseURL + '/users', {
                  payload: _objectSpread$1(_objectSpread$1({
                    filter_conditions: filterConditions,
                    sort: normalizeQuerySort(sort)
                  }, defaultOptions), options)
                });

              case 8:
                data = _context17.sent;
                this.state.updateUsers(data.users);
                return _context17.abrupt("return", data);

              case 11:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function queryUsers(_x16) {
        return _queryUsers.apply(this, arguments);
      }

      return queryUsers;
    }()
    /**
     * queryBannedUsers - Query user bans
     *
     * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions
     * @param {BannedUsersSort} sort Sort options [{created_at: 1}].
     * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0, exclude_expired_bans: true}
     *
     * @return {Promise<BannedUsersResponse<StreamChatGenerics>>} Ban Query Response
     */

  }, {
    key: "queryBannedUsers",
    value: function () {
      var _queryBannedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee18() {
        var filterConditions,
            sort,
            options,
            _args18 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                filterConditions = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};
                sort = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : [];
                options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};
                _context18.next = 5;
                return this.get(this.baseURL + '/query_banned_users', {
                  payload: _objectSpread$1({
                    filter_conditions: filterConditions,
                    sort: normalizeQuerySort(sort)
                  }, options)
                });

              case 5:
                return _context18.abrupt("return", _context18.sent);

              case 6:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function queryBannedUsers() {
        return _queryBannedUsers.apply(this, arguments);
      }

      return queryBannedUsers;
    }()
    /**
     * queryMessageFlags - Query message flags
     *
     * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions
     * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<MessageFlagsResponse<StreamChatGenerics>>} Message Flags Response
     */

  }, {
    key: "queryMessageFlags",
    value: function () {
      var _queryMessageFlags = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee19() {
        var filterConditions,
            options,
            _args19 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                filterConditions = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};
                options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};
                _context19.next = 4;
                return this.get(this.baseURL + '/moderation/flags/message', {
                  payload: _objectSpread$1({
                    filter_conditions: filterConditions
                  }, options)
                });

              case 4:
                return _context19.abrupt("return", _context19.sent);

              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function queryMessageFlags() {
        return _queryMessageFlags.apply(this, arguments);
      }

      return queryMessageFlags;
    }()
    /**
     * queryChannels - Query channels
     *
     * @param {ChannelFilters<StreamChatGenerics>} filterConditions object MongoDB style filters
     * @param {ChannelSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.
     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]
     * @param {ChannelOptions} [options] Options object
     * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.
     * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.
     *
     * @return {Promise<{ channels: Array<ChannelAPIResponse<AStreamChatGenerics>>}> } search channels response
     */

  }, {
    key: "queryChannels",
    value: function () {
      var _queryChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee20(filterConditions) {
        var sort,
            options,
            stateOptions,
            defaultOptions,
            payload,
            data,
            _args20 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                sort = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : [];
                options = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};
                stateOptions = _args20.length > 3 && _args20[3] !== undefined ? _args20[3] : {};
                defaultOptions = {
                  state: true,
                  watch: true,
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context20.next = 6;
                return this.wsPromise;

              case 6:
                if (!this._hasConnectionID()) {
                  defaultOptions.watch = false;
                } // Return a list of channels


                payload = _objectSpread$1(_objectSpread$1({
                  filter_conditions: filterConditions,
                  sort: normalizeQuerySort(sort)
                }, defaultOptions), options);
                _context20.next = 10;
                return this.post(this.baseURL + '/channels', payload);

              case 10:
                data = _context20.sent;
                this.dispatchEvent({
                  type: 'channels.queried',
                  queriedChannels: {
                    channels: data.channels,
                    isLatestMessageSet: true
                  }
                });
                return _context20.abrupt("return", this.hydrateActiveChannels(data.channels, stateOptions, options));

              case 13:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function queryChannels(_x17) {
        return _queryChannels.apply(this, arguments);
      }

      return queryChannels;
    }()
    /**
     * queryReactions - Query reactions
     *
     * @param {ReactionFilters<StreamChatGenerics>} filter object MongoDB style filters
     * @param {ReactionSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.
     * @param {QueryReactionsOptions} [options] Pagination object
     *
     * @return {Promise<{ QueryReactionsAPIResponse } search channels response
     */

  }, {
    key: "queryReactions",
    value: function () {
      var _queryReactions = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee21(messageID, filter) {
        var sort,
            options,
            payload,
            _args21 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                sort = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : [];
                options = _args21.length > 3 && _args21[3] !== undefined ? _args21[3] : {};
                _context21.next = 4;
                return this.wsPromise;

              case 4:
                // Return a list of channels
                payload = _objectSpread$1({
                  filter: filter,
                  sort: normalizeQuerySort(sort)
                }, options);
                _context21.next = 7;
                return this.post(this.baseURL + '/messages/' + encodeURIComponent(messageID) + '/reactions', payload);

              case 7:
                return _context21.abrupt("return", _context21.sent);

              case 8:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function queryReactions(_x18, _x19) {
        return _queryReactions.apply(this, arguments);
      }

      return queryReactions;
    }()
  }, {
    key: "hydrateActiveChannels",
    value: function hydrateActiveChannels() {
      var channelsFromApi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var stateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var queryChannelsOptions = arguments.length > 2 ? arguments[2] : undefined;
      var skipInitialization = stateOptions.skipInitialization,
          _stateOptions$offline = stateOptions.offlineMode,
          offlineMode = _stateOptions$offline === void 0 ? false : _stateOptions$offline;
      var channels = [];

      var _iterator2 = _createForOfIteratorHelper(channelsFromApi),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var channelState = _step2.value;

          this._addChannelConfig(channelState.channel);

          var c = this.channel(channelState.channel.type, channelState.channel.id);
          c.data = channelState.channel;
          c.offlineMode = offlineMode;
          c.initialized = !offlineMode;
          c.push_preferences = channelState.push_preferences;
          var updatedMessagesSet = void 0;

          if (skipInitialization === undefined) {
            var _c$_initializeState = c._initializeState(channelState, 'latest'),
                messageSet = _c$_initializeState.messageSet;

            updatedMessagesSet = messageSet;
          } else if (!skipInitialization.includes(channelState.channel.id)) {
            c.state.clearMessages();

            var _c$_initializeState2 = c._initializeState(channelState, 'latest'),
                _messageSet = _c$_initializeState2.messageSet;

            updatedMessagesSet = _messageSet;
          }

          if (updatedMessagesSet) {
            updatedMessagesSet.pagination = _objectSpread$1(_objectSpread$1({}, updatedMessagesSet.pagination), messageSetPagination({
              parentSet: updatedMessagesSet,
              requestedPageSize: (queryChannelsOptions === null || queryChannelsOptions === void 0 ? void 0 : queryChannelsOptions.message_limit) || DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE,
              returnedPage: channelState.messages,
              logger: this.logger
            }));
            this.polls.hydratePollCache(channelState.messages, true);
          }

          channels.push(c);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return channels;
    }
    /**
     * search - Query messages
     *
     * @param {ChannelFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions
     * @param {MessageFilters<StreamChatGenerics> | string} query search query or object MongoDB style filters
     * @param {SearchOptions<StreamChatGenerics>} [options] Option object, {user_id: 'tommaso'}
     *
     * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response
     */

  }, {
    key: "search",
    value: function () {
      var _search = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee22(filterConditions, query) {
        var options,
            payload,
            _args22 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                options = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : {};

                if (!(options.offset && options.next)) {
                  _context22.next = 3;
                  break;
                }

                throw Error("Cannot specify offset with next");

              case 3:
                payload = _objectSpread$1(_objectSpread$1({
                  filter_conditions: filterConditions
                }, options), {}, {
                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined
                });

                if (!(typeof query === 'string')) {
                  _context22.next = 8;
                  break;
                }

                payload.query = query;
                _context22.next = 13;
                break;

              case 8:
                if (!(_typeof__default['default'](query) === 'object')) {
                  _context22.next = 12;
                  break;
                }

                payload.message_filter_conditions = query;
                _context22.next = 13;
                break;

              case 12:
                throw Error("Invalid type ".concat(_typeof__default['default'](query), " for query parameter"));

              case 13:
                _context22.next = 15;
                return this.wsPromise;

              case 15:
                _context22.next = 17;
                return this.get(this.baseURL + '/search', {
                  payload: payload
                });

              case 17:
                return _context22.abrupt("return", _context22.sent);

              case 18:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function search(_x20, _x21) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
    /**
     * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically
     *
     * @param {BaseDeviceFields} device the device object
     * @param {string} device.id device id
     * @param {string} device.push_provider the push provider
     *
     */

  }, {
    key: "setLocalDevice",
    value: function setLocalDevice(device) {
      var _this$wsConnection5, _this$wsConnection6, _this$wsFallback4;

      if ((_this$wsConnection5 = this.wsConnection) !== null && _this$wsConnection5 !== void 0 && _this$wsConnection5.isConnecting && this.wsPromise || ((_this$wsConnection6 = this.wsConnection) !== null && _this$wsConnection6 !== void 0 && _this$wsConnection6.isHealthy || (_this$wsFallback4 = this.wsFallback) !== null && _this$wsFallback4 !== void 0 && _this$wsFallback4.isHealthy()) && this._hasConnectionID()) {
        throw new Error('you can only set device before opening a websocket connection');
      }

      this.options.device = device;
    }
    /**
     * addDevice - Adds a push device for a user.
     *
     * @param {string} id the device id
     * @param {PushProvider} push_provider the push provider
     * @param {string} [userID] the user id (defaults to current user)
     * @param {string} [push_provider_name] user provided push provider name for multi bundle support
     *
     */

  }, {
    key: "addDevice",
    value: function () {
      var _addDevice = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee23(id, push_provider, userID, push_provider_name) {
        return _regeneratorRuntime__default['default'].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.post(this.baseURL + '/devices', _objectSpread$1(_objectSpread$1({
                  id: id,
                  push_provider: push_provider
                }, userID != null ? {
                  user_id: userID
                } : {}), push_provider_name != null ? {
                  push_provider_name: push_provider_name
                } : {}));

              case 2:
                return _context23.abrupt("return", _context23.sent);

              case 3:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function addDevice(_x22, _x23, _x24, _x25) {
        return _addDevice.apply(this, arguments);
      }

      return addDevice;
    }()
    /**
     * getDevices - Returns the devices associated with a current user
     *
     * @param {string} [userID] User ID. Only works on serverside
     *
     * @return {Device<StreamChatGenerics>[]} Array of devices
     */

  }, {
    key: "getDevices",
    value: function () {
      var _getDevices = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee24(userID) {
        return _regeneratorRuntime__default['default'].wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.get(this.baseURL + '/devices', userID ? {
                  user_id: userID
                } : {});

              case 2:
                return _context24.abrupt("return", _context24.sent);

              case 3:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function getDevices(_x26) {
        return _getDevices.apply(this, arguments);
      }

      return getDevices;
    }()
    /**
     * getUnreadCount - Returns unread counts for a single user
     *
     * @param {string} [userID] User ID.
     *
     * @return {<GetUnreadCountAPIResponse>}
     */

  }, {
    key: "getUnreadCount",
    value: function () {
      var _getUnreadCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee25(userID) {
        return _regeneratorRuntime__default['default'].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return this.get(this.baseURL + '/unread', userID ? {
                  user_id: userID
                } : {});

              case 2:
                return _context25.abrupt("return", _context25.sent);

              case 3:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function getUnreadCount(_x27) {
        return _getUnreadCount.apply(this, arguments);
      }

      return getUnreadCount;
    }()
    /**
     * getUnreadCountBatch - Returns unread counts for multiple users at once. Only works server side.
     *
     * @param {string[]} [userIDs] List of user IDs to fetch unread counts for.
     *
     * @return {<GetUnreadCountBatchAPIResponse>}
     */

  }, {
    key: "getUnreadCountBatch",
    value: function () {
      var _getUnreadCountBatch = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee26(userIDs) {
        return _regeneratorRuntime__default['default'].wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.next = 2;
                return this.post(this.baseURL + '/unread_batch', {
                  user_ids: userIDs
                });

              case 2:
                return _context26.abrupt("return", _context26.sent);

              case 3:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function getUnreadCountBatch(_x28) {
        return _getUnreadCountBatch.apply(this, arguments);
      }

      return getUnreadCountBatch;
    }()
    /**
     * setPushPreferences - Applies the list of push preferences.
     *
     * @param {PushPreference[]} A list of push preferences.
     *
     * @return {<UpsertPushPreferencesResponse>}
     */

  }, {
    key: "setPushPreferences",
    value: function () {
      var _setPushPreferences = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee27(preferences) {
        return _regeneratorRuntime__default['default'].wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                _context27.next = 2;
                return this.post(this.baseURL + '/push_preferences', {
                  preferences: preferences
                });

              case 2:
                return _context27.abrupt("return", _context27.sent);

              case 3:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function setPushPreferences(_x29) {
        return _setPushPreferences.apply(this, arguments);
      }

      return setPushPreferences;
    }()
    /**
     * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices
     *
     * @param {string} id The device id
     * @param {string} [userID] The user id. Only specify this for serverside requests
     *
     */

  }, {
    key: "removeDevice",
    value: function () {
      var _removeDevice = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee28(id, userID) {
        return _regeneratorRuntime__default['default'].wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                _context28.next = 2;
                return this.delete(this.baseURL + '/devices', _objectSpread$1({
                  id: id
                }, userID ? {
                  user_id: userID
                } : {}));

              case 2:
                return _context28.abrupt("return", _context28.sent);

              case 3:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function removeDevice(_x30, _x31) {
        return _removeDevice.apply(this, arguments);
      }

      return removeDevice;
    }()
    /**
     * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.
     * Only available server-side.
     *
     * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.
     * @returns {Promise<GetRateLimitsResponse>}
     */

  }, {
    key: "getRateLimits",
    value: function () {
      var _getRateLimits = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee29(params) {
        var _ref8, serverSide, web, android, ios, endpoints;

        return _regeneratorRuntime__default['default'].wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _ref8 = params || {}, serverSide = _ref8.serverSide, web = _ref8.web, android = _ref8.android, ios = _ref8.ios, endpoints = _ref8.endpoints;
                return _context29.abrupt("return", this.get(this.baseURL + '/rate_limits', {
                  server_side: serverSide,
                  web: web,
                  android: android,
                  ios: ios,
                  endpoints: endpoints ? endpoints.join(',') : undefined
                }));

              case 2:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function getRateLimits(_x32) {
        return _getRateLimits.apply(this, arguments);
      }

      return getRateLimits;
    }()
  }, {
    key: "_addChannelConfig",
    value: function _addChannelConfig(_ref9) {
      var cid = _ref9.cid,
          config = _ref9.config;

      if (this._cacheEnabled()) {
        this.configs[cid] = config;
      }
    }
    /**
     * channel - Returns a new channel with the given type, id and custom data
     *
     * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.
     * Make sure to await channel.create() or channel.watch() before accessing channel functions:
     * ie. channel = client.channel("messaging", {members: ["tommaso", "thierry"]})
     * await channel.create() to assign an ID to channel
     *
     * @param {string} channelType The channel type
     * @param {string | ChannelData<StreamChatGenerics> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel
     * @param {object} [custom]    Custom data to attach to the channel
     *
     * @return {channel} The channel object, initialize it using channel.watch()
     */

  }, {
    key: "channel",
    value: function channel(channelType, channelIDOrCustom) {
      var _custom$members2;

      var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!this.userID && !this._isUsingServerAuth()) {
        throw Error('Call connectUser or connectAnonymousUser before creating a channel');
      }

      if (~channelType.indexOf(':')) {
        throw Error("Invalid channel group ".concat(channelType, ", can't contain the : character"));
      } // support channel("messaging", {options})


      if (channelIDOrCustom && _typeof__default['default'](channelIDOrCustom) === 'object') {
        return this.getChannelByMembers(channelType, channelIDOrCustom);
      } // // support channel("messaging", undefined, {options})


      if (!channelIDOrCustom && _typeof__default['default'](custom) === 'object' && (_custom$members2 = custom.members) !== null && _custom$members2 !== void 0 && _custom$members2.length) {
        return this.getChannelByMembers(channelType, custom);
      } // support channel("messaging", null, {options})
      // support channel("messaging", undefined, {options})
      // support channel("messaging", "", {options})


      if (!channelIDOrCustom) {
        return new Channel(this, channelType, undefined, custom);
      }

      return this.getChannelById(channelType, channelIDOrCustom, custom);
    }
    /**
     * It's a helper method for `client.channel()` method, used to create unique conversation or
     * channel based on member list instead of id.
     *
     * If the channel already exists in `activeChannels` list, then we simply return it, since that
     * means the same channel was already requested or created.
     *
     * Otherwise we create a new instance of Channel class and return it.
     *
     * @private
     *
     * @param {string} channelType The channel type
     * @param {object} [custom]    Custom data to attach to the channel
     *
     * @return {channel} The channel object, initialize it using channel.watch()
     */

  }, {
    key: "partialUpdateUser",
    value:
    /**
     * partialUpdateUser - Update the given user object
     *
     * @param {PartialUserUpdate<StreamChatGenerics>} partialUserObject which should contain id and any of "set" or "unset" params;
     * example: {id: "user1", set:{field: value}, unset:["field2"]}
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>} list of updated users
     */
    function () {
      var _partialUpdateUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee30(partialUserObject) {
        return _regeneratorRuntime__default['default'].wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return this.partialUpdateUsers([partialUserObject]);

              case 2:
                return _context30.abrupt("return", _context30.sent);

              case 3:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));

      function partialUpdateUser(_x33) {
        return _partialUpdateUser.apply(this, arguments);
      }

      return partialUpdateUser;
    }()
    /**
     * upsertUsers - Batch upsert the list of users
     *
     * @param {UserResponse<StreamChatGenerics>[]} users list of users
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
     */

  }, {
    key: "upsertUsers",
    value: function () {
      var _upsertUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee31(users) {
        var userMap, _iterator3, _step3, userObject;

        return _regeneratorRuntime__default['default'].wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                userMap = {};
                _iterator3 = _createForOfIteratorHelper(users);
                _context31.prev = 2;

                _iterator3.s();

              case 4:
                if ((_step3 = _iterator3.n()).done) {
                  _context31.next = 11;
                  break;
                }

                userObject = _step3.value;

                if (userObject.id) {
                  _context31.next = 8;
                  break;
                }

                throw Error('User ID is required when updating a user');

              case 8:
                userMap[userObject.id] = userObject;

              case 9:
                _context31.next = 4;
                break;

              case 11:
                _context31.next = 16;
                break;

              case 13:
                _context31.prev = 13;
                _context31.t0 = _context31["catch"](2);

                _iterator3.e(_context31.t0);

              case 16:
                _context31.prev = 16;

                _iterator3.f();

                return _context31.finish(16);

              case 19:
                _context31.next = 21;
                return this.post(this.baseURL + '/users', {
                  users: userMap
                });

              case 21:
                return _context31.abrupt("return", _context31.sent);

              case 22:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this, [[2, 13, 16, 19]]);
      }));

      function upsertUsers(_x34) {
        return _upsertUsers.apply(this, arguments);
      }

      return upsertUsers;
    }()
    /**
     * @deprecated Please use upsertUsers() function instead.
     *
     * updateUsers - Batch update the list of users
     *
     * @param {UserResponse<StreamChatGenerics>[]} users list of users
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
     */

  }, {
    key: "upsertUser",
    value:
    /**
     * upsertUser - Update or Create the given user object
     *
     * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: "myuser"} is valid
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
     */
    function upsertUser(userObject) {
      return this.upsertUsers([userObject]);
    }
    /**
     * @deprecated Please use upsertUser() function instead.
     *
     * updateUser - Update or Create the given user object
     *
     * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: "myuser"} is valid
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
     */

  }, {
    key: "partialUpdateUsers",
    value:
    /**
     * partialUpdateUsers - Batch partial update of users
     *
     * @param {PartialUserUpdate<StreamChatGenerics>[]} users list of partial update requests
     *
     * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}
     */
    function () {
      var _partialUpdateUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee32(users) {
        var _iterator4, _step4, userObject;

        return _regeneratorRuntime__default['default'].wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                _iterator4 = _createForOfIteratorHelper(users);
                _context32.prev = 1;

                _iterator4.s();

              case 3:
                if ((_step4 = _iterator4.n()).done) {
                  _context32.next = 9;
                  break;
                }

                userObject = _step4.value;

                if (userObject.id) {
                  _context32.next = 7;
                  break;
                }

                throw Error('User ID is required when updating a user');

              case 7:
                _context32.next = 3;
                break;

              case 9:
                _context32.next = 14;
                break;

              case 11:
                _context32.prev = 11;
                _context32.t0 = _context32["catch"](1);

                _iterator4.e(_context32.t0);

              case 14:
                _context32.prev = 14;

                _iterator4.f();

                return _context32.finish(14);

              case 17:
                _context32.next = 19;
                return this.patch(this.baseURL + '/users', {
                  users: users
                });

              case 19:
                return _context32.abrupt("return", _context32.sent);

              case 20:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this, [[1, 11, 14, 17]]);
      }));

      function partialUpdateUsers(_x35) {
        return _partialUpdateUsers.apply(this, arguments);
      }

      return partialUpdateUsers;
    }()
  }, {
    key: "deleteUser",
    value: function () {
      var _deleteUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee33(userID, params) {
        return _regeneratorRuntime__default['default'].wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                _context33.next = 2;
                return this.delete(this.baseURL + "/users/".concat(encodeURIComponent(userID)), params);

              case 2:
                return _context33.abrupt("return", _context33.sent);

              case 3:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function deleteUser(_x36, _x37) {
        return _deleteUser.apply(this, arguments);
      }

      return deleteUser;
    }()
    /**
     * restoreUsers - Restore soft deleted users
     *
     * @param {string[]} user_ids which users to restore
     *
     * @return {APIResponse} An API response
     */

  }, {
    key: "restoreUsers",
    value: function () {
      var _restoreUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee34(user_ids) {
        return _regeneratorRuntime__default['default'].wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return this.post(this.baseURL + "/users/restore", {
                  user_ids: user_ids
                });

              case 2:
                return _context34.abrupt("return", _context34.sent);

              case 3:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function restoreUsers(_x38) {
        return _restoreUsers.apply(this, arguments);
      }

      return restoreUsers;
    }()
    /**
     * reactivateUser - Reactivate one user
     *
     * @param {string} userID which user to reactivate
     * @param {ReactivateUserOptions} [options]
     *
     * @return {UserResponse} Reactivated user
     */

  }, {
    key: "reactivateUser",
    value: function () {
      var _reactivateUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee35(userID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                _context35.next = 2;
                return this.post(this.baseURL + "/users/".concat(encodeURIComponent(userID), "/reactivate"), _objectSpread$1({}, options));

              case 2:
                return _context35.abrupt("return", _context35.sent);

              case 3:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));

      function reactivateUser(_x39, _x40) {
        return _reactivateUser.apply(this, arguments);
      }

      return reactivateUser;
    }()
    /**
     * reactivateUsers - Reactivate many users asynchronously
     *
     * @param {string[]} user_ids which users to reactivate
     * @param {ReactivateUsersOptions} [options]
     *
     * @return {TaskResponse} A task ID
     */

  }, {
    key: "reactivateUsers",
    value: function () {
      var _reactivateUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee36(user_ids, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                _context36.next = 2;
                return this.post(this.baseURL + "/users/reactivate", _objectSpread$1({
                  user_ids: user_ids
                }, options));

              case 2:
                return _context36.abrupt("return", _context36.sent);

              case 3:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36, this);
      }));

      function reactivateUsers(_x41, _x42) {
        return _reactivateUsers.apply(this, arguments);
      }

      return reactivateUsers;
    }()
    /**
     * deactivateUser - Deactivate one user
     *
     * @param {string} userID which user to deactivate
     * @param {DeactivateUsersOptions} [options]
     *
     * @return {UserResponse} Deactivated user
     */

  }, {
    key: "deactivateUser",
    value: function () {
      var _deactivateUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee37(userID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                _context37.next = 2;
                return this.post(this.baseURL + "/users/".concat(encodeURIComponent(userID), "/deactivate"), _objectSpread$1({}, options));

              case 2:
                return _context37.abrupt("return", _context37.sent);

              case 3:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37, this);
      }));

      function deactivateUser(_x43, _x44) {
        return _deactivateUser.apply(this, arguments);
      }

      return deactivateUser;
    }()
    /**
     * deactivateUsers - Deactivate many users asynchronously
     *
     * @param {string[]} user_ids which users to deactivate
     * @param {DeactivateUsersOptions} [options]
     *
     * @return {TaskResponse} A task ID
     */

  }, {
    key: "deactivateUsers",
    value: function () {
      var _deactivateUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee38(user_ids, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                _context38.next = 2;
                return this.post(this.baseURL + "/users/deactivate", _objectSpread$1({
                  user_ids: user_ids
                }, options));

              case 2:
                return _context38.abrupt("return", _context38.sent);

              case 3:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));

      function deactivateUsers(_x45, _x46) {
        return _deactivateUsers.apply(this, arguments);
      }

      return deactivateUsers;
    }()
  }, {
    key: "exportUser",
    value: function () {
      var _exportUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee39(userID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.next = 2;
                return this.get(this.baseURL + "/users/".concat(encodeURIComponent(userID), "/export"), _objectSpread$1({}, options));

              case 2:
                return _context39.abrupt("return", _context39.sent);

              case 3:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));

      function exportUser(_x47, _x48) {
        return _exportUser.apply(this, arguments);
      }

      return exportUser;
    }()
    /** banUser - bans a user from all channels
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<StreamChatGenerics>} [options]
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "banUser",
    value: function () {
      var _banUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee40(targetUserID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                _context40.next = 2;
                return this.post(this.baseURL + '/moderation/ban', _objectSpread$1({
                  target_user_id: targetUserID
                }, options));

              case 2:
                return _context40.abrupt("return", _context40.sent);

              case 3:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));

      function banUser(_x49, _x50) {
        return _banUser.apply(this, arguments);
      }

      return banUser;
    }()
    /** unbanUser - revoke global ban for a user
     *
     * @param {string} targetUserID
     * @param {UnBanUserOptions} [options]
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unbanUser",
    value: function () {
      var _unbanUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee41(targetUserID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                _context41.next = 2;
                return this.delete(this.baseURL + '/moderation/ban', _objectSpread$1({
                  target_user_id: targetUserID
                }, options));

              case 2:
                return _context41.abrupt("return", _context41.sent);

              case 3:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));

      function unbanUser(_x51, _x52) {
        return _unbanUser.apply(this, arguments);
      }

      return unbanUser;
    }()
    /** shadowBan - shadow bans a user from all channels
     *
     * @param {string} targetUserID
     * @param {BanUserOptions<StreamChatGenerics>} [options]
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "shadowBan",
    value: function () {
      var _shadowBan = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee42(targetUserID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                _context42.next = 2;
                return this.banUser(targetUserID, _objectSpread$1({
                  shadow: true
                }, options));

              case 2:
                return _context42.abrupt("return", _context42.sent);

              case 3:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));

      function shadowBan(_x53, _x54) {
        return _shadowBan.apply(this, arguments);
      }

      return shadowBan;
    }()
    /** removeShadowBan - revoke global shadow ban for a user
     *
     * @param {string} targetUserID
     * @param {UnBanUserOptions} [options]
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "removeShadowBan",
    value: function () {
      var _removeShadowBan = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee43(targetUserID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                _context43.next = 2;
                return this.unbanUser(targetUserID, _objectSpread$1({
                  shadow: true
                }, options));

              case 2:
                return _context43.abrupt("return", _context43.sent);

              case 3:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));

      function removeShadowBan(_x55, _x56) {
        return _removeShadowBan.apply(this, arguments);
      }

      return removeShadowBan;
    }()
  }, {
    key: "blockUser",
    value: function () {
      var _blockUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee44(blockedUserID, user_id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                _context44.next = 2;
                return this.post(this.baseURL + '/users/block', _objectSpread$1({
                  blocked_user_id: blockedUserID
                }, user_id ? {
                  user_id: user_id
                } : {}));

              case 2:
                return _context44.abrupt("return", _context44.sent);

              case 3:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));

      function blockUser(_x57, _x58) {
        return _blockUser.apply(this, arguments);
      }

      return blockUser;
    }()
  }, {
    key: "getBlockedUsers",
    value: function () {
      var _getBlockedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee45(user_id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                _context45.next = 2;
                return this.get(this.baseURL + '/users/block', _objectSpread$1({}, user_id ? {
                  user_id: user_id
                } : {}));

              case 2:
                return _context45.abrupt("return", _context45.sent);

              case 3:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));

      function getBlockedUsers(_x59) {
        return _getBlockedUsers.apply(this, arguments);
      }

      return getBlockedUsers;
    }()
  }, {
    key: "unBlockUser",
    value: function () {
      var _unBlockUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee46(blockedUserID, userID) {
        return _regeneratorRuntime__default['default'].wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                _context46.next = 2;
                return this.post(this.baseURL + '/users/unblock', _objectSpread$1({
                  blocked_user_id: blockedUserID
                }, userID ? {
                  user_id: userID
                } : {}));

              case 2:
                return _context46.abrupt("return", _context46.sent);

              case 3:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, this);
      }));

      function unBlockUser(_x60, _x61) {
        return _unBlockUser.apply(this, arguments);
      }

      return unBlockUser;
    }()
    /** muteUser - mutes a user
     *
     * @param {string} targetID
     * @param {string} [userID] Only used with serverside auth
     * @param {MuteUserOptions<StreamChatGenerics>} [options]
     * @returns {Promise<MuteUserResponse<StreamChatGenerics>>}
     */

  }, {
    key: "muteUser",
    value: function () {
      var _muteUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee47(targetID, userID) {
        var options,
            _args47 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                options = _args47.length > 2 && _args47[2] !== undefined ? _args47[2] : {};
                _context47.next = 3;
                return this.post(this.baseURL + '/moderation/mute', _objectSpread$1(_objectSpread$1({
                  target_id: targetID
                }, userID ? {
                  user_id: userID
                } : {}), options));

              case 3:
                return _context47.abrupt("return", _context47.sent);

              case 4:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47, this);
      }));

      function muteUser(_x62, _x63) {
        return _muteUser.apply(this, arguments);
      }

      return muteUser;
    }()
    /** unmuteUser - unmutes a user
     *
     * @param {string} targetID
     * @param {string} [currentUserID] Only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unmuteUser",
    value: function () {
      var _unmuteUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee48(targetID, currentUserID) {
        return _regeneratorRuntime__default['default'].wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                _context48.next = 2;
                return this.post(this.baseURL + '/moderation/unmute', _objectSpread$1({
                  target_id: targetID
                }, currentUserID ? {
                  user_id: currentUserID
                } : {}));

              case 2:
                return _context48.abrupt("return", _context48.sent);

              case 3:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));

      function unmuteUser(_x64, _x65) {
        return _unmuteUser.apply(this, arguments);
      }

      return unmuteUser;
    }()
    /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called
     *
     * @param {string} targetID
     * @returns {boolean}
     */

  }, {
    key: "userMuteStatus",
    value: function userMuteStatus(targetID) {
      if (!this.user || !this.wsPromise) {
        throw new Error('Make sure to await connectUser() first.');
      }

      for (var i = 0; i < this.mutedUsers.length; i += 1) {
        if (this.mutedUsers[i].target.id === targetID) return true;
      }

      return false;
    }
    /**
     * flagMessage - flag a message
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "flagMessage",
    value: function () {
      var _flagMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee49(targetMessageID) {
        var options,
            _args49 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                options = _args49.length > 1 && _args49[1] !== undefined ? _args49[1] : {};
                _context49.next = 3;
                return this.post(this.baseURL + '/moderation/flag', _objectSpread$1({
                  target_message_id: targetMessageID
                }, options));

              case 3:
                return _context49.abrupt("return", _context49.sent);

              case 4:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49, this);
      }));

      function flagMessage(_x66) {
        return _flagMessage.apply(this, arguments);
      }

      return flagMessage;
    }()
    /**
     * flagUser - flag a user
     * @param {string} targetID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "flagUser",
    value: function () {
      var _flagUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee50(targetID) {
        var options,
            _args50 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee50$(_context50) {
          while (1) {
            switch (_context50.prev = _context50.next) {
              case 0:
                options = _args50.length > 1 && _args50[1] !== undefined ? _args50[1] : {};
                _context50.next = 3;
                return this.post(this.baseURL + '/moderation/flag', _objectSpread$1({
                  target_user_id: targetID
                }, options));

              case 3:
                return _context50.abrupt("return", _context50.sent);

              case 4:
              case "end":
                return _context50.stop();
            }
          }
        }, _callee50, this);
      }));

      function flagUser(_x67) {
        return _flagUser.apply(this, arguments);
      }

      return flagUser;
    }()
    /**
     * unflagMessage - unflag a message
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unflagMessage",
    value: function () {
      var _unflagMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee51(targetMessageID) {
        var options,
            _args51 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee51$(_context51) {
          while (1) {
            switch (_context51.prev = _context51.next) {
              case 0:
                options = _args51.length > 1 && _args51[1] !== undefined ? _args51[1] : {};
                _context51.next = 3;
                return this.post(this.baseURL + '/moderation/unflag', _objectSpread$1({
                  target_message_id: targetMessageID
                }, options));

              case 3:
                return _context51.abrupt("return", _context51.sent);

              case 4:
              case "end":
                return _context51.stop();
            }
          }
        }, _callee51, this);
      }));

      function unflagMessage(_x68) {
        return _unflagMessage.apply(this, arguments);
      }

      return unflagMessage;
    }()
    /**
     * unflagUser - unflag a user
     * @param {string} targetID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unflagUser",
    value: function () {
      var _unflagUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee52(targetID) {
        var options,
            _args52 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee52$(_context52) {
          while (1) {
            switch (_context52.prev = _context52.next) {
              case 0:
                options = _args52.length > 1 && _args52[1] !== undefined ? _args52[1] : {};
                _context52.next = 3;
                return this.post(this.baseURL + '/moderation/unflag', _objectSpread$1({
                  target_user_id: targetID
                }, options));

              case 3:
                return _context52.abrupt("return", _context52.sent);

              case 4:
              case "end":
                return _context52.stop();
            }
          }
        }, _callee52, this);
      }));

      function unflagUser(_x69) {
        return _unflagUser.apply(this, arguments);
      }

      return unflagUser;
    }()
    /**
     * getCallToken - retrieves the auth token needed to join a call
     *
     * @param {string} callID
     * @param {object} options
     * @returns {Promise<GetCallTokenResponse>}
     */

  }, {
    key: "getCallToken",
    value: function () {
      var _getCallToken = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee53(callID) {
        var options,
            _args53 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee53$(_context53) {
          while (1) {
            switch (_context53.prev = _context53.next) {
              case 0:
                options = _args53.length > 1 && _args53[1] !== undefined ? _args53[1] : {};
                _context53.next = 3;
                return this.post(this.baseURL + "/calls/".concat(encodeURIComponent(callID)), _objectSpread$1({}, options));

              case 3:
                return _context53.abrupt("return", _context53.sent);

              case 4:
              case "end":
                return _context53.stop();
            }
          }
        }, _callee53, this);
      }));

      function getCallToken(_x70) {
        return _getCallToken.apply(this, arguments);
      }

      return getCallToken;
    }()
    /**
     * _queryFlags - Query flags.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {FlagsFilters} filterConditions MongoDB style filter conditions
     * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<FlagsResponse<StreamChatGenerics>>} Flags Response
     */

  }, {
    key: "_queryFlags",
    value: function () {
      var _queryFlags2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee54() {
        var filterConditions,
            options,
            _args54 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee54$(_context54) {
          while (1) {
            switch (_context54.prev = _context54.next) {
              case 0:
                filterConditions = _args54.length > 0 && _args54[0] !== undefined ? _args54[0] : {};
                options = _args54.length > 1 && _args54[1] !== undefined ? _args54[1] : {};
                _context54.next = 4;
                return this.post(this.baseURL + '/moderation/flags', _objectSpread$1({
                  filter_conditions: filterConditions
                }, options));

              case 4:
                return _context54.abrupt("return", _context54.sent);

              case 5:
              case "end":
                return _context54.stop();
            }
          }
        }, _callee54, this);
      }));

      function _queryFlags() {
        return _queryFlags2.apply(this, arguments);
      }

      return _queryFlags;
    }()
    /**
     * _queryFlagReports - Query flag reports.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions
     * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}
     *
     * @return {Promise<FlagReportsResponse<StreamChatGenerics>>} Flag Reports Response
     */

  }, {
    key: "_queryFlagReports",
    value: function () {
      var _queryFlagReports2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee55() {
        var filterConditions,
            options,
            _args55 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee55$(_context55) {
          while (1) {
            switch (_context55.prev = _context55.next) {
              case 0:
                filterConditions = _args55.length > 0 && _args55[0] !== undefined ? _args55[0] : {};
                options = _args55.length > 1 && _args55[1] !== undefined ? _args55[1] : {};
                _context55.next = 4;
                return this.post(this.baseURL + '/moderation/reports', _objectSpread$1({
                  filter_conditions: filterConditions
                }, options));

              case 4:
                return _context55.abrupt("return", _context55.sent);

              case 5:
              case "end":
                return _context55.stop();
            }
          }
        }, _callee55, this);
      }));

      function _queryFlagReports() {
        return _queryFlagReports2.apply(this, arguments);
      }

      return _queryFlagReports;
    }()
    /**
     * _reviewFlagReport - review flag report
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} [id] flag report to review
     * @param {string} [reviewResult] flag report review result
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @param {string} [options.review_details] custom information about review result
     * @returns {Promise<ReviewFlagReportResponse>>}
     */

  }, {
    key: "_reviewFlagReport",
    value: function () {
      var _reviewFlagReport2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee56(id, reviewResult) {
        var options,
            _args56 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee56$(_context56) {
          while (1) {
            switch (_context56.prev = _context56.next) {
              case 0:
                options = _args56.length > 2 && _args56[2] !== undefined ? _args56[2] : {};
                _context56.next = 3;
                return this.patch(this.baseURL + "/moderation/reports/".concat(encodeURIComponent(id)), _objectSpread$1({
                  review_result: reviewResult
                }, options));

              case 3:
                return _context56.abrupt("return", _context56.sent);

              case 4:
              case "end":
                return _context56.stop();
            }
          }
        }, _callee56, this);
      }));

      function _reviewFlagReport(_x71, _x72) {
        return _reviewFlagReport2.apply(this, arguments);
      }

      return _reviewFlagReport;
    }()
    /**
     * unblockMessage - unblocks message blocked by automod
     *
     *
     * @param {string} targetMessageID
     * @param {string} [options.user_id] currentUserID, only used with serverside auth
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "unblockMessage",
    value: function () {
      var _unblockMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee57(targetMessageID) {
        var options,
            _args57 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee57$(_context57) {
          while (1) {
            switch (_context57.prev = _context57.next) {
              case 0:
                options = _args57.length > 1 && _args57[1] !== undefined ? _args57[1] : {};
                _context57.next = 3;
                return this.post(this.baseURL + '/moderation/unblock_message', _objectSpread$1({
                  target_message_id: targetMessageID
                }, options));

              case 3:
                return _context57.abrupt("return", _context57.sent);

              case 4:
              case "end":
                return _context57.stop();
            }
          }
        }, _callee57, this);
      }));

      function unblockMessage(_x73) {
        return _unblockMessage.apply(this, arguments);
      }

      return unblockMessage;
    }() // alias for backwards compatibility

  }, {
    key: "markChannelsRead",
    value:
    /**
     * markChannelsRead - marks channels read -
     * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read
     *
     * @param {MarkChannelsReadOptions <StreamChatGenerics>} [data]
     *
     * @return {Promise<APIResponse>}
     */
    function () {
      var _markChannelsRead = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee58() {
        var data,
            _args58 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee58$(_context58) {
          while (1) {
            switch (_context58.prev = _context58.next) {
              case 0:
                data = _args58.length > 0 && _args58[0] !== undefined ? _args58[0] : {};
                _context58.next = 3;
                return this.post(this.baseURL + '/channels/read', _objectSpread$1({}, data));

              case 3:
              case "end":
                return _context58.stop();
            }
          }
        }, _callee58, this);
      }));

      function markChannelsRead() {
        return _markChannelsRead.apply(this, arguments);
      }

      return markChannelsRead;
    }()
  }, {
    key: "createCommand",
    value: function createCommand(data) {
      return this.post(this.baseURL + '/commands', data);
    }
  }, {
    key: "getCommand",
    value: function getCommand(name) {
      return this.get(this.baseURL + "/commands/".concat(encodeURIComponent(name)));
    }
  }, {
    key: "updateCommand",
    value: function updateCommand(name, data) {
      return this.put(this.baseURL + "/commands/".concat(encodeURIComponent(name)), data);
    }
  }, {
    key: "deleteCommand",
    value: function deleteCommand(name) {
      return this.delete(this.baseURL + "/commands/".concat(encodeURIComponent(name)));
    }
  }, {
    key: "listCommands",
    value: function listCommands() {
      return this.get(this.baseURL + "/commands");
    }
  }, {
    key: "createChannelType",
    value: function createChannelType(data) {
      var channelData = _extends__default['default']({}, {
        commands: ['all']
      }, data);

      return this.post(this.baseURL + '/channeltypes', channelData);
    }
  }, {
    key: "getChannelType",
    value: function getChannelType(channelType) {
      return this.get(this.baseURL + "/channeltypes/".concat(encodeURIComponent(channelType)));
    }
  }, {
    key: "updateChannelType",
    value: function updateChannelType(channelType, data) {
      return this.put(this.baseURL + "/channeltypes/".concat(encodeURIComponent(channelType)), data);
    }
  }, {
    key: "deleteChannelType",
    value: function deleteChannelType(channelType) {
      return this.delete(this.baseURL + "/channeltypes/".concat(encodeURIComponent(channelType)));
    }
  }, {
    key: "listChannelTypes",
    value: function listChannelTypes() {
      return this.get(this.baseURL + "/channeltypes");
    }
    /**
     * translateMessage - adds the translation to the message
     *
     * @param {string} messageId
     * @param {string} language
     *
     * @return {MessageResponse<StreamChatGenerics>} Response that includes the message
     */

  }, {
    key: "translateMessage",
    value: function () {
      var _translateMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee59(messageId, language) {
        return _regeneratorRuntime__default['default'].wrap(function _callee59$(_context59) {
          while (1) {
            switch (_context59.prev = _context59.next) {
              case 0:
                _context59.next = 2;
                return this.post(this.baseURL + "/messages/".concat(encodeURIComponent(messageId), "/translate"), {
                  language: language
                });

              case 2:
                return _context59.abrupt("return", _context59.sent);

              case 3:
              case "end":
                return _context59.stop();
            }
          }
        }, _callee59, this);
      }));

      function translateMessage(_x74, _x75) {
        return _translateMessage.apply(this, arguments);
      }

      return translateMessage;
    }()
    /**
     * translate - translates the given text to provided language
     *
     * @param {string} text
     * @param {string} destination_language
     * @param {string} source_language
     *
     * @return {TranslateResponse} Response that includes the message
     */

  }, {
    key: "translate",
    value: function () {
      var _translate = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee60(text, destination_language, source_language) {
        return _regeneratorRuntime__default['default'].wrap(function _callee60$(_context60) {
          while (1) {
            switch (_context60.prev = _context60.next) {
              case 0:
                _context60.next = 2;
                return this.post(this.baseURL + "/translate", {
                  text: text,
                  source_language: source_language,
                  destination_language: destination_language
                });

              case 2:
                return _context60.abrupt("return", _context60.sent);

              case 3:
              case "end":
                return _context60.stop();
            }
          }
        }, _callee60, this);
      }));

      function translate(_x76, _x77, _x78) {
        return _translate.apply(this, arguments);
      }

      return translate;
    }()
    /**
     * _normalizeExpiration - transforms expiration value into ISO string
     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date
     */

  }, {
    key: "_normalizeExpiration",
    value: function _normalizeExpiration(timeoutOrExpirationDate) {
      var pinExpires = null;

      if (typeof timeoutOrExpirationDate === 'number') {
        var now = new Date();
        now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);
        pinExpires = now.toISOString();
      } else if (isString(timeoutOrExpirationDate)) {
        pinExpires = timeoutOrExpirationDate;
      } else if (timeoutOrExpirationDate instanceof Date) {
        pinExpires = timeoutOrExpirationDate.toISOString();
      }

      return pinExpires;
    }
    /**
     * _messageId - extracts string message id from either message object or message id
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {string} errorText error message to report in case of message id absence
     */

  }, {
    key: "_validateAndGetMessageId",
    value: function _validateAndGetMessageId(messageOrMessageId, errorText) {
      var messageId;

      if (typeof messageOrMessageId === 'string') {
        messageId = messageOrMessageId;
      } else {
        if (!messageOrMessageId.id) {
          throw Error(errorText);
        }

        messageId = messageOrMessageId.id;
      }

      return messageId;
    }
    /**
     * pinMessage - pins the message
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date
     * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side
     * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin
     */

  }, {
    key: "pinMessage",
    value: function pinMessage(messageOrMessageId, timeoutOrExpirationDate, pinnedBy, pinnedAt) {
      var messageId = this._validateAndGetMessageId(messageOrMessageId, 'Please specify the message id when calling unpinMessage');

      return this.partialUpdateMessage(messageId, {
        set: {
          pinned: true,
          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),
          pinned_at: this._normalizeExpiration(pinnedAt)
        }
      }, pinnedBy);
    }
    /**
     * unpinMessage - unpins the message that was previously pinned
     * @param {string | { id: string }} messageOrMessageId message object or message id
     * @param {string | { id: string }} [userId]
     */

  }, {
    key: "unpinMessage",
    value: function unpinMessage(messageOrMessageId, userId) {
      var messageId = this._validateAndGetMessageId(messageOrMessageId, 'Please specify the message id when calling unpinMessage');

      return this.partialUpdateMessage(messageId, {
        set: {
          pinned: false
        }
      }, userId);
    }
    /**
     * updateMessage - Update the given message
     *
     * @param {Omit<MessageResponse<StreamChatGenerics>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified
     * @param {string | { id: string }} [userId]
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     *
     * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message
     */

  }, {
    key: "updateMessage",
    value: function () {
      var _updateMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee61(message, userId, options) {
        var clonedMessage, reservedMessageFields;
        return _regeneratorRuntime__default['default'].wrap(function _callee61$(_context61) {
          while (1) {
            switch (_context61.prev = _context61.next) {
              case 0:
                if (message.id) {
                  _context61.next = 2;
                  break;
                }

                throw Error('Please specify the message id when calling updateMessage');

              case 2:
                clonedMessage = _extends__default['default']({}, message);
                delete clonedMessage.id;
                reservedMessageFields = ['command', 'created_at', 'html', 'latest_reactions', 'own_reactions', 'quoted_message', 'reaction_counts', 'reply_count', 'type', 'updated_at', 'user', 'pinned_at', '__html'];
                reservedMessageFields.forEach(function (item) {
                  if (clonedMessage[item] != null) {
                    delete clonedMessage[item];
                  }
                });

                if (userId != null) {
                  if (isString(userId)) {
                    clonedMessage.user_id = userId;
                  } else {
                    clonedMessage.user = {
                      id: userId.id
                    };
                  }
                }
                /**
                 * Server always expects mentioned_users to be array of string. We are adding extra check, just in case
                 * SDK missed this conversion.
                 */


                if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {
                  clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(function (mu) {
                    return mu.id;
                  });
                }

                _context61.next = 10;
                return this.post(this.baseURL + "/messages/".concat(encodeURIComponent(message.id)), _objectSpread$1({
                  message: clonedMessage
                }, options));

              case 10:
                return _context61.abrupt("return", _context61.sent);

              case 11:
              case "end":
                return _context61.stop();
            }
          }
        }, _callee61, this);
      }));

      function updateMessage(_x79, _x80, _x81) {
        return _updateMessage.apply(this, arguments);
      }

      return updateMessage;
    }()
    /**
     * partialUpdateMessage - Update the given message id while retaining additional properties
     *
     * @param {string} id the message id
     *
     * @param {PartialUpdateMessage<StreamChatGenerics>}  partialMessageObject which should contain id and any of "set" or "unset" params;
     *         example: {id: "user1", set:{text: "hi"}, unset:["color"]}
     * @param {string | { id: string }} [userId]
     *
     * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message
     *
     * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the updated message
     */

  }, {
    key: "partialUpdateMessage",
    value: function () {
      var _partialUpdateMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee62(id, partialMessageObject, userId, options) {
        var user;
        return _regeneratorRuntime__default['default'].wrap(function _callee62$(_context62) {
          while (1) {
            switch (_context62.prev = _context62.next) {
              case 0:
                if (id) {
                  _context62.next = 2;
                  break;
                }

                throw Error('Please specify the message id when calling partialUpdateMessage');

              case 2:
                user = userId;

                if (userId != null && isString(userId)) {
                  user = {
                    id: userId
                  };
                }

                _context62.next = 6;
                return this.put(this.baseURL + "/messages/".concat(encodeURIComponent(id)), _objectSpread$1(_objectSpread$1(_objectSpread$1({}, partialMessageObject), options), {}, {
                  user: user
                }));

              case 6:
                return _context62.abrupt("return", _context62.sent);

              case 7:
              case "end":
                return _context62.stop();
            }
          }
        }, _callee62, this);
      }));

      function partialUpdateMessage(_x82, _x83, _x84, _x85) {
        return _partialUpdateMessage.apply(this, arguments);
      }

      return partialUpdateMessage;
    }()
  }, {
    key: "deleteMessage",
    value: function () {
      var _deleteMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee63(messageID, hardDelete) {
        var params;
        return _regeneratorRuntime__default['default'].wrap(function _callee63$(_context63) {
          while (1) {
            switch (_context63.prev = _context63.next) {
              case 0:
                params = {};

                if (hardDelete) {
                  params = {
                    hard: true
                  };
                }

                _context63.next = 4;
                return this.delete(this.baseURL + "/messages/".concat(encodeURIComponent(messageID)), params);

              case 4:
                return _context63.abrupt("return", _context63.sent);

              case 5:
              case "end":
                return _context63.stop();
            }
          }
        }, _callee63, this);
      }));

      function deleteMessage(_x86, _x87) {
        return _deleteMessage.apply(this, arguments);
      }

      return deleteMessage;
    }()
    /**
     * undeleteMessage - Undelete a message
     *
     * undeletes a message that was previous soft deleted. Hard deleted messages
     * cannot be undeleted. This is only allowed to be called from server-side
     * clients.
     *
     * @param {string} messageID The id of the message to undelete
     * @param {string} userID The id of the user who undeleted the message
     *
     * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message
     */

  }, {
    key: "undeleteMessage",
    value: function () {
      var _undeleteMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee64(messageID, userID) {
        return _regeneratorRuntime__default['default'].wrap(function _callee64$(_context64) {
          while (1) {
            switch (_context64.prev = _context64.next) {
              case 0:
                _context64.next = 2;
                return this.post(this.baseURL + "/messages/".concat(encodeURIComponent(messageID), "/undelete"), {
                  undeleted_by: userID
                });

              case 2:
                return _context64.abrupt("return", _context64.sent);

              case 3:
              case "end":
                return _context64.stop();
            }
          }
        }, _callee64, this);
      }));

      function undeleteMessage(_x88, _x89) {
        return _undeleteMessage.apply(this, arguments);
      }

      return undeleteMessage;
    }()
  }, {
    key: "getMessage",
    value: function () {
      var _getMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee65(messageID, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee65$(_context65) {
          while (1) {
            switch (_context65.prev = _context65.next) {
              case 0:
                _context65.next = 2;
                return this.get(this.baseURL + "/messages/".concat(encodeURIComponent(messageID)), _objectSpread$1({}, options));

              case 2:
                return _context65.abrupt("return", _context65.sent);

              case 3:
              case "end":
                return _context65.stop();
            }
          }
        }, _callee65, this);
      }));

      function getMessage(_x90, _x91) {
        return _getMessage.apply(this, arguments);
      }

      return getMessage;
    }()
    /**
     * queryThreads - returns the list of threads of current user.
     *
     * @param {QueryThreadsOptions} options Options object for pagination and limiting the participants and replies.
     * @param {number}  options.limit Limits the number of threads to be returned.
     * @param {boolean} options.watch Subscribes the user to the channels of the threads.
     * @param {number}  options.participant_limit Limits the number of participants returned per threads.
     * @param {number}  options.reply_limit Limits the number of replies returned per threads.
     * @param {ThreadFilters} options.filter MongoDB style filters for threads
     * @param {ThreadSort} options.sort MongoDB style sort for threads
     *
     * @returns {{ threads: Thread<StreamChatGenerics>[], next: string }} Returns the list of threads and the next cursor.
     */

  }, {
    key: "queryThreads",
    value: function () {
      var _queryThreads = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee66() {
        var _this5 = this;

        var options,
            optionsWithDefaults,
            requestBody,
            response,
            _args66 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee66$(_context66) {
          while (1) {
            switch (_context66.prev = _context66.next) {
              case 0:
                options = _args66.length > 0 && _args66[0] !== undefined ? _args66[0] : {};
                optionsWithDefaults = _objectSpread$1({
                  limit: 10,
                  participant_limit: 10,
                  reply_limit: 3,
                  watch: true
                }, options);
                requestBody = _objectSpread$1({}, optionsWithDefaults);

                if (optionsWithDefaults.filter && Object.keys(optionsWithDefaults.filter).length > 0) {
                  requestBody.filter = optionsWithDefaults.filter;
                }

                if (optionsWithDefaults.sort && (Array.isArray(optionsWithDefaults.sort) ? optionsWithDefaults.sort.length > 0 : Object.keys(optionsWithDefaults.sort).length > 0)) {
                  requestBody.sort = normalizeQuerySort(optionsWithDefaults.sort);
                }

                _context66.next = 7;
                return this.post("".concat(this.baseURL, "/threads"), requestBody);

              case 7:
                response = _context66.sent;
                return _context66.abrupt("return", {
                  threads: response.threads.map(function (thread) {
                    return new Thread({
                      client: _this5,
                      threadData: thread
                    });
                  }),
                  next: response.next
                });

              case 9:
              case "end":
                return _context66.stop();
            }
          }
        }, _callee66, this);
      }));

      function queryThreads() {
        return _queryThreads.apply(this, arguments);
      }

      return queryThreads;
    }()
    /**
     * getThread - returns the thread of a message by its id.
     *
     * @param {string}            messageId The message id
     * @param {GetThreadOptions}  options Options object for pagination and limiting the participants and replies.
     * @param {boolean}           options.watch Subscribes the user to the channel of the thread.
     * @param {number}            options.participant_limit Limits the number of participants returned per threads.
     * @param {number}            options.reply_limit Limits the number of replies returned per threads.
     *
     * @returns {Thread<StreamChatGenerics>} Returns the thread.
     */

  }, {
    key: "getThread",
    value: function () {
      var _getThread = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee67(messageId) {
        var options,
            optionsWithDefaults,
            response,
            _args67 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee67$(_context67) {
          while (1) {
            switch (_context67.prev = _context67.next) {
              case 0:
                options = _args67.length > 1 && _args67[1] !== undefined ? _args67[1] : {};

                if (messageId) {
                  _context67.next = 3;
                  break;
                }

                throw Error('Please specify the messageId when calling getThread');

              case 3:
                optionsWithDefaults = _objectSpread$1({
                  participant_limit: 100,
                  reply_limit: 3,
                  watch: true
                }, options);
                _context67.next = 6;
                return this.get("".concat(this.baseURL, "/threads/").concat(encodeURIComponent(messageId)), optionsWithDefaults);

              case 6:
                response = _context67.sent;
                return _context67.abrupt("return", new Thread({
                  client: this,
                  threadData: response.thread
                }));

              case 8:
              case "end":
                return _context67.stop();
            }
          }
        }, _callee67, this);
      }));

      function getThread(_x92) {
        return _getThread.apply(this, arguments);
      }

      return getThread;
    }()
    /**
     * partialUpdateThread - updates the given thread
     *
     * @param {string}              messageId The id of the thread message which needs to be updated.
     * @param {PartialThreadUpdate} partialThreadObject should contain "set" or "unset" params for any of the thread's non-reserved fields.
     *
     * @returns {GetThreadAPIResponse<StreamChatGenerics>} Returns the updated thread.
     */

  }, {
    key: "partialUpdateThread",
    value: function () {
      var _partialUpdateThread = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee68(messageId, partialThreadObject) {
        var reservedThreadFields, _key5;

        return _regeneratorRuntime__default['default'].wrap(function _callee68$(_context68) {
          while (1) {
            switch (_context68.prev = _context68.next) {
              case 0:
                if (messageId) {
                  _context68.next = 2;
                  break;
                }

                throw Error('Please specify the message id when calling partialUpdateThread');

              case 2:
                // check for reserved fields from ThreadResponse type within partialThreadObject's set and unset.
                // Throw error if any of the reserved field is found.
                reservedThreadFields = ['created_at', 'id', 'last_message_at', 'type', 'updated_at', 'user', 'reply_count', 'participants', 'channel', 'custom'];
                _context68.t0 = _regeneratorRuntime__default['default'].keys(_objectSpread$1(_objectSpread$1({}, partialThreadObject.set), partialThreadObject.unset));

              case 4:
                if ((_context68.t1 = _context68.t0()).done) {
                  _context68.next = 10;
                  break;
                }

                _key5 = _context68.t1.value;

                if (!reservedThreadFields.includes(_key5)) {
                  _context68.next = 8;
                  break;
                }

                throw Error("You cannot set ".concat(_key5, " field on Thread object. ").concat(_key5, " is reserved for server-side use. Please omit ").concat(_key5, " from your set object."));

              case 8:
                _context68.next = 4;
                break;

              case 10:
                _context68.next = 12;
                return this.patch("".concat(this.baseURL, "/threads/").concat(encodeURIComponent(messageId)), partialThreadObject);

              case 12:
                return _context68.abrupt("return", _context68.sent);

              case 13:
              case "end":
                return _context68.stop();
            }
          }
        }, _callee68, this);
      }));

      function partialUpdateThread(_x93, _x94) {
        return _partialUpdateThread.apply(this, arguments);
      }

      return partialUpdateThread;
    }()
  }, {
    key: "getUserAgent",
    value: function getUserAgent() {
      var _this$deviceIdentifie;

      if (this.userAgent) {
        return this.userAgent;
      }

      var version = "8.60.0";
      var clientBundle = "";
      var userAgentString = '';

      if (this.sdkIdentifier) {
        userAgentString = "stream-chat-".concat(this.sdkIdentifier.name, "-v").concat(this.sdkIdentifier.version, "-llc-v").concat(version);
      } else {
        userAgentString = "stream-chat-js-v".concat(version, "-").concat(this.node ? 'node' : 'browser');
      }

      var _ref10 = (_this$deviceIdentifie = this.deviceIdentifier) !== null && _this$deviceIdentifie !== void 0 ? _this$deviceIdentifie : {},
          os = _ref10.os,
          model = _ref10.model;

      return [// reports the device OS, if provided
      ['os', os], // reports the device model, if provided
      ['device_model', model], // reports which bundle is being picked from the exports
      ['client_bundle', clientBundle]].reduce(function (withArguments, _ref11) {
        var _ref12 = _slicedToArray__default['default'](_ref11, 2),
            key = _ref12[0],
            value = _ref12[1];

        return value && value.length > 0 ? withArguments.concat("|".concat(key, "=").concat(value)) : withArguments;
      }, userAgentString);
    }
    /**
     * @deprecated use sdkIdentifier instead
     * @param userAgent
     */

  }, {
    key: "setUserAgent",
    value: function setUserAgent(userAgent) {
      this.userAgent = userAgent;
    }
    /**
     * _isUsingServerAuth - Returns true if we're using server side auth
     */

  }, {
    key: "_enrichAxiosOptions",
    value: function _enrichAxiosOptions() {
      var _options$headers;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        params: {},
        headers: {},
        config: {}
      };

      var token = this._getToken();

      var authorization = token ? {
        Authorization: token
      } : undefined;
      var signal = null;

      if (this.nextRequestAbortController !== null) {
        signal = this.nextRequestAbortController.signal;
        this.nextRequestAbortController = null;
      }

      if (!((_options$headers = options.headers) !== null && _options$headers !== void 0 && _options$headers['x-client-request-id'])) {
        options.headers = _objectSpread$1(_objectSpread$1({}, options.headers), {}, {
          'x-client-request-id': randomId()
        });
      }

      var _ref13 = this.options.axiosRequestConfig || {},
          axiosRequestConfigParams = _ref13.params,
          axiosRequestConfigHeaders = _ref13.headers,
          axiosRequestConfigRest = _objectWithoutProperties__default['default'](_ref13, _excluded2);

      return _objectSpread$1(_objectSpread$1(_objectSpread$1({
        params: _objectSpread$1(_objectSpread$1({
          user_id: this.userID,
          connection_id: this._getConnectionID(),
          api_key: this.key
        }, options.params), axiosRequestConfigParams || {}),
        headers: _objectSpread$1(_objectSpread$1(_objectSpread$1({}, authorization), {}, {
          'stream-auth-type': this.getAuthType(),
          'X-Stream-Client': this.getUserAgent()
        }, options.headers), axiosRequestConfigHeaders || {})
      }, signal ? {
        signal: signal
      } : {}), options.config), axiosRequestConfigRest || {});
    }
  }, {
    key: "_getToken",
    value: function _getToken() {
      if (!this.tokenManager || this.anonymous) return null;
      return this.tokenManager.getToken();
    }
  }, {
    key: "_startCleaning",
    value: function _startCleaning() {
      var that = this;

      if (this.cleaningIntervalRef != null) {
        return;
      }

      this.cleaningIntervalRef = setInterval(function () {
        // call clean on the channel, used for calling the stop.typing event etc.
        for (var _i3 = 0, _Object$values2 = Object.values(that.activeChannels); _i3 < _Object$values2.length; _i3++) {
          var _channel7 = _Object$values2[_i3];

          _channel7.clean();
        }
      }, 500);
    }
    /**
     * encode ws url payload
     * @private
     * @returns json string
     */

  }, {
    key: "verifyWebhook",
    value:
    /**
     * checks signature of a request
     * @param {string | Buffer} rawBody
     * @param {string} signature from HTTP header
     * @returns {boolean}
     */
    function verifyWebhook(requestBody, xSignature) {
      return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);
    }
    /** getPermission - gets the definition for a permission
     *
     * @param {string} name
     * @returns {Promise<PermissionAPIResponse>}
     */

  }, {
    key: "getPermission",
    value: function getPermission(name) {
      return this.get("".concat(this.baseURL, "/permissions/").concat(encodeURIComponent(name)));
    }
    /** createPermission - creates a custom permission
     *
     * @param {CustomPermissionOptions} permissionData the permission data
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "createPermission",
    value: function createPermission(permissionData) {
      return this.post("".concat(this.baseURL, "/permissions"), _objectSpread$1({}, permissionData));
    }
    /** updatePermission - updates an existing custom permission
     *
     * @param {string} id
     * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "updatePermission",
    value: function updatePermission(id, permissionData) {
      return this.put("".concat(this.baseURL, "/permissions/").concat(encodeURIComponent(id)), _objectSpread$1({}, permissionData));
    }
    /** deletePermission - deletes a custom permission
     *
     * @param {string} name
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "deletePermission",
    value: function deletePermission(name) {
      return this.delete("".concat(this.baseURL, "/permissions/").concat(encodeURIComponent(name)));
    }
    /** listPermissions - returns the list of all permissions for this application
     *
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "listPermissions",
    value: function listPermissions() {
      return this.get("".concat(this.baseURL, "/permissions"));
    }
    /** createRole - creates a custom role
     *
     * @param {string} name the new role name
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "createRole",
    value: function createRole(name) {
      return this.post("".concat(this.baseURL, "/roles"), {
        name: name
      });
    }
    /** listRoles - returns the list of all roles for this application
     *
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "listRoles",
    value: function listRoles() {
      return this.get("".concat(this.baseURL, "/roles"));
    }
    /** deleteRole - deletes a custom role
     *
     * @param {string} name the role name
     * @returns {Promise<APIResponse>}
     */

  }, {
    key: "deleteRole",
    value: function deleteRole(name) {
      return this.delete("".concat(this.baseURL, "/roles/").concat(encodeURIComponent(name)));
    }
    /** sync - returns all events that happened for a list of channels since last sync
     * @param {string[]} channel_cids list of channel CIDs
     * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. "2020-05-06T15:05:01.207Z"
     * @param {SyncOptions} options See JSDoc in the type fields for more info
     *
     * @returns {Promise<SyncResponse>}
     */

  }, {
    key: "sync",
    value: function sync(channel_cids, last_sync_at) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.post("".concat(this.baseURL, "/sync"), _objectSpread$1({
        channel_cids: channel_cids,
        last_sync_at: last_sync_at
      }, options));
    }
    /**
     * sendUserCustomEvent - Send a custom event to a user
     *
     * @param {string} targetUserID target user id
     * @param {UserCustomEvent} event for example {type: 'friendship-request'}
     *
     * @return {Promise<APIResponse>} The Server Response
     */

  }, {
    key: "sendUserCustomEvent",
    value: function () {
      var _sendUserCustomEvent = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee69(targetUserID, event) {
        return _regeneratorRuntime__default['default'].wrap(function _callee69$(_context69) {
          while (1) {
            switch (_context69.prev = _context69.next) {
              case 0:
                _context69.next = 2;
                return this.post("".concat(this.baseURL, "/users/").concat(encodeURIComponent(targetUserID), "/event"), {
                  event: event
                });

              case 2:
                return _context69.abrupt("return", _context69.sent);

              case 3:
              case "end":
                return _context69.stop();
            }
          }
        }, _callee69, this);
      }));

      function sendUserCustomEvent(_x95, _x96) {
        return _sendUserCustomEvent.apply(this, arguments);
      }

      return sendUserCustomEvent;
    }()
    /**
     * Creates a new block list
     *
     * @param {BlockList} blockList - The block list to create
     * @param {string} blockList.name - The name of the block list
     * @param {string[]} blockList.words - List of words to block
     * @param {string} [blockList.team] - Team ID the block list belongs to
     *
     * @returns {Promise<APIResponse>} The server response
     */

  }, {
    key: "createBlockList",
    value: function createBlockList(blockList) {
      return this.post("".concat(this.baseURL, "/blocklists"), blockList);
    }
    /**
     * Lists all block lists
     *
     * @param {Object} [data] - Query parameters
     * @param {string} [data.team] - Team ID to filter block lists by
     *
     * @returns {Promise<APIResponse & {blocklists: BlockListResponse[]}>} Response containing array of block lists
     */

  }, {
    key: "listBlockLists",
    value: function listBlockLists(data) {
      return this.get("".concat(this.baseURL, "/blocklists"), data);
    }
    /**
     * Gets a specific block list
     *
     * @param {string} name - The name of the block list to retrieve
     * @param {Object} [data] - Query parameters
     * @param {string} [data.team] - Team ID that blocklist belongs to
     *
     * @returns {Promise<APIResponse & {blocklist: BlockListResponse}>} Response containing the block list
     */

  }, {
    key: "getBlockList",
    value: function getBlockList(name, data) {
      return this.get("".concat(this.baseURL, "/blocklists/").concat(encodeURIComponent(name)), data);
    }
    /**
     * Updates an existing block list
     *
     * @param {string} name - The name of the block list to update
     * @param {Object} data - The update data
     * @param {string[]} data.words - New list of words to block
     * @param {string} [data.team] - Team ID that blocklist belongs to
     *
     * @returns {Promise<APIResponse>} The server response
     */

  }, {
    key: "updateBlockList",
    value: function updateBlockList(name, data) {
      return this.put("".concat(this.baseURL, "/blocklists/").concat(encodeURIComponent(name)), data);
    }
    /**
     * Deletes a block list
     *
     * @param {string} name - The name of the block list to delete
     * @param {Object} [data] - Query parameters
     * @param {string} [data.team] - Team ID that blocklist belongs to
     *
     * @returns {Promise<APIResponse>} The server response
     */

  }, {
    key: "deleteBlockList",
    value: function deleteBlockList(name, data) {
      return this.delete("".concat(this.baseURL, "/blocklists/").concat(encodeURIComponent(name)), data);
    }
  }, {
    key: "exportChannels",
    value: function exportChannels(request) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var payload = _objectSpread$1({
        channels: request
      }, options);

      return this.post("".concat(this.baseURL, "/export_channels"), payload);
    }
  }, {
    key: "exportUsers",
    value: function exportUsers(request) {
      return this.post("".concat(this.baseURL, "/export/users"), request);
    }
  }, {
    key: "exportChannel",
    value: function exportChannel(request, options) {
      return this.exportChannels([request], options);
    }
  }, {
    key: "getExportChannelStatus",
    value: function getExportChannelStatus(id) {
      return this.get("".concat(this.baseURL, "/export_channels/").concat(encodeURIComponent(id)));
    }
  }, {
    key: "campaign",
    value: function campaign(idOrData, data) {
      if (idOrData && _typeof__default['default'](idOrData) === 'object') {
        return new Campaign(this, null, idOrData);
      }

      return new Campaign(this, idOrData, data);
    }
  }, {
    key: "segment",
    value: function segment(type, idOrData, data) {
      if (typeof idOrData === 'string') {
        return new Segment(this, type, idOrData, data);
      }

      return new Segment(this, type, null, idOrData);
    }
  }, {
    key: "validateServerSideAuth",
    value: function validateServerSideAuth() {
      if (!this.secret) {
        throw new Error('Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.');
      }
    }
    /**
     * createSegment - Creates a segment
     *
     * @private
     * @param {SegmentType} type Segment type
     * @param {string} id Segment ID
     * @param {string} name Segment name
     * @param {SegmentData} params Segment data
     *
     * @return {{segment: SegmentResponse} & APIResponse} The created Segment
     */

  }, {
    key: "createSegment",
    value: function () {
      var _createSegment = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee70(type, id, data) {
        var body;
        return _regeneratorRuntime__default['default'].wrap(function _callee70$(_context70) {
          while (1) {
            switch (_context70.prev = _context70.next) {
              case 0:
                this.validateServerSideAuth();
                body = _objectSpread$1({
                  id: id,
                  type: type
                }, data);
                return _context70.abrupt("return", this.post(this.baseURL + "/segments", body));

              case 3:
              case "end":
                return _context70.stop();
            }
          }
        }, _callee70, this);
      }));

      function createSegment(_x97, _x98, _x99) {
        return _createSegment.apply(this, arguments);
      }

      return createSegment;
    }()
    /**
     * createUserSegment - Creates a user segment
     *
     * @param {string} id Segment ID
     * @param {string} name Segment name
     * @param {SegmentData} data Segment data
     *
     * @return {Segment} The created Segment
     */

  }, {
    key: "createUserSegment",
    value: function () {
      var _createUserSegment = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee71(id, data) {
        return _regeneratorRuntime__default['default'].wrap(function _callee71$(_context71) {
          while (1) {
            switch (_context71.prev = _context71.next) {
              case 0:
                this.validateServerSideAuth();
                return _context71.abrupt("return", this.createSegment('user', id, data));

              case 2:
              case "end":
                return _context71.stop();
            }
          }
        }, _callee71, this);
      }));

      function createUserSegment(_x100, _x101) {
        return _createUserSegment.apply(this, arguments);
      }

      return createUserSegment;
    }()
    /**
     * createChannelSegment - Creates a channel segment
     *
     * @param {string} id Segment ID
     * @param {string} name Segment name
     * @param {SegmentData} data Segment data
     *
     * @return {Segment} The created Segment
     */

  }, {
    key: "createChannelSegment",
    value: function () {
      var _createChannelSegment = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee72(id, data) {
        return _regeneratorRuntime__default['default'].wrap(function _callee72$(_context72) {
          while (1) {
            switch (_context72.prev = _context72.next) {
              case 0:
                this.validateServerSideAuth();
                return _context72.abrupt("return", this.createSegment('channel', id, data));

              case 2:
              case "end":
                return _context72.stop();
            }
          }
        }, _callee72, this);
      }));

      function createChannelSegment(_x102, _x103) {
        return _createChannelSegment.apply(this, arguments);
      }

      return createChannelSegment;
    }()
  }, {
    key: "getSegment",
    value: function () {
      var _getSegment = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee73(id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee73$(_context73) {
          while (1) {
            switch (_context73.prev = _context73.next) {
              case 0:
                this.validateServerSideAuth();
                return _context73.abrupt("return", this.get(this.baseURL + "/segments/".concat(encodeURIComponent(id))));

              case 2:
              case "end":
                return _context73.stop();
            }
          }
        }, _callee73, this);
      }));

      function getSegment(_x104) {
        return _getSegment.apply(this, arguments);
      }

      return getSegment;
    }()
    /**
     * updateSegment - Update a segment
     *
     * @param {string} id Segment ID
     * @param {Partial<UpdateSegmentData>} data Data to update
     *
     * @return {Segment} Updated Segment
     */

  }, {
    key: "updateSegment",
    value: function () {
      var _updateSegment = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee74(id, data) {
        return _regeneratorRuntime__default['default'].wrap(function _callee74$(_context74) {
          while (1) {
            switch (_context74.prev = _context74.next) {
              case 0:
                this.validateServerSideAuth();
                return _context74.abrupt("return", this.put(this.baseURL + "/segments/".concat(encodeURIComponent(id)), data));

              case 2:
              case "end":
                return _context74.stop();
            }
          }
        }, _callee74, this);
      }));

      function updateSegment(_x105, _x106) {
        return _updateSegment.apply(this, arguments);
      }

      return updateSegment;
    }()
    /**
     * addSegmentTargets - Add targets to a segment
     *
     * @param {string} id Segment ID
     * @param {string[]} targets Targets to add to the segment
     *
     * @return {APIResponse} API response
     */

  }, {
    key: "addSegmentTargets",
    value: function () {
      var _addSegmentTargets = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee75(id, targets) {
        var body;
        return _regeneratorRuntime__default['default'].wrap(function _callee75$(_context75) {
          while (1) {
            switch (_context75.prev = _context75.next) {
              case 0:
                this.validateServerSideAuth();
                body = {
                  target_ids: targets
                };
                return _context75.abrupt("return", this.post(this.baseURL + "/segments/".concat(encodeURIComponent(id), "/addtargets"), body));

              case 3:
              case "end":
                return _context75.stop();
            }
          }
        }, _callee75, this);
      }));

      function addSegmentTargets(_x107, _x108) {
        return _addSegmentTargets.apply(this, arguments);
      }

      return addSegmentTargets;
    }()
  }, {
    key: "querySegmentTargets",
    value: function () {
      var _querySegmentTargets = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee76(id) {
        var filter,
            sort,
            options,
            _args76 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee76$(_context76) {
          while (1) {
            switch (_context76.prev = _context76.next) {
              case 0:
                filter = _args76.length > 1 && _args76[1] !== undefined ? _args76[1] : {};
                sort = _args76.length > 2 && _args76[2] !== undefined ? _args76[2] : [];
                options = _args76.length > 3 && _args76[3] !== undefined ? _args76[3] : {};
                this.validateServerSideAuth();
                return _context76.abrupt("return", this.post(this.baseURL + "/segments/".concat(encodeURIComponent(id), "/targets/query"), _objectSpread$1({
                  filter: filter || {},
                  sort: sort || []
                }, options)));

              case 5:
              case "end":
                return _context76.stop();
            }
          }
        }, _callee76, this);
      }));

      function querySegmentTargets(_x109) {
        return _querySegmentTargets.apply(this, arguments);
      }

      return querySegmentTargets;
    }()
    /**
     * removeSegmentTargets - Remove targets from a segment
     *
     * @param {string} id Segment ID
     * @param {string[]} targets Targets to add to the segment
     *
     * @return {APIResponse} API response
     */

  }, {
    key: "removeSegmentTargets",
    value: function () {
      var _removeSegmentTargets = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee77(id, targets) {
        var body;
        return _regeneratorRuntime__default['default'].wrap(function _callee77$(_context77) {
          while (1) {
            switch (_context77.prev = _context77.next) {
              case 0:
                this.validateServerSideAuth();
                body = {
                  target_ids: targets
                };
                return _context77.abrupt("return", this.post(this.baseURL + "/segments/".concat(encodeURIComponent(id), "/deletetargets"), body));

              case 3:
              case "end":
                return _context77.stop();
            }
          }
        }, _callee77, this);
      }));

      function removeSegmentTargets(_x110, _x111) {
        return _removeSegmentTargets.apply(this, arguments);
      }

      return removeSegmentTargets;
    }()
    /**
     * querySegments - Query Segments
     *
     * @param {filter} filter MongoDB style filter conditions
     * @param {QuerySegmentsOptions} options Options for sorting/paginating the results
     *
     * @return {Segment[]} Segments
     */

  }, {
    key: "querySegments",
    value: function () {
      var _querySegments = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee78(filter, sort) {
        var options,
            _args78 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee78$(_context78) {
          while (1) {
            switch (_context78.prev = _context78.next) {
              case 0:
                options = _args78.length > 2 && _args78[2] !== undefined ? _args78[2] : {};
                this.validateServerSideAuth();
                return _context78.abrupt("return", this.post(this.baseURL + "/segments/query", _objectSpread$1({
                  filter: filter,
                  sort: sort
                }, options)));

              case 3:
              case "end":
                return _context78.stop();
            }
          }
        }, _callee78, this);
      }));

      function querySegments(_x112, _x113) {
        return _querySegments.apply(this, arguments);
      }

      return querySegments;
    }()
    /**
     * deleteSegment - Delete a Campaign Segment
     *
     * @param {string} id Segment ID
     *
     * @return {Promise<APIResponse>} The Server Response
     */

  }, {
    key: "deleteSegment",
    value: function () {
      var _deleteSegment = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee79(id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee79$(_context79) {
          while (1) {
            switch (_context79.prev = _context79.next) {
              case 0:
                this.validateServerSideAuth();
                return _context79.abrupt("return", this.delete(this.baseURL + "/segments/".concat(encodeURIComponent(id))));

              case 2:
              case "end":
                return _context79.stop();
            }
          }
        }, _callee79, this);
      }));

      function deleteSegment(_x114) {
        return _deleteSegment.apply(this, arguments);
      }

      return deleteSegment;
    }()
    /**
     * segmentTargetExists - Check if a target exists in a segment
     *
     * @param {string} segmentId Segment ID
     * @param {string} targetId Target ID
     *
     * @return {Promise<APIResponse>} The Server Response
     */

  }, {
    key: "segmentTargetExists",
    value: function () {
      var _segmentTargetExists = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee80(segmentId, targetId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee80$(_context80) {
          while (1) {
            switch (_context80.prev = _context80.next) {
              case 0:
                this.validateServerSideAuth();
                return _context80.abrupt("return", this.get(this.baseURL + "/segments/".concat(encodeURIComponent(segmentId), "/target/").concat(encodeURIComponent(targetId))));

              case 2:
              case "end":
                return _context80.stop();
            }
          }
        }, _callee80, this);
      }));

      function segmentTargetExists(_x115, _x116) {
        return _segmentTargetExists.apply(this, arguments);
      }

      return segmentTargetExists;
    }()
    /**
     * createCampaign - Creates a Campaign
     *
     * @param {CampaignData} params Campaign data
     *
     * @return {Campaign} The Created Campaign
     */

  }, {
    key: "createCampaign",
    value: function () {
      var _createCampaign = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee81(params) {
        return _regeneratorRuntime__default['default'].wrap(function _callee81$(_context81) {
          while (1) {
            switch (_context81.prev = _context81.next) {
              case 0:
                this.validateServerSideAuth();
                return _context81.abrupt("return", this.post(this.baseURL + "/campaigns", _objectSpread$1({}, params)));

              case 2:
              case "end":
                return _context81.stop();
            }
          }
        }, _callee81, this);
      }));

      function createCampaign(_x117) {
        return _createCampaign.apply(this, arguments);
      }

      return createCampaign;
    }()
  }, {
    key: "getCampaign",
    value: function () {
      var _getCampaign = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee82(id, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee82$(_context82) {
          while (1) {
            switch (_context82.prev = _context82.next) {
              case 0:
                this.validateServerSideAuth();
                return _context82.abrupt("return", this.get(this.baseURL + "/campaigns/".concat(encodeURIComponent(id)), _objectSpread$1({}, options === null || options === void 0 ? void 0 : options.users)));

              case 2:
              case "end":
                return _context82.stop();
            }
          }
        }, _callee82, this);
      }));

      function getCampaign(_x118, _x119) {
        return _getCampaign.apply(this, arguments);
      }

      return getCampaign;
    }()
  }, {
    key: "startCampaign",
    value: function () {
      var _startCampaign = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee83(id, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee83$(_context83) {
          while (1) {
            switch (_context83.prev = _context83.next) {
              case 0:
                this.validateServerSideAuth();
                return _context83.abrupt("return", this.post(this.baseURL + "/campaigns/".concat(encodeURIComponent(id), "/start"), {
                  scheduled_for: options === null || options === void 0 ? void 0 : options.scheduledFor,
                  stop_at: options === null || options === void 0 ? void 0 : options.stopAt
                }));

              case 2:
              case "end":
                return _context83.stop();
            }
          }
        }, _callee83, this);
      }));

      function startCampaign(_x120, _x121) {
        return _startCampaign.apply(this, arguments);
      }

      return startCampaign;
    }()
    /**
     * queryCampaigns - Query Campaigns
     *
     *
     * @return {Campaign[]} Campaigns
     */

  }, {
    key: "queryCampaigns",
    value: function () {
      var _queryCampaigns = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee84(filter, sort, options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee84$(_context84) {
          while (1) {
            switch (_context84.prev = _context84.next) {
              case 0:
                this.validateServerSideAuth();
                _context84.next = 3;
                return this.post(this.baseURL + "/campaigns/query", _objectSpread$1({
                  filter: filter,
                  sort: sort
                }, options || {}));

              case 3:
                return _context84.abrupt("return", _context84.sent);

              case 4:
              case "end":
                return _context84.stop();
            }
          }
        }, _callee84, this);
      }));

      function queryCampaigns(_x122, _x123, _x124) {
        return _queryCampaigns.apply(this, arguments);
      }

      return queryCampaigns;
    }()
    /**
     * updateCampaign - Update a Campaign
     *
     * @param {string} id Campaign ID
     * @param {Partial<CampaignData>} params Campaign data
     *
     * @return {Campaign} Updated Campaign
     */

  }, {
    key: "updateCampaign",
    value: function () {
      var _updateCampaign = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee85(id, params) {
        return _regeneratorRuntime__default['default'].wrap(function _callee85$(_context85) {
          while (1) {
            switch (_context85.prev = _context85.next) {
              case 0:
                this.validateServerSideAuth();
                return _context85.abrupt("return", this.put(this.baseURL + "/campaigns/".concat(encodeURIComponent(id)), params));

              case 2:
              case "end":
                return _context85.stop();
            }
          }
        }, _callee85, this);
      }));

      function updateCampaign(_x125, _x126) {
        return _updateCampaign.apply(this, arguments);
      }

      return updateCampaign;
    }()
    /**
     * deleteCampaign - Delete a Campaign
     *
     * @param {string} id Campaign ID
     *
     * @return {Promise<APIResponse>} The Server Response
     */

  }, {
    key: "deleteCampaign",
    value: function () {
      var _deleteCampaign = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee86(id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee86$(_context86) {
          while (1) {
            switch (_context86.prev = _context86.next) {
              case 0:
                this.validateServerSideAuth();
                return _context86.abrupt("return", this.delete(this.baseURL + "/campaigns/".concat(encodeURIComponent(id))));

              case 2:
              case "end":
                return _context86.stop();
            }
          }
        }, _callee86, this);
      }));

      function deleteCampaign(_x127) {
        return _deleteCampaign.apply(this, arguments);
      }

      return deleteCampaign;
    }()
    /**
     * stopCampaign - Stop a Campaign
     *
     * @param {string} id Campaign ID
     *
     * @return {Campaign} Stopped Campaign
     */

  }, {
    key: "stopCampaign",
    value: function () {
      var _stopCampaign = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee87(id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee87$(_context87) {
          while (1) {
            switch (_context87.prev = _context87.next) {
              case 0:
                this.validateServerSideAuth();
                return _context87.abrupt("return", this.post(this.baseURL + "/campaigns/".concat(encodeURIComponent(id), "/stop")));

              case 2:
              case "end":
                return _context87.stop();
            }
          }
        }, _callee87, this);
      }));

      function stopCampaign(_x128) {
        return _stopCampaign.apply(this, arguments);
      }

      return stopCampaign;
    }()
    /**
     * enrichURL - Get OpenGraph data of the given link
     *
     * @param {string} url link
     * @return {OGAttachment} OG Attachment
     */

  }, {
    key: "enrichURL",
    value: function () {
      var _enrichURL = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee88(url) {
        return _regeneratorRuntime__default['default'].wrap(function _callee88$(_context88) {
          while (1) {
            switch (_context88.prev = _context88.next) {
              case 0:
                return _context88.abrupt("return", this.get(this.baseURL + "/og", {
                  url: url
                }));

              case 1:
              case "end":
                return _context88.stop();
            }
          }
        }, _callee88, this);
      }));

      function enrichURL(_x129) {
        return _enrichURL.apply(this, arguments);
      }

      return enrichURL;
    }()
    /**
     * getTask - Gets status of a long running task
     *
     * @param {string} id Task ID
     *
     * @return {TaskStatus} The task status
     */

  }, {
    key: "getTask",
    value: function () {
      var _getTask = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee89(id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee89$(_context89) {
          while (1) {
            switch (_context89.prev = _context89.next) {
              case 0:
                return _context89.abrupt("return", this.get("".concat(this.baseURL, "/tasks/").concat(encodeURIComponent(id))));

              case 1:
              case "end":
                return _context89.stop();
            }
          }
        }, _callee89, this);
      }));

      function getTask(_x130) {
        return _getTask.apply(this, arguments);
      }

      return getTask;
    }()
    /**
     * deleteChannels - Deletes a list of channel
     *
     * @param {string[]} cids Channel CIDs
     * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not
     *
     * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well
     */

  }, {
    key: "deleteChannels",
    value: function () {
      var _deleteChannels = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee90(cids) {
        var options,
            _args90 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee90$(_context90) {
          while (1) {
            switch (_context90.prev = _context90.next) {
              case 0:
                options = _args90.length > 1 && _args90[1] !== undefined ? _args90[1] : {};
                _context90.next = 3;
                return this.post(this.baseURL + "/channels/delete", _objectSpread$1({
                  cids: cids
                }, options));

              case 3:
                return _context90.abrupt("return", _context90.sent);

              case 4:
              case "end":
                return _context90.stop();
            }
          }
        }, _callee90, this);
      }));

      function deleteChannels(_x131) {
        return _deleteChannels.apply(this, arguments);
      }

      return deleteChannels;
    }()
    /**
     * deleteUsers - Batch Delete Users
     *
     * @param {string[]} user_ids which users to delete
     * @param {DeleteUserOptions} options Configuration how to delete users
     *
     * @return {TaskResponse} A task ID
     */

  }, {
    key: "deleteUsers",
    value: function () {
      var _deleteUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee91(user_ids) {
        var options,
            _args91 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee91$(_context91) {
          while (1) {
            switch (_context91.prev = _context91.next) {
              case 0:
                options = _args91.length > 1 && _args91[1] !== undefined ? _args91[1] : {};

                if (!(typeof options.user !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.user))) {
                  _context91.next = 3;
                  break;
                }

                throw new Error('Invalid delete user options. user must be one of [soft hard pruning]');

              case 3:
                if (!(typeof options.conversations !== 'undefined' && !['soft', 'hard'].includes(options.conversations))) {
                  _context91.next = 5;
                  break;
                }

                throw new Error('Invalid delete user options. conversations must be one of [soft hard]');

              case 5:
                if (!(typeof options.messages !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.messages))) {
                  _context91.next = 7;
                  break;
                }

                throw new Error('Invalid delete user options. messages must be one of [soft hard pruning]');

              case 7:
                _context91.next = 9;
                return this.post(this.baseURL + "/users/delete", _objectSpread$1({
                  user_ids: user_ids
                }, options));

              case 9:
                return _context91.abrupt("return", _context91.sent);

              case 10:
              case "end":
                return _context91.stop();
            }
          }
        }, _callee91, this);
      }));

      function deleteUsers(_x132) {
        return _deleteUsers.apply(this, arguments);
      }

      return deleteUsers;
    }()
    /**
     * _createImportURL - Create an Import upload url.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} filename filename of uploaded data
     * @return {APIResponse & CreateImportResponse} An ImportTask
     */

  }, {
    key: "_createImportURL",
    value: function () {
      var _createImportURL2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee92(filename) {
        return _regeneratorRuntime__default['default'].wrap(function _callee92$(_context92) {
          while (1) {
            switch (_context92.prev = _context92.next) {
              case 0:
                _context92.next = 2;
                return this.post(this.baseURL + "/import_urls", {
                  filename: filename
                });

              case 2:
                return _context92.abrupt("return", _context92.sent);

              case 3:
              case "end":
                return _context92.stop();
            }
          }
        }, _callee92, this);
      }));

      function _createImportURL(_x133) {
        return _createImportURL2.apply(this, arguments);
      }

      return _createImportURL;
    }()
    /**
     * _createImport - Create an Import Task.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} path path of uploaded data
     * @param {CreateImportOptions} options import options
     * @return {APIResponse & CreateImportResponse} An ImportTask
     */

  }, {
    key: "_createImport",
    value: function () {
      var _createImport2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee93(path) {
        var options,
            _args93 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee93$(_context93) {
          while (1) {
            switch (_context93.prev = _context93.next) {
              case 0:
                options = _args93.length > 1 && _args93[1] !== undefined ? _args93[1] : {
                  mode: 'upsert'
                };
                _context93.next = 3;
                return this.post(this.baseURL + "/imports", _objectSpread$1({
                  path: path
                }, options));

              case 3:
                return _context93.abrupt("return", _context93.sent);

              case 4:
              case "end":
                return _context93.stop();
            }
          }
        }, _callee93, this);
      }));

      function _createImport(_x134) {
        return _createImport2.apply(this, arguments);
      }

      return _createImport;
    }()
    /**
     * _getImport - Get an Import Task.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {string} id id of Import Task
     *
     * @return {APIResponse & GetImportResponse} An ImportTask
     */

  }, {
    key: "_getImport",
    value: function () {
      var _getImport2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee94(id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee94$(_context94) {
          while (1) {
            switch (_context94.prev = _context94.next) {
              case 0:
                _context94.next = 2;
                return this.get(this.baseURL + "/imports/".concat(encodeURIComponent(id)));

              case 2:
                return _context94.abrupt("return", _context94.sent);

              case 3:
              case "end":
                return _context94.stop();
            }
          }
        }, _callee94, this);
      }));

      function _getImport(_x135) {
        return _getImport2.apply(this, arguments);
      }

      return _getImport;
    }()
    /**
     * _listImports - Lists Import Tasks.
     *
     * Note: Do not use this.
     * It is present for internal usage only.
     * This function can, and will, break and/or be removed at any point in time.
     *
     * @private
     * @param {ListImportsPaginationOptions} options pagination options
     *
     * @return {APIResponse & ListImportsResponse} An ImportTask
     */

  }, {
    key: "_listImports",
    value: function () {
      var _listImports2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee95(options) {
        return _regeneratorRuntime__default['default'].wrap(function _callee95$(_context95) {
          while (1) {
            switch (_context95.prev = _context95.next) {
              case 0:
                _context95.next = 2;
                return this.get(this.baseURL + "/imports", options);

              case 2:
                return _context95.abrupt("return", _context95.sent);

              case 3:
              case "end":
                return _context95.stop();
            }
          }
        }, _callee95, this);
      }));

      function _listImports(_x136) {
        return _listImports2.apply(this, arguments);
      }

      return _listImports;
    }()
    /**
     * upsertPushProvider - Create or Update a push provider
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @param {PushProviderConfig} configuration of the provider you want to create or update
     *
     * @return {APIResponse & PushProviderUpsertResponse} A push provider
     */

  }, {
    key: "upsertPushProvider",
    value: function () {
      var _upsertPushProvider = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee96(pushProvider) {
        return _regeneratorRuntime__default['default'].wrap(function _callee96$(_context96) {
          while (1) {
            switch (_context96.prev = _context96.next) {
              case 0:
                _context96.next = 2;
                return this.post(this.baseURL + "/push_providers", {
                  push_provider: pushProvider
                });

              case 2:
                return _context96.abrupt("return", _context96.sent);

              case 3:
              case "end":
                return _context96.stop();
            }
          }
        }, _callee96, this);
      }));

      function upsertPushProvider(_x137) {
        return _upsertPushProvider.apply(this, arguments);
      }

      return upsertPushProvider;
    }()
    /**
     * deletePushProvider - Delete a push provider
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @param {PushProviderID} type and foreign id of the push provider to be deleted
     *
     * @return {APIResponse} An API response
     */

  }, {
    key: "deletePushProvider",
    value: function () {
      var _deletePushProvider = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee97(_ref14) {
        var type, name;
        return _regeneratorRuntime__default['default'].wrap(function _callee97$(_context97) {
          while (1) {
            switch (_context97.prev = _context97.next) {
              case 0:
                type = _ref14.type, name = _ref14.name;
                _context97.next = 3;
                return this.delete(this.baseURL + "/push_providers/".concat(encodeURIComponent(type), "/").concat(encodeURIComponent(name)));

              case 3:
                return _context97.abrupt("return", _context97.sent);

              case 4:
              case "end":
                return _context97.stop();
            }
          }
        }, _callee97, this);
      }));

      function deletePushProvider(_x138) {
        return _deletePushProvider.apply(this, arguments);
      }

      return deletePushProvider;
    }()
    /**
     * listPushProviders - Get all push providers in the app
     *
     * Note: Works only for v2 push version is enabled on app settings.
     *
     * @return {APIResponse & PushProviderListResponse} A push provider
     */

  }, {
    key: "listPushProviders",
    value: function () {
      var _listPushProviders = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee98() {
        return _regeneratorRuntime__default['default'].wrap(function _callee98$(_context98) {
          while (1) {
            switch (_context98.prev = _context98.next) {
              case 0:
                _context98.next = 2;
                return this.get(this.baseURL + "/push_providers");

              case 2:
                return _context98.abrupt("return", _context98.sent);

              case 3:
              case "end":
                return _context98.stop();
            }
          }
        }, _callee98, this);
      }));

      function listPushProviders() {
        return _listPushProviders.apply(this, arguments);
      }

      return listPushProviders;
    }()
    /**
     * creates an abort controller that will be used by the next HTTP Request.
     */

  }, {
    key: "createAbortControllerForNextRequest",
    value: function createAbortControllerForNextRequest() {
      return this.nextRequestAbortController = new AbortController();
    }
    /**
     * commits a pending message, making it visible in the channel and for other users
     * @param id the message id
     *
     * @return {APIResponse & MessageResponse} The message
     */

  }, {
    key: "commitMessage",
    value: function () {
      var _commitMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee99(id) {
        return _regeneratorRuntime__default['default'].wrap(function _callee99$(_context99) {
          while (1) {
            switch (_context99.prev = _context99.next) {
              case 0:
                _context99.next = 2;
                return this.post(this.baseURL + "/messages/".concat(encodeURIComponent(id), "/commit"));

              case 2:
                return _context99.abrupt("return", _context99.sent);

              case 3:
              case "end":
                return _context99.stop();
            }
          }
        }, _callee99, this);
      }));

      function commitMessage(_x139) {
        return _commitMessage.apply(this, arguments);
      }

      return commitMessage;
    }()
    /**
     * Creates a poll
     * @param poll PollData The poll that will be created
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & CreatePollAPIResponse} The poll
     */

  }, {
    key: "createPoll",
    value: function () {
      var _createPoll = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee100(poll, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee100$(_context100) {
          while (1) {
            switch (_context100.prev = _context100.next) {
              case 0:
                _context100.next = 2;
                return this.post(this.baseURL + "/polls", _objectSpread$1(_objectSpread$1({}, poll), userId ? {
                  user_id: userId
                } : {}));

              case 2:
                return _context100.abrupt("return", _context100.sent);

              case 3:
              case "end":
                return _context100.stop();
            }
          }
        }, _callee100, this);
      }));

      function createPoll(_x140, _x141) {
        return _createPoll.apply(this, arguments);
      }

      return createPoll;
    }()
    /**
     * Retrieves a poll
     * @param id string The poll id
     *  @param userId string The user id (only serverside)
     * @returns {APIResponse & GetPollAPIResponse} The poll
     */

  }, {
    key: "getPoll",
    value: function () {
      var _getPoll = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee101(id, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee101$(_context101) {
          while (1) {
            switch (_context101.prev = _context101.next) {
              case 0:
                _context101.next = 2;
                return this.get(this.baseURL + "/polls/".concat(encodeURIComponent(id)), userId ? {
                  user_id: userId
                } : {});

              case 2:
                return _context101.abrupt("return", _context101.sent);

              case 3:
              case "end":
                return _context101.stop();
            }
          }
        }, _callee101, this);
      }));

      function getPoll(_x142, _x143) {
        return _getPoll.apply(this, arguments);
      }

      return getPoll;
    }()
    /**
     * Updates a poll
     * @param poll PollData The poll that will be updated
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & PollResponse} The poll
     */

  }, {
    key: "updatePoll",
    value: function () {
      var _updatePoll = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee102(poll, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee102$(_context102) {
          while (1) {
            switch (_context102.prev = _context102.next) {
              case 0:
                _context102.next = 2;
                return this.put(this.baseURL + "/polls", _objectSpread$1(_objectSpread$1({}, poll), userId ? {
                  user_id: userId
                } : {}));

              case 2:
                return _context102.abrupt("return", _context102.sent);

              case 3:
              case "end":
                return _context102.stop();
            }
          }
        }, _callee102, this);
      }));

      function updatePoll(_x144, _x145) {
        return _updatePoll.apply(this, arguments);
      }

      return updatePoll;
    }()
    /**
     * Partially updates a poll
     * @param id string The poll id
     * @param {PartialPollUpdate<StreamChatGenerics>} partialPollObject which should contain id and any of "set" or "unset" params;
     * @param userId string The user id (only serverside)
     * example: {id: "44f26af5-f2be-4fa7-9dac-71cf893781de", set:{field: value}, unset:["field2"]}
     * @returns {APIResponse & UpdatePollAPIResponse} The poll
     */

  }, {
    key: "partialUpdatePoll",
    value: function () {
      var _partialUpdatePoll = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee103(id, partialPollObject, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee103$(_context103) {
          while (1) {
            switch (_context103.prev = _context103.next) {
              case 0:
                _context103.next = 2;
                return this.patch(this.baseURL + "/polls/".concat(encodeURIComponent(id)), _objectSpread$1(_objectSpread$1({}, partialPollObject), userId ? {
                  user_id: userId
                } : {}));

              case 2:
                return _context103.abrupt("return", _context103.sent);

              case 3:
              case "end":
                return _context103.stop();
            }
          }
        }, _callee103, this);
      }));

      function partialUpdatePoll(_x146, _x147, _x148) {
        return _partialUpdatePoll.apply(this, arguments);
      }

      return partialUpdatePoll;
    }()
    /**
     * Delete a poll
     * @param id string The poll id
     * @param userId string The user id (only serverside)
     * @returns
     */

  }, {
    key: "deletePoll",
    value: function () {
      var _deletePoll = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee104(id, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee104$(_context104) {
          while (1) {
            switch (_context104.prev = _context104.next) {
              case 0:
                _context104.next = 2;
                return this.delete(this.baseURL + "/polls/".concat(encodeURIComponent(id)), _objectSpread$1({}, userId ? {
                  user_id: userId
                } : {}));

              case 2:
                return _context104.abrupt("return", _context104.sent);

              case 3:
              case "end":
                return _context104.stop();
            }
          }
        }, _callee104, this);
      }));

      function deletePoll(_x149, _x150) {
        return _deletePoll.apply(this, arguments);
      }

      return deletePoll;
    }()
    /**
     * Close a poll
     * @param id string The poll id
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & UpdatePollAPIResponse} The poll
     */

  }, {
    key: "closePoll",
    value: function () {
      var _closePoll = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee105(id, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee105$(_context105) {
          while (1) {
            switch (_context105.prev = _context105.next) {
              case 0:
                return _context105.abrupt("return", this.partialUpdatePoll(id, {
                  set: {
                    is_closed: true
                  }
                }, userId));

              case 1:
              case "end":
                return _context105.stop();
            }
          }
        }, _callee105, this);
      }));

      function closePoll(_x151, _x152) {
        return _closePoll.apply(this, arguments);
      }

      return closePoll;
    }()
    /**
     * Creates a poll option
     * @param pollId string The poll id
     * @param option PollOptionData The poll option that will be created
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & PollOptionResponse} The poll option
     */

  }, {
    key: "createPollOption",
    value: function () {
      var _createPollOption = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee106(pollId, option, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee106$(_context106) {
          while (1) {
            switch (_context106.prev = _context106.next) {
              case 0:
                _context106.next = 2;
                return this.post(this.baseURL + "/polls/".concat(encodeURIComponent(pollId), "/options"), _objectSpread$1(_objectSpread$1({}, option), userId ? {
                  user_id: userId
                } : {}));

              case 2:
                return _context106.abrupt("return", _context106.sent);

              case 3:
              case "end":
                return _context106.stop();
            }
          }
        }, _callee106, this);
      }));

      function createPollOption(_x153, _x154, _x155) {
        return _createPollOption.apply(this, arguments);
      }

      return createPollOption;
    }()
    /**
     * Retrieves a poll option
     * @param pollId string The poll id
     * @param optionId string The poll option id
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & PollOptionResponse} The poll option
     */

  }, {
    key: "getPollOption",
    value: function () {
      var _getPollOption = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee107(pollId, optionId, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee107$(_context107) {
          while (1) {
            switch (_context107.prev = _context107.next) {
              case 0:
                _context107.next = 2;
                return this.get(this.baseURL + "/polls/".concat(encodeURIComponent(pollId), "/options/").concat(encodeURIComponent(optionId)), userId ? {
                  user_id: userId
                } : {});

              case 2:
                return _context107.abrupt("return", _context107.sent);

              case 3:
              case "end":
                return _context107.stop();
            }
          }
        }, _callee107, this);
      }));

      function getPollOption(_x156, _x157, _x158) {
        return _getPollOption.apply(this, arguments);
      }

      return getPollOption;
    }()
    /**
     * Updates a poll option
     * @param pollId string The poll id
     * @param option PollOptionData The poll option that will be updated
     * @param userId string The user id (only serverside)
     * @returns
     */

  }, {
    key: "updatePollOption",
    value: function () {
      var _updatePollOption = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee108(pollId, option, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee108$(_context108) {
          while (1) {
            switch (_context108.prev = _context108.next) {
              case 0:
                _context108.next = 2;
                return this.put(this.baseURL + "/polls/".concat(encodeURIComponent(pollId), "/options"), _objectSpread$1(_objectSpread$1({}, option), userId ? {
                  user_id: userId
                } : {}));

              case 2:
                return _context108.abrupt("return", _context108.sent);

              case 3:
              case "end":
                return _context108.stop();
            }
          }
        }, _callee108, this);
      }));

      function updatePollOption(_x159, _x160, _x161) {
        return _updatePollOption.apply(this, arguments);
      }

      return updatePollOption;
    }()
    /**
     * Delete a poll option
     * @param pollId string The poll id
     * @param optionId string The poll option id
     * @param userId string The user id (only serverside)
     * @returns {APIResponse} The poll option
     */

  }, {
    key: "deletePollOption",
    value: function () {
      var _deletePollOption = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee109(pollId, optionId, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee109$(_context109) {
          while (1) {
            switch (_context109.prev = _context109.next) {
              case 0:
                _context109.next = 2;
                return this.delete(this.baseURL + "/polls/".concat(encodeURIComponent(pollId), "/options/").concat(encodeURIComponent(optionId)), userId ? {
                  user_id: userId
                } : {});

              case 2:
                return _context109.abrupt("return", _context109.sent);

              case 3:
              case "end":
                return _context109.stop();
            }
          }
        }, _callee109, this);
      }));

      function deletePollOption(_x162, _x163, _x164) {
        return _deletePollOption.apply(this, arguments);
      }

      return deletePollOption;
    }()
    /**
     * Cast vote on a poll
     * @param messageId string The message id
     * @param pollId string The poll id
     * @param vote PollVoteData The vote that will be casted
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & CastVoteAPIResponse} The poll vote
     */

  }, {
    key: "castPollVote",
    value: function () {
      var _castPollVote = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee110(messageId, pollId, vote, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee110$(_context110) {
          while (1) {
            switch (_context110.prev = _context110.next) {
              case 0:
                _context110.next = 2;
                return this.post(this.baseURL + "/messages/".concat(encodeURIComponent(messageId), "/polls/").concat(encodeURIComponent(pollId), "/vote"), _objectSpread$1({
                  vote: vote
                }, userId ? {
                  user_id: userId
                } : {}));

              case 2:
                return _context110.abrupt("return", _context110.sent);

              case 3:
              case "end":
                return _context110.stop();
            }
          }
        }, _callee110, this);
      }));

      function castPollVote(_x165, _x166, _x167, _x168) {
        return _castPollVote.apply(this, arguments);
      }

      return castPollVote;
    }()
    /**
     * Add a poll answer
     * @param messageId string The message id
     * @param pollId string The poll id
     * @param answerText string The answer text
     * @param userId string The user id (only serverside)
     */

  }, {
    key: "addPollAnswer",
    value: function () {
      var _addPollAnswer = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee111(messageId, pollId, answerText, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee111$(_context111) {
          while (1) {
            switch (_context111.prev = _context111.next) {
              case 0:
                return _context111.abrupt("return", this.castPollVote(messageId, pollId, {
                  answer_text: answerText
                }, userId));

              case 1:
              case "end":
                return _context111.stop();
            }
          }
        }, _callee111, this);
      }));

      function addPollAnswer(_x169, _x170, _x171, _x172) {
        return _addPollAnswer.apply(this, arguments);
      }

      return addPollAnswer;
    }()
  }, {
    key: "removePollVote",
    value: function () {
      var _removePollVote = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee112(messageId, pollId, voteId, userId) {
        return _regeneratorRuntime__default['default'].wrap(function _callee112$(_context112) {
          while (1) {
            switch (_context112.prev = _context112.next) {
              case 0:
                _context112.next = 2;
                return this.delete(this.baseURL + "/messages/".concat(encodeURIComponent(messageId), "/polls/").concat(encodeURIComponent(pollId), "/vote/").concat(encodeURIComponent(voteId)), _objectSpread$1({}, userId ? {
                  user_id: userId
                } : {}));

              case 2:
                return _context112.abrupt("return", _context112.sent);

              case 3:
              case "end":
                return _context112.stop();
            }
          }
        }, _callee112, this);
      }));

      function removePollVote(_x173, _x174, _x175, _x176) {
        return _removePollVote.apply(this, arguments);
      }

      return removePollVote;
    }()
    /**
     * Queries polls
     * @param filter
     * @param sort
     * @param options Option object, {limit: 10, offset:0}
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & QueryPollsResponse} The polls
     */

  }, {
    key: "queryPolls",
    value: function () {
      var _queryPolls = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee113() {
        var filter,
            sort,
            options,
            userId,
            q,
            _args113 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee113$(_context113) {
          while (1) {
            switch (_context113.prev = _context113.next) {
              case 0:
                filter = _args113.length > 0 && _args113[0] !== undefined ? _args113[0] : {};
                sort = _args113.length > 1 && _args113[1] !== undefined ? _args113[1] : [];
                options = _args113.length > 2 && _args113[2] !== undefined ? _args113[2] : {};
                userId = _args113.length > 3 ? _args113[3] : undefined;
                q = userId ? "?user_id=".concat(userId) : '';
                _context113.next = 7;
                return this.post(this.baseURL + "/polls/query".concat(q), _objectSpread$1({
                  filter: filter,
                  sort: normalizeQuerySort(sort)
                }, options));

              case 7:
                return _context113.abrupt("return", _context113.sent);

              case 8:
              case "end":
                return _context113.stop();
            }
          }
        }, _callee113, this);
      }));

      function queryPolls() {
        return _queryPolls.apply(this, arguments);
      }

      return queryPolls;
    }()
    /**
     * Queries poll votes
     * @param pollId
     * @param filter
     * @param sort
     * @param options Option object, {limit: 10, offset:0}
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & PollVotesAPIResponse} The poll votes
     */

  }, {
    key: "queryPollVotes",
    value: function () {
      var _queryPollVotes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee114(pollId) {
        var filter,
            sort,
            options,
            userId,
            q,
            _args114 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee114$(_context114) {
          while (1) {
            switch (_context114.prev = _context114.next) {
              case 0:
                filter = _args114.length > 1 && _args114[1] !== undefined ? _args114[1] : {};
                sort = _args114.length > 2 && _args114[2] !== undefined ? _args114[2] : [];
                options = _args114.length > 3 && _args114[3] !== undefined ? _args114[3] : {};
                userId = _args114.length > 4 ? _args114[4] : undefined;
                q = userId ? "?user_id=".concat(userId) : '';
                _context114.next = 7;
                return this.post(this.baseURL + "/polls/".concat(encodeURIComponent(pollId), "/votes").concat(q), _objectSpread$1({
                  filter: filter,
                  sort: normalizeQuerySort(sort)
                }, options));

              case 7:
                return _context114.abrupt("return", _context114.sent);

              case 8:
              case "end":
                return _context114.stop();
            }
          }
        }, _callee114, this);
      }));

      function queryPollVotes(_x177) {
        return _queryPollVotes.apply(this, arguments);
      }

      return queryPollVotes;
    }()
    /**
     * Queries poll answers
     * @param pollId
     * @param filter
     * @param sort
     * @param options Option object, {limit: 10, offset:0}
     * @param userId string The user id (only serverside)
     * @returns {APIResponse & PollAnswersAPIResponse} The poll votes
     */

  }, {
    key: "queryPollAnswers",
    value: function () {
      var _queryPollAnswers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee115(pollId) {
        var filter,
            sort,
            options,
            userId,
            q,
            _args115 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee115$(_context115) {
          while (1) {
            switch (_context115.prev = _context115.next) {
              case 0:
                filter = _args115.length > 1 && _args115[1] !== undefined ? _args115[1] : {};
                sort = _args115.length > 2 && _args115[2] !== undefined ? _args115[2] : [];
                options = _args115.length > 3 && _args115[3] !== undefined ? _args115[3] : {};
                userId = _args115.length > 4 ? _args115[4] : undefined;
                q = userId ? "?user_id=".concat(userId) : '';
                _context115.next = 7;
                return this.post(this.baseURL + "/polls/".concat(encodeURIComponent(pollId), "/votes").concat(q), _objectSpread$1({
                  filter: _objectSpread$1(_objectSpread$1({}, filter), {}, {
                    is_answer: true
                  }),
                  sort: normalizeQuerySort(sort)
                }, options));

              case 7:
                return _context115.abrupt("return", _context115.sent);

              case 8:
              case "end":
                return _context115.stop();
            }
          }
        }, _callee115, this);
      }));

      function queryPollAnswers(_x178) {
        return _queryPollAnswers.apply(this, arguments);
      }

      return queryPollAnswers;
    }()
    /**
     * Query message history
     * @param filter
     * @param sort
     * @param options Option object, {limit: 10}
     * @returns {APIResponse & QueryMessageHistoryResponse} The message histories
     */

  }, {
    key: "queryMessageHistory",
    value: function () {
      var _queryMessageHistory = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee116() {
        var filter,
            sort,
            options,
            _args116 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee116$(_context116) {
          while (1) {
            switch (_context116.prev = _context116.next) {
              case 0:
                filter = _args116.length > 0 && _args116[0] !== undefined ? _args116[0] : {};
                sort = _args116.length > 1 && _args116[1] !== undefined ? _args116[1] : [];
                options = _args116.length > 2 && _args116[2] !== undefined ? _args116[2] : {};
                _context116.next = 5;
                return this.post(this.baseURL + '/messages/history', _objectSpread$1({
                  filter: filter,
                  sort: normalizeQuerySort(sort)
                }, options));

              case 5:
                return _context116.abrupt("return", _context116.sent);

              case 6:
              case "end":
                return _context116.stop();
            }
          }
        }, _callee116, this);
      }));

      function queryMessageHistory() {
        return _queryMessageHistory.apply(this, arguments);
      }

      return queryMessageHistory;
    }()
    /**
     * updateFlags - reviews/unflags flagged message
     *
     * @param {string[]} message_ids list of message IDs
     * @param {string} options Option object in case user ID is set to review all the flagged messages by the user
     * @param {string} reviewed_by user ID who reviewed the flagged message
     * @returns {APIResponse}
     */

  }, {
    key: "updateFlags",
    value: function () {
      var _updateFlags = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee117(message_ids, reviewed_by) {
        var options,
            _args117 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee117$(_context117) {
          while (1) {
            switch (_context117.prev = _context117.next) {
              case 0:
                options = _args117.length > 2 && _args117[2] !== undefined ? _args117[2] : {};
                _context117.next = 3;
                return this.post(this.baseURL + '/automod/v1/moderation/update_flags', _objectSpread$1({
                  message_ids: message_ids,
                  reviewed_by: reviewed_by
                }, options));

              case 3:
                return _context117.abrupt("return", _context117.sent);

              case 4:
              case "end":
                return _context117.stop();
            }
          }
        }, _callee117, this);
      }));

      function updateFlags(_x179, _x180) {
        return _updateFlags.apply(this, arguments);
      }

      return updateFlags;
    }()
    /**
     * queryDrafts - Queries drafts for the current user
     *
     * @param {object} [options] Query options
     * @param {object} [options.filter] Filters for the query
     * @param {number} [options.sort] Sort parameters
     * @param {number} [options.limit] Limit the number of results
     * @param {string} [options.next] Pagination parameter
     * @param {string} [options.prev] Pagination parameter
     * @param {string} [options.user_id] Has to be provided when called server-side
     *
     * @return {Promise<APIResponse & { drafts: DraftResponse<StreamChatGenerics>[]; next?: string }>} Response containing the drafts
     */

  }, {
    key: "queryDrafts",
    value: function () {
      var _queryDrafts = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee118() {
        var options,
            payload,
            _args118 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee118$(_context118) {
          while (1) {
            switch (_context118.prev = _context118.next) {
              case 0:
                options = _args118.length > 0 && _args118[0] !== undefined ? _args118[0] : {};
                payload = _objectSpread$1(_objectSpread$1({}, options), {}, {
                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined
                });
                _context118.next = 4;
                return this.post(this.baseURL + '/drafts/query', payload);

              case 4:
                return _context118.abrupt("return", _context118.sent);

              case 5:
              case "end":
                return _context118.stop();
            }
          }
        }, _callee118, this);
      }));

      function queryDrafts() {
        return _queryDrafts.apply(this, arguments);
      }

      return queryDrafts;
    }()
  }], [{
    key: "getInstance",
    value: function getInstance(key, secretOrOptions, options) {
      if (!StreamChat._instance) {
        if (typeof secretOrOptions === 'string') {
          StreamChat._instance = new StreamChat(key, secretOrOptions, options);
        } else {
          StreamChat._instance = new StreamChat(key, secretOrOptions);
        }
      }

      return StreamChat._instance;
    }
  }]);

  return StreamChat;
}();

_defineProperty__default['default'](StreamChat, "_instance", void 0);

var EVENT_MAP = {
  'channel.created': true,
  'channel.deleted': true,
  'channel.hidden': true,
  'channel.kicked': true,
  'channel.muted': true,
  'channel.truncated': true,
  'channel.unmuted': true,
  'channel.updated': true,
  'channel.visible': true,
  'health.check': true,
  'member.added': true,
  'member.removed': true,
  'member.updated': true,
  'message.deleted': true,
  'message.new': true,
  'message.read': true,
  'message.updated': true,
  'message.undeleted': true,
  'notification.added_to_channel': true,
  'notification.channel_deleted': true,
  'notification.channel_mutes_updated': true,
  'notification.channel_truncated': true,
  'notification.invite_accepted': true,
  'notification.invite_rejected': true,
  'notification.invited': true,
  'notification.mark_read': true,
  'notification.mark_unread': true,
  'notification.message_new': true,
  'notification.mutes_updated': true,
  'notification.removed_from_channel': true,
  'notification.thread_message_new': true,
  'poll.closed': true,
  'poll.updated': true,
  'poll.vote_casted': true,
  'poll.vote_changed': true,
  'poll.vote_removed': true,
  'reaction.deleted': true,
  'reaction.new': true,
  'reaction.updated': true,
  'thread.updated': true,
  'typing.start': true,
  'typing.stop': true,
  'user.banned': true,
  'user.deleted': true,
  'user.presence.changed': true,
  'user.unbanned': true,
  'user.unread_message_reminder': true,
  'user.updated': true,
  'user.watching.start': true,
  'user.watching.stop': true,
  // AI events
  'ai_indicator.update': true,
  'ai_indicator.stop': true,
  'ai_indicator.clear': true,
  // local events
  'channels.queried': true,
  'connection.changed': true,
  'connection.recovered': true,
  'transport.changed': true,
  'capabilities.changed': true
};

var Allow = 'Allow';
var Deny = 'Deny';
var AnyResource = ['*'];
var AnyRole = ['*'];
var MaxPriority = 999;
var MinPriority = 1; // deprecated permission object class, you should use the new permission system v2 and use permissions
// defined in BuiltinPermissions to configure your channel types

var Permission = function Permission(name, priority) {
  var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnyResource;
  var roles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AnyRole;
  var owner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Allow;

  _classCallCheck__default['default'](this, Permission);

  _defineProperty__default['default'](this, "name", void 0);

  _defineProperty__default['default'](this, "action", void 0);

  _defineProperty__default['default'](this, "owner", void 0);

  _defineProperty__default['default'](this, "priority", void 0);

  _defineProperty__default['default'](this, "resources", void 0);

  _defineProperty__default['default'](this, "roles", void 0);

  this.name = name;
  this.action = action;
  this.owner = owner;
  this.priority = priority;
  this.resources = resources;
  this.roles = roles;
}; // deprecated

var AllowAll = new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow); // deprecated

var DenyAll = new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);
var BuiltinRoles = {
  Admin: 'admin',
  Anonymous: 'anonymous',
  ChannelMember: 'channel_member',
  ChannelModerator: 'channel_moderator',
  Guest: 'guest',
  User: 'user'
};
var BuiltinPermissions = {
  AddLinks: 'Add Links',
  BanUser: 'Ban User',
  CreateChannel: 'Create Channel',
  CreateMessage: 'Create Message',
  CreateReaction: 'Create Reaction',
  DeleteAnyAttachment: 'Delete Any Attachment',
  DeleteAnyChannel: 'Delete Any Channel',
  DeleteAnyMessage: 'Delete Any Message',
  DeleteAnyReaction: 'Delete Any Reaction',
  DeleteOwnAttachment: 'Delete Own Attachment',
  DeleteOwnChannel: 'Delete Own Channel',
  DeleteOwnMessage: 'Delete Own Message',
  DeleteOwnReaction: 'Delete Own Reaction',
  ReadAnyChannel: 'Read Any Channel',
  ReadOwnChannel: 'Read Own Channel',
  RunMessageAction: 'Run Message Action',
  UpdateAnyChannel: 'Update Any Channel',
  UpdateAnyMessage: 'Update Any Message',
  UpdateMembersAnyChannel: 'Update Members Any Channel',
  UpdateMembersOwnChannel: 'Update Members Own Channel',
  UpdateOwnChannel: 'Update Own Channel',
  UpdateOwnMessage: 'Update Own Message',
  UploadAttachment: 'Upload Attachment',
  UseFrozenChannel: 'Send messages and reactions to frozen channels'
};

var _excluded = ["lastQueryError"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var DEFAULT_SEARCH_SOURCE_OPTIONS = {
  debounceMs: 300,
  pageSize: 10
};
var BaseSearchSource = /*#__PURE__*/function () {
  function BaseSearchSource(options) {
    var _this = this;

    _classCallCheck__default['default'](this, BaseSearchSource);

    _defineProperty__default['default'](this, "state", void 0);

    _defineProperty__default['default'](this, "pageSize", void 0);

    _defineProperty__default['default'](this, "type", void 0);

    _defineProperty__default['default'](this, "searchDebounced", void 0);

    _defineProperty__default['default'](this, "setDebounceOptions", function (_ref) {
      var debounceMs = _ref.debounceMs;
      _this.searchDebounced = debounce(_this.executeQuery.bind(_this), debounceMs);
    });

    _defineProperty__default['default'](this, "activate", function () {
      if (_this.isActive) return;

      _this.state.partialNext({
        isActive: true
      });
    });

    _defineProperty__default['default'](this, "deactivate", function () {
      if (!_this.isActive) return;

      _this.state.partialNext({
        isActive: false
      });
    });

    _defineProperty__default['default'](this, "search", function (searchQuery) {
      _this.searchDebounced(searchQuery);
    });

    var _DEFAULT_SEARCH_SOURC = _objectSpread(_objectSpread({}, DEFAULT_SEARCH_SOURCE_OPTIONS), options),
        _debounceMs = _DEFAULT_SEARCH_SOURC.debounceMs,
        pageSize = _DEFAULT_SEARCH_SOURC.pageSize;

    this.pageSize = pageSize;
    this.state = new StateStore(this.initialState);
    this.setDebounceOptions({
      debounceMs: _debounceMs
    });
  }

  _createClass__default['default'](BaseSearchSource, [{
    key: "lastQueryError",
    get: function get() {
      return this.state.getLatestValue().lastQueryError;
    }
  }, {
    key: "hasNext",
    get: function get() {
      return this.state.getLatestValue().hasNext;
    }
  }, {
    key: "hasResults",
    get: function get() {
      return Array.isArray(this.state.getLatestValue().items);
    }
  }, {
    key: "isActive",
    get: function get() {
      return this.state.getLatestValue().isActive;
    }
  }, {
    key: "isLoading",
    get: function get() {
      return this.state.getLatestValue().isLoading;
    }
  }, {
    key: "initialState",
    get: function get() {
      return {
        hasNext: true,
        isActive: false,
        isLoading: false,
        items: undefined,
        lastQueryError: undefined,
        next: undefined,
        offset: 0,
        searchQuery: ''
      };
    }
  }, {
    key: "items",
    get: function get() {
      return this.state.getLatestValue().items;
    }
  }, {
    key: "next",
    get: function get() {
      return this.state.getLatestValue().next;
    }
  }, {
    key: "offset",
    get: function get() {
      return this.state.getLatestValue().offset;
    }
  }, {
    key: "searchQuery",
    get: function get() {
      return this.state.getLatestValue().searchQuery;
    }
  }, {
    key: "executeQuery",
    value: function () {
      var _executeQuery = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(newSearchString) {
        var hasNewSearchQuery, searchString, stateUpdate, results, _items, next, _this$offset;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                hasNewSearchQuery = typeof newSearchString !== 'undefined';
                searchString = newSearchString !== null && newSearchString !== void 0 ? newSearchString : this.searchQuery;

                if (!(!this.isActive || this.isLoading || !this.hasNext && !hasNewSearchQuery || !searchString)) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return");

              case 4:
                if (hasNewSearchQuery) {
                  this.state.next(_objectSpread(_objectSpread({}, this.initialState), {}, {
                    isActive: this.isActive,
                    isLoading: true,
                    searchQuery: newSearchString !== null && newSearchString !== void 0 ? newSearchString : ''
                  }));
                } else {
                  this.state.partialNext({
                    isLoading: true
                  });
                }

                stateUpdate = {};
                _context.prev = 6;
                _context.next = 9;
                return this.query(searchString);

              case 9:
                results = _context.sent;

                if (results) {
                  _context.next = 12;
                  break;
                }

                return _context.abrupt("return");

              case 12:
                _items = results.items, next = results.next;

                if (next) {
                  stateUpdate.next = next;
                  stateUpdate.hasNext = !!next;
                } else {
                  stateUpdate.offset = ((_this$offset = this.offset) !== null && _this$offset !== void 0 ? _this$offset : 0) + _items.length;
                  stateUpdate.hasNext = _items.length === this.pageSize;
                }

                _context.next = 16;
                return this.filterQueryResults(_items);

              case 16:
                stateUpdate.items = _context.sent;
                _context.next = 22;
                break;

              case 19:
                _context.prev = 19;
                _context.t0 = _context["catch"](6);
                stateUpdate.lastQueryError = _context.t0;

              case 22:
                _context.prev = 22;
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                this.state.next(function (_ref2) {
                  var _current$items;

                  _ref2.lastQueryError;
                      var current = _objectWithoutProperties__default['default'](_ref2, _excluded);

                  return _objectSpread(_objectSpread(_objectSpread({}, current), stateUpdate), {}, {
                    isLoading: false,
                    items: [].concat(_toConsumableArray__default['default']((_current$items = current.items) !== null && _current$items !== void 0 ? _current$items : []), _toConsumableArray__default['default'](stateUpdate.items || []))
                  });
                });
                return _context.finish(22);

              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[6, 19, 22, 25]]);
      }));

      function executeQuery(_x) {
        return _executeQuery.apply(this, arguments);
      }

      return executeQuery;
    }()
  }, {
    key: "resetState",
    value: function resetState() {
      this.state.next(this.initialState);
    }
  }]);

  return BaseSearchSource;
}();
var UserSearchSource = /*#__PURE__*/function (_BaseSearchSource) {
  _inherits__default['default'](UserSearchSource, _BaseSearchSource);

  var _super = _createSuper(UserSearchSource);

  function UserSearchSource(client, options) {
    var _this2;

    _classCallCheck__default['default'](this, UserSearchSource);

    _this2 = _super.call(this, options);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this2), "type", 'users');

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this2), "client", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this2), "filters", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this2), "sort", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this2), "searchOptions", void 0);

    _this2.client = client;
    return _this2;
  }

  _createClass__default['default'](UserSearchSource, [{
    key: "query",
    value: function () {
      var _query = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(searchQuery) {
        var filters, sort, options, _yield$this$client$qu, users;

        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                filters = _objectSpread({
                  $or: [{
                    id: {
                      $autocomplete: searchQuery
                    }
                  }, {
                    name: {
                      $autocomplete: searchQuery
                    }
                  }]
                }, this.filters);
                sort = _objectSpread({
                  id: 1
                }, this.sort);
                options = _objectSpread(_objectSpread({}, this.searchOptions), {}, {
                  limit: this.pageSize,
                  offset: this.offset
                });
                _context2.next = 5;
                return this.client.queryUsers(filters, sort, options);

              case 5:
                _yield$this$client$qu = _context2.sent;
                users = _yield$this$client$qu.users;
                return _context2.abrupt("return", {
                  items: users
                });

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function query(_x2) {
        return _query.apply(this, arguments);
      }

      return query;
    }()
  }, {
    key: "filterQueryResults",
    value: function filterQueryResults(items) {
      var _this3 = this;

      return items.filter(function (u) {
        var _this3$client$user;

        return u.id !== ((_this3$client$user = _this3.client.user) === null || _this3$client$user === void 0 ? void 0 : _this3$client$user.id);
      });
    }
  }]);

  return UserSearchSource;
}(BaseSearchSource);
var ChannelSearchSource = /*#__PURE__*/function (_BaseSearchSource2) {
  _inherits__default['default'](ChannelSearchSource, _BaseSearchSource2);

  var _super2 = _createSuper(ChannelSearchSource);

  function ChannelSearchSource(client, options) {
    var _this4;

    _classCallCheck__default['default'](this, ChannelSearchSource);

    _this4 = _super2.call(this, options);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this4), "type", 'channels');

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this4), "client", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this4), "filters", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this4), "sort", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this4), "searchOptions", void 0);

    _this4.client = client;
    return _this4;
  }

  _createClass__default['default'](ChannelSearchSource, [{
    key: "query",
    value: function () {
      var _query2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(searchQuery) {
        var _this$sort;

        var filters, sort, options, items;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                filters = _objectSpread({
                  members: {
                    $in: [this.client.userID]
                  },
                  name: {
                    $autocomplete: searchQuery
                  }
                }, this.filters);
                sort = (_this$sort = this.sort) !== null && _this$sort !== void 0 ? _this$sort : {};
                options = _objectSpread(_objectSpread({}, this.searchOptions), {}, {
                  limit: this.pageSize,
                  offset: this.offset
                });
                _context3.next = 5;
                return this.client.queryChannels(filters, sort, options);

              case 5:
                items = _context3.sent;
                return _context3.abrupt("return", {
                  items: items
                });

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function query(_x3) {
        return _query2.apply(this, arguments);
      }

      return query;
    }()
  }, {
    key: "filterQueryResults",
    value: function filterQueryResults(items) {
      return items;
    }
  }]);

  return ChannelSearchSource;
}(BaseSearchSource);
var MessageSearchSource = /*#__PURE__*/function (_BaseSearchSource3) {
  _inherits__default['default'](MessageSearchSource, _BaseSearchSource3);

  var _super3 = _createSuper(MessageSearchSource);

  function MessageSearchSource(client, options) {
    var _this5;

    _classCallCheck__default['default'](this, MessageSearchSource);

    _this5 = _super3.call(this, options);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this5), "type", 'messages');

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this5), "client", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this5), "messageSearchChannelFilters", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this5), "messageSearchFilters", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this5), "messageSearchSort", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this5), "channelQueryFilters", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this5), "channelQuerySort", void 0);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this5), "channelQueryOptions", void 0);

    _this5.client = client;
    return _this5;
  }

  _createClass__default['default'](MessageSearchSource, [{
    key: "query",
    value: function () {
      var _query3 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(searchQuery) {
        var _this6 = this;

        var channelFilters, messageFilters, sort, options, _yield$this$client$se, next, results, items, cids, allChannelsLoadedLocally;

        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (this.client.userID) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return", {
                  items: []
                });

              case 2:
                channelFilters = _objectSpread({
                  members: {
                    $in: [this.client.userID]
                  }
                }, this.messageSearchChannelFilters);
                messageFilters = _objectSpread({
                  text: searchQuery,
                  type: 'regular'
                }, this.messageSearchFilters);
                sort = _objectSpread({
                  created_at: -1
                }, this.messageSearchSort);
                options = {
                  limit: this.pageSize,
                  next: this.next,
                  sort: sort
                };
                _context4.next = 8;
                return this.client.search(channelFilters, messageFilters, options);

              case 8:
                _yield$this$client$se = _context4.sent;
                next = _yield$this$client$se.next;
                results = _yield$this$client$se.results;
                items = results.map(function (_ref3) {
                  var message = _ref3.message;
                  return message;
                });
                cids = Array.from(items.reduce(function (acc, message) {
                  if (message.cid && !_this6.client.activeChannels[message.cid]) acc.add(message.cid);
                  return acc;
                }, new Set()) // keep the cids unique
                );
                allChannelsLoadedLocally = cids.length === 0;

                if (allChannelsLoadedLocally) {
                  _context4.next = 17;
                  break;
                }

                _context4.next = 17;
                return this.client.queryChannels(_objectSpread({
                  cid: {
                    $in: cids
                  }
                }, this.channelQueryFilters), _objectSpread({
                  last_message_at: -1
                }, this.channelQuerySort), this.channelQueryOptions);

              case 17:
                return _context4.abrupt("return", {
                  items: items,
                  next: next
                });

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function query(_x4) {
        return _query3.apply(this, arguments);
      }

      return query;
    }()
  }, {
    key: "filterQueryResults",
    value: function filterQueryResults(items) {
      return items;
    }
  }]);

  return MessageSearchSource;
}(BaseSearchSource);
var SearchController = /*#__PURE__*/function () {
  /**
   * Not intended for direct use by integrators, might be removed without notice resulting in
   * broken integrations.
   */
  function SearchController() {
    var _this7 = this;

    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        config = _ref4.config,
        sources = _ref4.sources;

    _classCallCheck__default['default'](this, SearchController);

    _defineProperty__default['default'](this, "_internalState", void 0);

    _defineProperty__default['default'](this, "state", void 0);

    _defineProperty__default['default'](this, "config", void 0);

    _defineProperty__default['default'](this, "addSource", function (source) {
      _this7.state.partialNext({
        sources: [].concat(_toConsumableArray__default['default'](_this7.sources), [source])
      });
    });

    _defineProperty__default['default'](this, "getSource", function (sourceType) {
      return _this7.sources.find(function (s) {
        return s.type === sourceType;
      });
    });

    _defineProperty__default['default'](this, "removeSource", function (sourceType) {
      var newSources = _this7.sources.filter(function (s) {
        return s.type !== sourceType;
      });

      if (newSources.length === _this7.sources.length) return;

      _this7.state.partialNext({
        sources: newSources
      });
    });

    _defineProperty__default['default'](this, "activateSource", function (sourceType) {
      var source = _this7.getSource(sourceType);

      if (!source || source.isActive) return;

      if (_this7.config.keepSingleActiveSource) {
        _this7.sources.forEach(function (s) {
          if (s.type !== sourceType) {
            s.deactivate();
          }
        });
      }

      source.activate();

      _this7.state.partialNext({
        sources: _toConsumableArray__default['default'](_this7.sources)
      });
    });

    _defineProperty__default['default'](this, "deactivateSource", function (sourceType) {
      var source = _this7.getSource(sourceType);

      if (!(source !== null && source !== void 0 && source.isActive)) return;
      if (_this7.activeSources.length === 1) return;
      source.deactivate();

      _this7.state.partialNext({
        sources: _toConsumableArray__default['default'](_this7.sources)
      });
    });

    _defineProperty__default['default'](this, "activate", function () {
      if (!_this7.activeSources.length) {
        var sourcesToActivate = _this7.config.keepSingleActiveSource ? _this7.sources.slice(0, 1) : _this7.sources;
        sourcesToActivate.forEach(function (s) {
          return s.activate();
        });
      }

      if (_this7.isActive) return;

      _this7.state.partialNext({
        isActive: true
      });
    });

    _defineProperty__default['default'](this, "search", /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(searchQuery) {
        var searchedSources;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                searchedSources = _this7.activeSources;

                _this7.state.partialNext({
                  searchQuery: searchQuery
                });

                _context5.next = 4;
                return Promise.all(searchedSources.map(function (source) {
                  return source.search(searchQuery);
                }));

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      return function (_x5) {
        return _ref5.apply(this, arguments);
      };
    }());

    _defineProperty__default['default'](this, "cancelSearchQueries", function () {
      _this7.activeSources.forEach(function (s) {
        return s.searchDebounced.cancel();
      });
    });

    _defineProperty__default['default'](this, "clear", function () {
      _this7.cancelSearchQueries();

      _this7.sources.forEach(function (source) {
        return source.state.next(_objectSpread(_objectSpread({}, source.initialState), {}, {
          isActive: source.isActive
        }));
      });

      _this7.state.next(function (current) {
        return _objectSpread(_objectSpread({}, current), {}, {
          isActive: true,
          queriesInProgress: [],
          searchQuery: ''
        });
      });
    });

    _defineProperty__default['default'](this, "exit", function () {
      _this7.cancelSearchQueries();

      _this7.sources.forEach(function (source) {
        return source.state.next(_objectSpread(_objectSpread({}, source.initialState), {}, {
          isActive: source.isActive
        }));
      });

      _this7.state.next(function (current) {
        return _objectSpread(_objectSpread({}, current), {}, {
          isActive: false,
          queriesInProgress: [],
          searchQuery: ''
        });
      });
    });

    this.state = new StateStore({
      isActive: false,
      searchQuery: '',
      sources: sources !== null && sources !== void 0 ? sources : []
    });
    this._internalState = new StateStore({});
    this.config = _objectSpread({
      keepSingleActiveSource: true
    }, config);
  }

  _createClass__default['default'](SearchController, [{
    key: "hasNext",
    get: function get() {
      return this.sources.some(function (source) {
        return source.hasNext;
      });
    }
  }, {
    key: "sources",
    get: function get() {
      return this.state.getLatestValue().sources;
    }
  }, {
    key: "activeSources",
    get: function get() {
      return this.state.getLatestValue().sources.filter(function (s) {
        return s.isActive;
      });
    }
  }, {
    key: "isActive",
    get: function get() {
      return this.state.getLatestValue().isActive;
    }
  }, {
    key: "searchQuery",
    get: function get() {
      return this.state.getLatestValue().searchQuery;
    }
  }, {
    key: "searchSourceTypes",
    get: function get() {
      return this.sources.map(function (s) {
        return s.type;
      });
    }
  }]);

  return SearchController;
}();

exports.Allow = Allow;
exports.AllowAll = AllowAll;
exports.AnyResource = AnyResource;
exports.AnyRole = AnyRole;
exports.BaseSearchSource = BaseSearchSource;
exports.BuiltinPermissions = BuiltinPermissions;
exports.BuiltinRoles = BuiltinRoles;
exports.Campaign = Campaign;
exports.Channel = Channel;
exports.ChannelManager = ChannelManager;
exports.ChannelSearchSource = ChannelSearchSource;
exports.ChannelState = ChannelState;
exports.CheckSignature = CheckSignature;
exports.ClientState = ClientState;
exports.DEFAULT_CHANNEL_MANAGER_OPTIONS = DEFAULT_CHANNEL_MANAGER_OPTIONS;
exports.DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS = DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS;
exports.Deny = Deny;
exports.DenyAll = DenyAll;
exports.DevToken = DevToken;
exports.EVENT_MAP = EVENT_MAP;
exports.ErrorFromResponse = ErrorFromResponse;
exports.InsightMetrics = InsightMetrics;
exports.JWTServerToken = JWTServerToken;
exports.JWTUserToken = JWTUserToken;
exports.MODERATION_ENTITY_TYPES = MODERATION_ENTITY_TYPES;
exports.MaxPriority = MaxPriority;
exports.MessageSearchSource = MessageSearchSource;
exports.MinPriority = MinPriority;
exports.Moderation = Moderation;
exports.Permission = Permission;
exports.Poll = Poll;
exports.PollManager = PollManager;
exports.SearchController = SearchController;
exports.Segment = Segment;
exports.StableWSConnection = StableWSConnection;
exports.StateStore = StateStore;
exports.StreamChat = StreamChat;
exports.THREAD_MANAGER_INITIAL_STATE = THREAD_MANAGER_INITIAL_STATE;
exports.Thread = Thread;
exports.ThreadManager = ThreadManager;
exports.TokenManager = TokenManager;
exports.UserFromToken = UserFromToken;
exports.UserSearchSource = UserSearchSource;
exports.buildWsFatalInsight = buildWsFatalInsight;
exports.buildWsSuccessAfterFailureInsight = buildWsSuccessAfterFailureInsight;
exports.channelManagerEventToHandlerMapping = channelManagerEventToHandlerMapping;
exports.chatCodes = chatCodes;
exports.decodeBase64 = decodeBase64;
exports.encodeBase64 = encodeBase64;
exports.extractPollData = extractPollData;
exports.extractPollEnrichedData = extractPollEnrichedData;
exports.formatMessage = formatMessage;
exports.isOwnUser = isOwnUser;
exports.isPatch = isPatch;
exports.isVoteAnswer = isVoteAnswer;
exports.logChatPromiseExecution = logChatPromiseExecution;
exports.postInsights = postInsights;
exports.promoteChannel = promoteChannel;
//# sourceMappingURL=index.js.map
